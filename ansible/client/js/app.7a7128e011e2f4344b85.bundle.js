!function(t){function e(e){for(var a,i,s=e[0],l=e[1],c=e[2],u=0,p=[];u<s.length;u++)i=s[u],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&p.push(o[i][0]),o[i]=0;for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&(t[a]=l[a]);for(d&&d(e);p.length;)p.shift()();return n.push.apply(n,c||[]),r()}function r(){for(var t,e=0;e<n.length;e++){for(var r=n[e],a=!0,s=1;s<r.length;s++){var l=r[s];0!==o[l]&&(a=!1)}a&&(n.splice(e--,1),t=i(i.s=r[0]))}return t}var a={},o={0:0},n=[];function i(e){if(a[e])return a[e].exports;var r=a[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=a,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)i.d(r,a,function(e){return t[e]}.bind(null,a));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/";var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=e,s=s.slice();for(var c=0;c<s.length;c++)e(s[c]);var d=l;n.push([125,1]),r()}([,,,function(t,e,r){"use strict";var a=r(26);r.d(e,"d",(function(){return a.b})),r.d(e,"e",(function(){return a.c})),r.d(e,"f",(function(){return a.d})),r.d(e,"h",(function(){return a.e})),r.d(e,"i",(function(){return a.f}));var o=r(66);r.d(e,"b",(function(){return o.a}));var n=r(30);r.d(e,"c",(function(){return n.a})),r.d(e,"g",(function(){return n.b}));var i=r(24);r.d(e,"a",(function(){return i.a}));"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature},function(t,e,r){"use strict";(function(t){var a;r.d(e,"b",(function(){return o})),r.d(e,"a",(function(){return n})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var o,n,i,s;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;!function(t){t.DistrictTable="TABLE_DISTRICT_OVERVIEW",t.ElectionTable="TABLE_ELECTION_OVERVIEW",t.SeatDistribution="SEAT_DISTRIBUTION",t.SingleDistrict="TABLE_SINGLE_COUNTY",t.RemainderQuotients="TABLE_REMAINDER_QUOTIENTS",t.LevellingSeats="TABLE_LEVELLING_SEATS_OVERVIEW"}(o||(o={})),function(t){t.LOOSEMORE_HANBY="LOOSEMORE_HANBY_INDEX",t.GALLAGHER="GALLAGHER_INDEX"}(n||(n={})),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(o,"PresentationType","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-models.ts"),i.register(n,"DisproportionalityIndex","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-models.ts")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";var a=r(16);r.d(e,"a",(function(){return a.b})),r.d(e,"c",(function(){return a.f})),r.d(e,"d",(function(){return a.g})),r.d(e,"e",(function(){return a.h})),r.d(e,"f",(function(){return a.i})),r.d(e,"g",(function(){return a.j})),r.d(e,"h",(function(){return a.l})),r.d(e,"i",(function(){return a.m}));var o=r(64);r.d(e,"b",(function(){return o.a}));var n=r(65);r.d(e,"j",(function(){return n.a}));"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature},,function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return n})),r.d(e,"f",(function(){return l})),r.d(e,"d",(function(){return c})),r.d(e,"b",(function(){return d})),r.d(e,"e",(function(){return u})),r.d(e,"g",(function(){return p})),r.d(e,"c",(function(){return f})),r.d(e,"i",(function(){return b})),r.d(e,"j",(function(){return h})),r.d(e,"h",(function(){return v})),r.d(e,"k",(function(){return y}));var a,o=r(4);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var n,i,s;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function l(){return{type:n.INITIALIZE_PRESENTATION,initialPresentation:o.b.ElectionTable,decimals:"2",decimalsNumber:2,showPartiesWithoutSeats:!0}}function c(t){return{type:n.CHANGE_PRESENTATION,presentationSelected:t}}function d(t,e){return{type:n.CHANGE_DECIMALS,decimals:t,decimalsNumber:e}}function u(t){return{type:n.SHOW_PARTIES_NO_SEATS,showPartiesWithoutSeats:t}}function p(t){return{type:n.SELECT_DISTRICT,districtSelected:t}}function f(t){return{type:n.CHANGE_DISPROPORTIONALITY_INDEX,index:t}}function b(t){return{type:n.TOGGLE_SHOW_COMPARISON,showComparison:t}}function h(t){return{type:n.TOGGLE_SHOW_FILTERS,showFilters:t}}function v(t){return{type:n.TOGGLE_MERGE_DISTRICTS,mergeDistricts:t}}function y(t){return{type:n.TOGGLE_USE_2021_DISTRIBUTION,use2021Distribution:t}}!function(t){t.INITIALIZE_PRESENTATION="INITIALIZE_PRESENTATION",t.CHANGE_PRESENTATION="CHANGE_PRESENTATION",t.CHANGE_DECIMALS="CHANGE_DECIMALS",t.SHOW_PARTIES_NO_SEATS="SHOW_PARTIES_NO_SEATS",t.SELECT_DISTRICT="SELECT_DISTRICT",t.CHANGE_DISPROPORTIONALITY_INDEX="CHANGE_DISPROPORTIONALITY_INDEX",t.TOGGLE_SHOW_COMPARISON="TOGGLE_SHOW_COMPARISON",t.TOGGLE_SHOW_FILTERS="TOGGLE_SHOW_FILTERS",t.TOGGLE_MERGE_DISTRICTS="TOGGLE_MERGE_DISTRICTS",t.TOGGLE_USE_2021_DISTRIBUTION="TOGGLE_USE_2021_DISTRIBUTION"}(n||(n={})),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(n,"PresentationMenuActionType","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-actions.ts"),i.register(l,"initializePresentation","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-actions.ts"),i.register(c,"changePresentation","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-actions.ts"),i.register(d,"changeDecimals","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-actions.ts"),i.register(u,"changeShowPartiesNoSeats","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-actions.ts"),i.register(p,"selectDistrict","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-actions.ts"),i.register(f,"changeDisproportionalityIndex","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-actions.ts"),i.register(b,"toggleShowComparison","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-actions.ts"),i.register(h,"toggleShowFilters","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-actions.ts"),i.register(v,"toggleMergeDistricts","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-actions.ts"),i.register(y,"toggleUse2021Distribution","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-actions.ts")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){var a;r.d(e,"d",(function(){return i})),r.d(e,"b",(function(){return s})),r.d(e,"a",(function(){return c})),r.d(e,"c",(function(){return d})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var o,n;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function i(t,e){return t+e}function s(t,e,r,a){return t+=e,r===a.length-1?t/a.length:t}function l(t,e,r,a){return t+=e=e>=0?e:-1*e,r===a.length-1?t/a.length:t}function c(t,e){return e>t?e:t}function d(t,e){return e<t?e:t}(o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(o.register(i,"toSum","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\reduce.ts"),o.register(s,"toMean","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\reduce.ts"),o.register(l,"toAbsoluteMean","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\reduce.ts"),o.register(c,"toMax","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\reduce.ts"),o.register(d,"toMin","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\reduce.ts")),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&n(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"f",(function(){return i})),r.d(e,"a",(function(){return s})),r.d(e,"h",(function(){return l})),r.d(e,"g",(function(){return c})),r.d(e,"e",(function(){return d})),r.d(e,"b",(function(){return u})),r.d(e,"c",(function(){return b})),r.d(e,"d",(function(){return h}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function n(t){return function(e){t(e.target.value)}}function i(t){return function(e){var r=e.filter,a=e.onChange;return o.createElement("div",{className:"select is-fullwidth"},o.createElement("select",{className:"is-primary",value:r?r.value:t[0].value,onChange:n(a)},t.map((function(t){return o.createElement("option",{key:t.value,value:t.value},t.title)}))))}}function s(t,e){return"all"===t.value||("true"===t.value?e[t.id]>0:"false"===t.value&&0===e[t.id])}function l(t,e){return"all"===t.value||("true"===t.value?0!==e[t.id]:"false"===t.value&&0===e[t.id])}function c(t){return function(e,r){return"all"===e.value||("gteq"===e.value?r[e.id]>=t:"lt"===e.value&&r[e.id]<t)}}function d(){return c(0)}function u(t,e){var r=t.pivotId||t.id,a=t.value.toLowerCase();return void 0!==e[r]||String(e[r]).toLowerCase().startsWith(a)}var p,f,b={pageText:"Side",loadingText:"Laster inn...",nextText:"Neste",previousText:"Forrige",noDataText:"Ingen data",ofText:"av",rowsText:"rader"},h={pageText:"Side",loadingText:"Laster inn...",nextText:"Neste",previousText:"Forrige",noDataText:"Ingen utjevningsmandater",ofText:"av",rowsText:"rader"};(p="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(p.register(n,"handleSelectChange","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\rt.tsx"),p.register(i,"selectFilterWithOptions","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\rt.tsx"),p.register(s,"allGreaterThanEqualsMethod","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\rt.tsx"),p.register(l,"zeroNotZeroFilterMethod","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\rt.tsx"),p.register(c,"thresholdFilterMethod","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\rt.tsx"),p.register(d,"positiveOrNegativeFilterMethod","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\rt.tsx"),p.register(u,"caseInsensitiveFilterMethod","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\rt.tsx"),p.register(b,"norwegian","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\rt.tsx"),p.register(h,"norwegianLeveling","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\rt.tsx")),(f="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&f(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";r.d(e,"a",(function(){return a.a})),r.d(e,"c",(function(){return o.a})),r.d(e,"d",(function(){return n.a})),r.d(e,"e",(function(){return i.a})),r.d(e,"f",(function(){return s.a})),r.d(e,"b",(function(){return l.a}));var a=r(69),o=r(46),n=r(71),i=("undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature,r(72)),s=r(73),l=("undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature,r(74));"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature,"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature},,function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return i})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var o,n;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function i(t){return t}(o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&o.register(i,"checkExhaustively","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\index.ts"),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&n(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){var a;r.d(e,"b",(function(){return i})),r.d(e,"a",(function(){return s})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var o,n;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function i(t,e){var r=Math.pow(10,e);return Math.round(t*r)/r}function s(t,e){return t/e*100}(o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(o.register(i,"roundNumber","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\number.ts"),o.register(s,"calculatePercent","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\number.ts")),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&n(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return o})),r.d(e,"e",(function(){return s})),r.d(e,"c",(function(){return l})),r.d(e,"b",(function(){return c})),r.d(e,"d",(function(){return d})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var o,n,i;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function s(t){return{type:o.TOGGLE_HAMBURGER_EXPANDED,hamburgerExpanded:!t}}function l(){return{type:o.HIDE_TUTORIAL}}function c(t){return{type:o.ADD_NOTIFICATION,notification:t}}function d(t){return{type:o.REMOVE_NOTIFICATION,id:t}}!function(t){t.TOGGLE_HAMBURGER_EXPANDED="TOGGLE_HAMBURGER_EXPANDED",t.HIDE_TUTORIAL="HIDE_TUTORIAL",t.ADD_NOTIFICATION="ADD_NOTIFICATION",t.REMOVE_NOTIFICATION="REMOVE_NOTIFICATION"}(o||(o={})),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(n.register(o,"UiActionType","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ui-actions.ts"),n.register(s,"toggleHamburger","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ui-actions.ts"),n.register(l,"hideTutorial","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ui-actions.ts"),n.register(c,"addNotification","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ui-actions.ts"),n.register(d,"removeNotification","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ui-actions.ts")),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&i(t)}).call(this,r(2)(t))},,function(t,e,r){"use strict";(function(t){r.d(e,"d",(function(){return p})),r.d(e,"e",(function(){return f})),r.d(e,"c",(function(){return b})),r.d(e,"k",(function(){return h})),r.d(e,"f",(function(){return v})),r.d(e,"b",(function(){return S})),r.d(e,"g",(function(){return O})),r.d(e,"a",(function(){return H})),r.d(e,"h",(function(){return M})),r.d(e,"i",(function(){return T})),r.d(e,"j",(function(){return J})),r.d(e,"m",(function(){return P})),r.d(e,"l",(function(){return C})),r.d(e,"n",(function(){return k}));var a,o=r(3),n=r(53),i=r(38),s=r(12),l=r(13);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var c,d,u=new Set(["BLANKE"]);function p(t,e,r){var a={};for(var o in t)t.hasOwnProperty(o)&&(a[o]={name:o,districtSeats:t[o],levelingSeats:0,totalSeats:0,votes:e[o],percentVotes:Object(l.a)(e[o],r),votesPerSeat:0,districtSeatResult:[],partyResults:[]});return a}function f(t,e,r){for(var a={},o=0,n=t;o<n.length;o++){var i=n[o];i.party in a?a[i.party].votes+=i.votes:a[i.party]={partyCode:i.party,partyName:r[i.party],votes:i.votes,percentVotes:0,districtSeats:0,levelingSeats:0,totalSeats:0,proportionality:0}}for(var s in a)if(a.hasOwnProperty(s)){var c=a[s].votes;a[s].percentVotes=Object(l.a)(c,e)}return a}function b(t,e,r){for(var a={},o=0,n=t;o<n.length;o++){var i=n[o];a[i.district]||(a[i.district]={}),a[i.district][i.party]={partyCode:i.party,partyName:r[i.party],votes:i.votes,percentVotes:Object(l.a)(i.votes,e[i.district]),districtSeats:0,levelingSeats:0,totalSeats:0,proportionality:0}}return a}function h(t){for(var e={},r=0,a=t;r<a.length;r++){var o=a[r];o.district in e?e[o.district]+=o.votes:e[o.district]=o.votes}return e}function v(t,e,r,a,o,s,l,c){if(C(t)){var d=m(t,o,a),p=_(s);return Object(i.b)(a,p,d)}var f={},b={},h=[];if(void 0===c){for(var v in s)if(s.hasOwnProperty(v)){var S=s[v];f[S.partyCode]=0,b[S.partyCode]=0}}else for(var v in c)if(c.hasOwnProperty(v)){var O=c[v];f[v]=O.districtSeats,b[v]=0}for(var H=0;H<a;H++){var G={seatIndex:H,winner:"",partyResults:[]},M=[{partyCode:"",quotient:-1,denominator:-1,votes:-1}];for(var v in s)if(Object.prototype.hasOwnProperty.call(s,v)){O=s[v];var A=g(t,f[v],e,a,o),I={partyCode:v,quotient:null!=l?L(t,f[v],l,O.votes,e,a,o):E(t,f[v],O.votes,e,a,o),denominator:A,votes:O.votes};G.partyResults.push(I),!u.has(v)&&O.percentVotes>r&&(M=y(M,I))}var T=n.sample(M);f[T.partyCode]+=1,b[T.partyCode]+=1,G.winner=T.partyCode,h.push(G)}return{seatsWon:b,seatResults:h}}function y(t,e){if(e.quotient>t[0].quotient)return[e];if(e.quotient===t[0].quotient){if(e.votes>t[0].votes)return[e];e.votes===t[0].votes&&t.push(e)}return t}function g(t,e,r,a,n){switch(t){case o.a.SAINTE_LAGUE:return 0===e?r:2*e+1;case o.a.D_HONDT:return e+1;case o.a.LARGEST_FRACTION_HARE:case o.a.LARGEST_FRACTION_DROOP:case o.a.LARGEST_FRACTION_HAGENBACH_BISCHOFF:return m(t,n,a);case o.a.UNDEFINED:return console.error("ERROR! Algorithm type should not be undefined!"),Number.MIN_SAFE_INTEGER;default:return Object(s.a)(t),Number.MIN_SAFE_INTEGER}}function m(t,e,r){switch(t){case o.a.LARGEST_FRACTION_HARE:return Math.floor(e/r);case o.a.LARGEST_FRACTION_DROOP:return Math.floor(e/(r+1))+1;case o.a.LARGEST_FRACTION_HAGENBACH_BISCHOFF:return Math.floor(e/(r+1));default:return console.error("ERROR! "+t.toString()+" does not have an associated election number algorithm!"),Number.MIN_SAFE_INTEGER}}function S(t,e,r,a){for(var o in e)if(e.hasOwnProperty(o)&&!u.has(o)){var n=e[o].totalSeats/t*100;e[o].proportionality=n-e[o].percentVotes}for(var i in r)if(r.hasOwnProperty(i)){var s=a[i].districtSeats+a[i].levelingSeats;for(var o in r[i])if(r[i].hasOwnProperty(o)&&!u.has(o)){n=r[i][o].totalSeats/s*100;r[i][o].proportionality=n-r[i][o].percentVotes}}}function L(t,e,r,a,o,n,i){return E(t,e,a,o,n,i)/r}function E(t,e,r,a,o,n){return r/g(t,e,a,o,n)}function O(t){for(var e in t)t.hasOwnProperty(e)&&(t[e].totalSeats=t[e].districtSeats+t[e].levelingSeats,t[e].votesPerSeat=t[e].votes/t[e].totalSeats)}function H(t,e,r,a){var o=[],n=function(n){if(a.hasOwnProperty(n)){var i=a[n],s={district:i.name,levellingSeatRounds:[]};i.partyResults.forEach((function(a){var o=r?L(t,a.districtSeats,i.votes/i.districtSeats,a.votes,e,i.districtSeats,i.votes):E(t,a.districtSeats,a.votes,e,i.districtSeats,i.votes);s.levellingSeatRounds.push({partyCode:a.partyCode,quotient:o,wonLevellingSeat:a.levelingSeats>0})})),o.push(s)}};for(var i in a)n(i);return o}function G(t,e){return t.sort((function(t,r){return r.quotient!==t.quotient?r.quotient-t.quotient:e[r.partyCode].votes!==e[t.partyCode].votes?e[r.partyCode].votes-e[t.partyCode].votes:Math.random()-.5}))}function M(t,e,r,a,o,n){var i=[];for(var s in a)if(o.hasOwnProperty(s))for(var l=a[s].votes/a[s].districtSeats,c=0,d=e;c<d.length;c++){var u=d[c],p=o[s][u];if(void 0!==p){var f={district:s,partyCode:u,quotient:n?L(t,p.districtSeats,l,p.votes,1,a[s].levelingSeats,a[s].votes):E(t,p.districtSeats,p.votes,1.4,a[s].levelingSeats,a[s].votes),seatNumber:0,quotientNumber:0};i.push(f)}}return i=G(i,r)}function _(t){var e={};for(var r in t)if(t.hasOwnProperty(r)){var a=t[r];e[a.partyCode]=a.votes}return e}function A(t){switch(t){case 1:return o.a.SAINTE_LAGUE;case 2:return o.a.D_HONDT;case 3:return o.a.LARGEST_FRACTION_HARE;case 4:return o.a.LARGEST_FRACTION_DROOP;case 5:return o.a.LARGEST_FRACTION_HAGENBACH_BISCHOFF;default:return o.a.UNDEFINED}}function I(t){switch(t){case 1:return"Sainte-Lagüe";case 2:return"d'Hondt";case 3:return"Største brøk (Hare)";case 4:return"Største brøk (Droop)";case 5:return"Største brøk (Hagenbach-Bischoff)";default:return"Udefinert"}}function T(t){switch(t){case o.a.SAINTE_LAGUE:return"Sainte-Lagüe";case o.a.D_HONDT:return"d'Hondt";case o.a.LARGEST_FRACTION_HARE:return"Største brøk (Hare)";case o.a.LARGEST_FRACTION_DROOP:return"Største brøk (Droop)";case o.a.LARGEST_FRACTION_HAGENBACH_BISCHOFF:return"Største brøk (Hagenbach-Bischoff)";case o.a.UNDEFINED:return"Udefinert";default:return Object(s.a)(t),""}}function J(t){switch(t){case"Sainte Laguës (modified)":return o.a.SAINTE_LAGUE;case"d'Hondt":return o.a.D_HONDT;case"Largest fraction (Hare)":return o.a.LARGEST_FRACTION_HARE;case"Largest fraction (Droop)":return o.a.LARGEST_FRACTION_DROOP;case"Largest fraction (Hagenbach-Bischoff)":return o.a.LARGEST_FRACTION_HAGENBACH_BISCHOFF;default:return o.a.UNDEFINED}}function P(t){return t===o.a.SAINTE_LAGUE||t===o.a.D_HONDT}function C(t){return t===o.a.LARGEST_FRACTION_DROOP||t===o.a.LARGEST_FRACTION_HARE||t===o.a.LARGEST_FRACTION_HAGENBACH_BISCHOFF}function k(t){return t>=2005}(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(c.register(u,"illegalPartyCodes","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(p,"constructDistrictResults","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(f,"constructPartyResults","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(b,"constructDistrictPartyResults","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(h,"getVotesPerDistrict","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(v,"distributeSeats","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(y,"updateWinners","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(g,"getDenominator","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(m,"getElectionNumber","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(S,"calculateProportionality","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(L,"calculateAdjustedQuotient","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(E,"calculateQuotient","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(O,"finalizeDistrictCalculations","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(H,"calculateFinalQuotients","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(G,"sortLevelingSeats","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(M,"generateLevelingSeatArray","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(_,"resultArrayToDictionary","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(A,"getAlgorithmType","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(I,"getAlgorithmName","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(T,"getAlgorithmNameFromType","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(J,"getAlgorithmTypeString","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(P,"isQuotientAlgorithm","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(C,"isLargestFractionAlgorithm","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts"),c.register(k,"shouldApply2005Reform","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\algorithm-utilities.ts")),(d="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&d(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";var a=r(27);r.d(e,"c",(function(){return a.b})),r.d(e,"d",(function(){return a.c})),r.d(e,"e",(function(){return a.d})),r.d(e,"f",(function(){return a.e})),r.d(e,"g",(function(){return a.f}));var o=r(68);r.d(e,"b",(function(){return o.a}));r(41),r(45);var n=r(75);r.d(e,"a",(function(){return n.a}));"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature},function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return o})),r.d(e,"b",(function(){return s})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var o,n,i;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function s(){return{type:o.CLEAR_STATE}}!function(t){t.CLEAR_STATE="CLEAR_STATE"}(o||(o={})),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(n.register(o,"GlobalActionType","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\reducers\\global-actions.ts"),n.register(s,"clearState","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\reducers\\global-actions.ts")),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&i(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return i})),r.d(e,"b",(function(){return s})),r.d(e,"c",(function(){return l})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var o,n;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function i(t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}function s(t){var e=[];for(var r in t)t.hasOwnProperty(r)&&e.push(t[r]);return e}function l(t){var e={};return t.forEach((function(t){return e[t.key]=t.value})),e}(o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(o.register(i,"copyDictionary","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\dictionary.ts"),o.register(s,"dictionaryToArray","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\dictionary.ts"),o.register(l,"rawDictionaryToDictionary","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\dictionary.ts")),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&n(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"d",(function(){return c})),r.d(e,"b",(function(){return d})),r.d(e,"f",(function(){return u})),r.d(e,"c",(function(){return p})),r.d(e,"g",(function(){return f})),r.d(e,"i",(function(){return b})),r.d(e,"h",(function(){return h})),r.d(e,"a",(function(){return v})),r.d(e,"j",(function(){return g})),r.d(e,"e",(function(){return m}));var a,o=r(13);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s=function(){return(s=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},l=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var a=Array(t),o=0;for(e=0;e<r;e++)for(var n=arguments[e],i=0,s=n.length;i<s;i++,o++)a[o]=n[i];return a};function c(t,e,r){var a=l(t);e||(a=a.filter((function(t){return t.totalSeats>0})));for(var n=[],i=0,s=a;i<s.length;i++){var c=s[i];n.push({partyCode:c.partyCode,partyName:c.partyName,votes:c.votes,percentVotes:Object(o.b)(c.percentVotes,r),districtSeats:c.districtSeats,levelingSeats:c.levelingSeats,totalSeats:c.totalSeats,proportionality:Object(o.b)(c.proportionality,r)})}return n}function d(t,e){for(var r=[],a=0,n=t;a<n.length;a++){var i=n[a];r.push({name:i.name,votes:i.votes,percentVotes:Object(o.b)(i.percentVotes,e),districtSeats:i.districtSeats,levelingSeats:i.levelingSeats,totalSeats:i.totalSeats,votesPerSeat:Object(o.b)(i.votesPerSeat,e),districtSeatResult:i.districtSeatResult,partyResults:i.partyResults})}return r}function u(t,e,r){if(r)return t;for(var a={},o=[],n=0,i=e;n<i.length;n++){var s=i[n];a[s.partyCode]=s.totalSeats}for(var l=0,c=t;l<c.length;l++){var d=c[l];o.push({name:d.name,votes:d.votes,percentVotes:d.percentVotes,districtSeats:d.districtSeats,levelingSeats:d.levelingSeats,totalSeats:d.totalSeats,votesPerSeat:d.votesPerSeat,districtSeatResult:d.districtSeatResult,partyResults:d.partyResults.filter((function(t){return a[t.partyCode]>0}))})}return o}function p(t,e){if(e)return t;for(var r=[],a=0,o=t;a<o.length;a++){var n=o[a];r.push({name:n.name,votes:n.votes,percentVotes:n.percentVotes,districtSeats:n.districtSeats,levelingSeats:n.levelingSeats,totalSeats:n.totalSeats,votesPerSeat:n.votesPerSeat,districtSeatResult:n.districtSeatResult,partyResults:n.partyResults.filter((function(t){return t.totalSeats>0}))})}return r}function f(t,e){return e?t:t.filter((function(t){return t.totalSeats>0}))}function b(t,e){var r=[];return t.forEach((function(t){r.push(s(s({},t),{percentVotes:Object(o.b)(t.percentVotes,e),proportionality:Object(o.b)(t.proportionality,e)}))})),r}function h(t){var e=new Set,r=[];return t.forEach((function(t){e.has(t.district+t.seatNumber)||(r.push(t),e.add(t.district+t.seatNumber))})),r}function v(t){var e=[];return t.forEach((function(t){t.levelingSeats.forEach((function(t){e.push(t)}))})),e}function y(t,e){void 0===e&&(e=[]);for(var r=0,a=t.length;r<a;r++){var o=t[r];Array.isArray(o)?y(o,e):e.push(o)}return e}function g(t){var e=t;return e.sort((function(t,e){return t.seatNumber<e.seatNumber?-1:t.seatNumber>e.seatNumber?1:0})),e}function m(t){var e=[];return t.forEach((function(t){t.seatNumber>0&&e.push(t)})),e}(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(n.register(s,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-utilities.ts"),n.register(l,"__spreadArrays","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-utilities.ts"),n.register(c,"getPartyTableData","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-utilities.ts"),n.register(d,"getDistrictTableData","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-utilities.ts"),n.register(u,"getSeatDistributionData","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-utilities.ts"),n.register(p,"getLocalSeatDistribution","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-utilities.ts"),n.register(f,"getSeatsPerPartyData","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-utilities.ts"),n.register(b,"roundPartyResults","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-utilities.ts"),n.register(h,"removeSeatDuplicates","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-utilities.ts"),n.register(v,"flattenPartyRestQuotients","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-utilities.ts"),n.register(y,"flattenAny","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-utilities.ts"),n.register(g,"sortSeatsByNumber","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-utilities.ts"),n.register(m,"getRoundsAssignedSeats","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\presentation-utilities.ts")),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&i(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return o})),r.d(e,"e",(function(){return s})),r.d(e,"b",(function(){return l})),r.d(e,"c",(function(){return c})),r.d(e,"d",(function(){return d})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var o,n,i;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function s(t){return{type:o.INITIALIZE_REQUESTED_VOTES,votes:t}}function l(t){return{type:o.INITIALIZE_REQUESTED_METRICS,metrics:t}}function c(t){return{type:o.INITIALIZE_REQUESTED_PARAMETERS,parameters:t}}function d(t){return{type:o.INITIALIZE_REQUESTED_PARTY_MAP,partyMap:t}}!function(t){t.INITIALIZE_REQUESTED_VOTES="INITIALIZE_REQUESTED_VOTES",t.INITIALIZE_REQUESTED_METRICS="INITIALIZE_REQUESTED_METRICS",t.INITIALIZE_REQUESTED_PARAMETERS="INITIALIZE_REQUESTED_PARAMETERS",t.INITIALIZE_REQUESTED_PARTY_MAP="INITIALIZE_REQUESTED_PARTY_MAP"}(o||(o={})),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(n.register(o,"RequestedDataActionType","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\requested-data\\requested-data-actions.ts"),n.register(s,"initializeRequestedVotes","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\requested-data\\requested-data-actions.ts"),n.register(l,"initializeRequestedMetrics","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\requested-data\\requested-data-actions.ts"),n.register(c,"initializeRequestedParameters","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\requested-data\\requested-data-actions.ts"),n.register(d,"initializeRequestedPartyMap","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\requested-data\\requested-data-actions.ts")),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&i(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return l})),r.d(e,"c",(function(){return c})),r.d(e,"b",(function(){return f}));var a,o=r(59);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s=function(){return(s=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},l=new Map([["Nord-Trøndelag","Trøndelag"],["Sør-Trøndelag","Trøndelag"],["Hordaland","Vestland"],["Sogn og Fjordane","Vestland"],["Aust-Agder","Agder"],["Vest-Agder","Agder"],["Vestfold","Vestfold og Telemark"],["Telemark","Vestfold og Telemark"],["Oppland","Innlandet"],["Hedmark","Innlandet"],["Buskerud","Viken"],["Akershus","Viken"],["Østfold","Viken"],["Troms","Troms og Finnmark"],["Finnmark","Troms og Finnmark"]]);function c(t,e){var r=d(t,e),a=r.finishedVotes,o=u(r.groupedVotes);return a.concat(o)}function d(t,e){for(var r=[],a=new Map,n=0,i=t.length;n<i;n++){var l=s({},t[n]),c=e.get(l.district);if(void 0===c)r.push(l);else{a.has(c)||a.set(c,new Map);var d=a.get(c);d&&(d=Object(o.a)(d,l.party,l),a.set(c,d))}}return{finishedVotes:r,groupedVotes:a}}function u(t){var e=[];return t.forEach((function(t,r){t.forEach((function(t,a){var o=t.reduce(p);o.district=r,e.push(o)}))})),e}function p(t,e){return{district:"PLACEHOLDER",electionType:e.electionType,electionYear:e.electionYear,party:e.party,votes:t.votes+e.votes}}function f(t,e){var r=b(t,e),a=r.finishedMetrics,o=h(r.groupedMetrics);return a.concat(o)}function b(t,e){for(var r=[],a=new Map,n=0,i=t.length;n<i;n++){var s=t[n],l=e.get(s.district);void 0===l?r.push(s):a=Object(o.a)(a,l,s)}return{finishedMetrics:r,groupedMetrics:a}}function h(t){var e=[];return t.forEach((function(t,r){var a=t.reduce(v);a.district=r,e.push(a)})),e}function v(t,e){return{area:t.area+e.area,district:e.district,electionYear:e.electionYear,population:t.population+e.population,seats:t.seats+e.seats}}(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(n.register(s,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\district-merging.ts"),n.register(l,"districtMap","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\district-merging.ts"),n.register(c,"mergeVoteDistricts","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\district-merging.ts"),n.register(d,"groupVotes","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\district-merging.ts"),n.register(u,"mergeVotes","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\district-merging.ts"),n.register(p,"votesReducer","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\district-merging.ts"),n.register(f,"mergeMetricDistricts","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\district-merging.ts"),n.register(b,"groupMetrics","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\district-merging.ts"),n.register(h,"mergeMetrics","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\district-merging.ts"),n.register(v,"metricReducer","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\district-merging.ts")),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&i(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"b",(function(){return b})),r.d(e,"c",(function(){return v})),r.d(e,"d",(function(){return y})),r.d(e,"a",(function(){return m}));var a,o=r(19),n=r(38),i=r(5),s=r(24);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var l,c,d=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var a=Array(t),o=0;for(e=0;e<r;e++)for(var n=arguments[e],i=0,s=n.length;i<s;i++,o++)a[o]=n[i];return a};function u(t){var e={};return t.map((function(t){return e[t.district]={districtSeats:t.seats,levelingSeats:0,name:t.district,percentVotes:0,totalSeats:t.seats,votes:0,votesPerSeat:0}})),e}function p(t,e,r,a){t.votes.forEach((function(t){e[t.district].votes+=t.votes,t.party in r?(r[t.party]={},a[t.party]={districtSeats:0,levelingSeats:0,partyCode:t.party,partyName:t.party,percentVotes:0,proportionality:0,totalSeats:0,votes:t.votes}):a[t.party].votes+=t.votes,r[t.party][t.district]={district:t.district,districtSeats:0,levelingSeats:0,partyCode:t.party,partyName:t.party,percentVotes:0,proportionality:0,totalSeats:0,votes:t.votes}}))}function f(t,e,r,a){for(var o in r)if(r.hasOwnProperty(o))for(var n in a[o].percentVotes=a[o].votes/t*100,r[o])r[o].hasOwnProperty(n)&&(r[o][n].percentVotes=r[o][n].votes/e[n].votes*100,0===e[n].percentVotes&&(e[n].percentVotes=e[n].votes/t*100))}function b(t,e,r,a){var o={};function i(t){return Object(n.c)(t,1)}if(-1===t){var s={};return a.forEach((function(t){return s[t.district]=t.seats})),s}var l={};a.forEach((function(e){l[e.district]=0,o[e.district]=e.population+e.area*t}));var c=h(Object(n.a)(r+a.length,l,o,i));return g(c)?Object(n.a)(r,l,o,i):c}function h(t){var e=Object(o.a)(t);for(var r in e)e.hasOwnProperty(r)&&e[r]--;return e}function v(t,e,r,a,o){for(var n=[],l=[],c={},d={},u=1,p=1;u<=t.levelingSeats;){0===l.length&&(n=[],l=Object(i.e)(s.a.SAINTE_LAGUE,e,r,o,a,!0));var f=l[0];f.quotientNumber=p++;var b=d[f.partyCode];void 0===b&&(b=0,d[f.partyCode]=0),b<r[f.partyCode].levelingSeats&&!n.includes(f.district)&&(f.seatNumber=u++,d[f.partyCode]++,o[f.district].levelingSeats++,a[f.district][f.partyCode].levelingSeats++,a[f.district][f.partyCode].totalSeats++,n.push(f.district)),void 0===c[f.partyCode]?c[f.partyCode]={partyCode:f.partyCode,levelingSeats:[f]}:c[f.partyCode].levelingSeats.push(f),l.shift()}return c}function y(t,e,r,a,o){for(var n=[],l={},c={},d=1,u=1;d<=t.levelingSeats;){0===n.length&&(n=Object(i.e)(s.a.SAINTE_LAGUE,e,r,o,a,!1));var p=n[0];p.quotientNumber=u++;var f=c[p.partyCode];void 0===f&&(f=0,c[p.partyCode]=0),f<r[p.partyCode].levelingSeats&&(p.seatNumber=d++,c[p.partyCode]++,o[p.district].levelingSeats++,a[p.district][p.partyCode].levelingSeats++,a[p.district][p.partyCode].totalSeats++),void 0===l[p.partyCode]?l[p.partyCode]={partyCode:p.partyCode,levelingSeats:[p]}:l[p.partyCode].levelingSeats.push(p),n.shift()}return l}function g(t){for(var e in t)if(t.hasOwnProperty(e)&&t[e]<0)return!0;return!1}function m(t,e){var r=d(t),a=t.map((function(t){return e[t.key]})),o=Math.max.apply(Math,a);return r.filter((function(t){return e[t.key]===o})),r[Math.floor(Math.random()*r.length)]}(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"__spreadArrays","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\utils.ts"),l.register(u,"buildDistrictResults","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\utils.ts"),l.register(p,"sumAllVotes","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\utils.ts"),l.register(f,"calculatePercentages","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\utils.ts"),l.register(b,"distributeDistrictSeatsOnDistricts","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\utils.ts"),l.register(h,"subtractLevelingSeats","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\utils.ts"),l.register(v,"distributeLevelingSeatsOnDistricts","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\utils.ts"),l.register(y,"distributeLevelingSeatsOnDistrictsPre2005","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\utils.ts"),l.register(g,"anyNegativeSeats","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\utils.ts"),l.register(m,"breakTies","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\utils.ts")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return o})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var o,n,i;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;!function(t){t.SAINTE_LAGUE="SAINTE_LAGUE",t.D_HONDT="D_HONDT",t.LARGEST_FRACTION_HARE="LARGEST_FRACTION_HARE",t.LARGEST_FRACTION_DROOP="LARGEST_FRACTION_DROOP",t.LARGEST_FRACTION_HAGENBACH_BISCHOFF="LARGEST_FRACTION_HAGENBACH_BISCHOFF",t.UNDEFINED="UNDEFINED"}(o||(o={})),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&n.register(o,"AlgorithmType","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\computation-models.ts"),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&i(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";r.d(e,"b",(function(){return a.f})),r.d(e,"d",(function(){return a.g})),r.d(e,"c",(function(){return o.a})),r.d(e,"a",(function(){return n.a}));var a=r(7),o=(r(76),r(77)),n=(r(42),r(49),r(78),"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature,"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature,r(47));r(48),"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature,"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return s})),r.d(e,"b",(function(){return u})),r.d(e,"e",(function(){return p})),r.d(e,"d",(function(){return f})),r.d(e,"c",(function(){return b})),r.d(e,"f",(function(){return h}));var a,o=r(32),n=r(5),i=r(30);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l,c,d=function(){return(d=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function u(t,e,r,a,l){var c=e.filter((function(e){return e.electionYear===t})),u=r.filter((function(e){return e.electionYear===t})),p=a.find((function(e){return e.electionYear===t}))||i.b,f={algorithm:p.algorithm.algorithm,firstDivisor:p.algorithm.parameters[o.a],electionThreshold:p.threshold,districtThreshold:0,districtSeats:p.districtSeats,levelingSeats:p.levelingSeats,areaFactor:p.areaFactor,votes:c,metrics:u,parameters:p,partyMap:l},b=Object(n.j)(f);return d(d({type:s.INITIALIZE_COMPUTATION},f),{results:b})}function p(t){var e=Object(n.j)(t);return d(d({},t),{type:s.UPDATE_COMPUTATION,results:e})}function f(){return{type:s.SAVE_COMPUTATION}}function b(){return{type:s.RESET_SAVED_COMPUTATION}}function h(t,e,r,a){var i={algorithm:r.algorithm.algorithm,districtSeats:r.districtSeats,levelingSeats:r.levelingSeats,electionThreshold:r.threshold,districtThreshold:0,firstDivisor:r.algorithm.parameters[o.a],areaFactor:r.areaFactor,votes:t,metrics:e,parameters:r,partyMap:a};return{type:s.UPDATE_HISTORICAL,historical:Object(n.j)(i)}}!function(t){t.INITIALIZE_COMPUTATION="INITIALIZE_COMPUTATION",t.UPDATE_COMPUTATION="UPDATE_CALCULATION",t.SAVE_COMPUTATION="SAVE_COMPUTATION",t.RESET_SAVED_COMPUTATION="RESET_SAVED_COMPUTATION",t.UPDATE_HISTORICAL="UPDATE_HISTORICAL"}(s||(s={})),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\computation-actions.ts"),l.register(s,"ComputationActionType","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\computation-actions.ts"),l.register(u,"initializeComputation","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\computation-actions.ts"),l.register(p,"updateComputation","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\computation-actions.ts"),l.register(f,"saveComparison","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\computation-actions.ts"),l.register(b,"resetSavedComputation","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\computation-actions.ts"),l.register(h,"updateHistorical","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\computation-actions.ts")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return n})),r.d(e,"b",(function(){return l})),r.d(e,"f",(function(){return c})),r.d(e,"d",(function(){return d})),r.d(e,"c",(function(){return u})),r.d(e,"e",(function(){return p}));var a,o=r(32);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var n,i,s;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function l(t,e){return{type:n.INITIALIZE_COMPUTATION_MENU,electionYears:t,year:e.electionYear.toString(),algorithm:e.algorithm.algorithm,firstDivisor:e.algorithm.parameters[o.a].toString(),electionThreshold:e.threshold.toString(),districtThreshold:"0",districtSeats:e.districtSeats.toString(),levelingSeats:e.levelingSeats.toString(),areaFactor:e.areaFactor.toString(),autoCompute:!0}}function c(t){return{type:n.UPDATE_COMPUTATION_MENU,year:t.year,algorithm:t.algorithm,firstDivisor:t.firstDivisor,electionThreshold:t.electionThreshold,districtThreshold:t.districtThreshold,districtSeats:t.districtSeats,levelingSeats:t.levelingSeats,areaFactor:t.areaFactor}}function d(){return{type:n.SAVE_SETTINGS}}function u(){return{type:n.RESET_SAVED_SETTINGS}}function p(t){return{type:n.TOGGLE_AUTO_COMPUTE,autoCompute:t}}!function(t){t.INITIALIZE_COMPUTATION_MENU="INITIALIZE_COMPUTATION_MENU",t.UPDATE_COMPUTATION_MENU="UPDATE_COMPUTATION_MENU",t.TOGGLE_AUTO_COMPUTE="TOGGLE_AUTO_COMPUTE",t.SAVE_SETTINGS="SAVE_SETTINGS",t.RESET_SAVED_SETTINGS="RESET_SAVED_SETTINGS"}(n||(n={})),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(n,"ComputationMenuActionType","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\computation-menu-actions.ts"),i.register(l,"initializeComputationMenu","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\computation-menu-actions.ts"),i.register(c,"updateComputationMenu","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\computation-menu-actions.ts"),i.register(d,"saveSettings","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\computation-menu-actions.ts"),i.register(u,"resetSavedSettings","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\computation-menu-actions.ts"),i.register(p,"toggleAutoCompute","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\computation-menu-actions.ts")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return o})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var o,n,i;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;!function(t){t.DANGER="DANGER",t.INFO="INFO",t.PRIMARY="PRIMARY",t.SUCCESS="SUCCESS",t.WARNING="WARNING"}(o||(o={})),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&n.register(o,"NotificationType","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Notifications\\notification-models.ts"),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&i(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";r.d(e,"a",(function(){return a.a})),r.d(e,"b",(function(){return o.a})),r.d(e,"c",(function(){return n.a})),r.d(e,"d",(function(){return i.a})),r.d(e,"e",(function(){return s.a})),r.d(e,"f",(function(){return l.a}));r(51);var a=r(80),o=r(81),n=("undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature,r(83)),i=("undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature,r(84)),s=("undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature,r(52),"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature,r(85)),l=("undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature,r(86));"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature,"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature},function(t,e,r){"use strict";(function(t){r.d(e,"b",(function(){return s})),r.d(e,"c",(function(){return l})),r.d(e,"a",(function(){return c}));var a,o=r(24);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s={algorithm:{algorithm:o.a.UNDEFINED,parameters:{}},areaFactor:-1,districtSeats:-1,electionType:"UNDEFINED",electionYear:-1,levelingSeats:-1,threshold:-1,totalVotes:-1},l={algorithm:o.a.UNDEFINED,firstDivisor:-1,electionThreshold:-1,districtThreshold:-1,districtSeats:-1,levelingSeats:-1,areaFactor:-1,historical:{districtResults:[],partyResults:[],levelingSeatDistribution:[],finalQuotients:[]},current:{districtResults:[],partyResults:[],levelingSeatDistribution:[],finalQuotients:[]},comparison:{districtResults:[],partyResults:[],levelingSeatDistribution:[],finalQuotients:[]},votes:[],metrics:[],parameters:s},c={firstDivisor:1.4};(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(n.register(s,"unloadedParameters","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\computation-state.ts"),n.register(l,"unloadedState","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\computation-state.ts"),n.register(c,"computationDefaults","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\computation-state.ts")),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&i(t)}).call(this,r(2)(t))},,function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return i})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var o,n,i="First Divisor";(o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&o.register(i,"FirstDivisor","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\requested-data\\requested-data-models.ts"),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&n(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";var a=r(21);r.d(e,"a",(function(){return a.b})),r.d(e,"b",(function(){return a.c})),r.d(e,"c",(function(){return a.d})),r.d(e,"d",(function(){return a.e}));var o=r(67);r.d(e,"e",(function(){return o.a}));r(40),"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature},function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return i})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var o,n;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function i(t){return t>=2005}(o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&o.register(i,"shouldDistributeDistrictSeats","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\conditionals.ts"),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&n(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){var a;r.d(e,"c",(function(){return s})),r.d(e,"b",(function(){return l})),r.d(e,"a",(function(){return c})),r.d(e,"d",(function(){return d})),r.d(e,"e",(function(){return u})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var o,n,i=function(){return(i=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function s(t){var e=new Map,r=t.districtSeatResult[t.districtSeatResult.length-1],a=r.partyResults.find((function(t){return t.partyCode===r.winner}));return r.partyResults.forEach((function(t){var r=Math.floor(a.quotient*t.denominator)-t.votes+1;e.set(t.partyCode,r)})),e}function l(t){var e=new Map;return t.districtSeatResult[t.districtSeatResult.length-1].partyResults.forEach((function(t){return e.set(t.partyCode,t.quotient)})),e}function c(t){var e=[];return t.forEach((function(t){t.districtSeats>0&&e.push(i(i({},d(t)),{district:t.name}))})),e.sort((function(t,e){return t.moreVotesToWin>=e.moreVotesToWin?1:-1}))[0]}function d(t){var e=t.districtSeatResult[t.districtSeatResult.length-1],r=e.partyResults.find((function(t){return t.partyCode===e.winner})),a=e.partyResults.sort((function(t,e){return t.quotient<=e.quotient?1:-1}))[1];return{winner:r,runnerUp:a,moreVotesToWin:Math.floor(r.quotient*a.denominator)-a.votes+1,district:t.name}}function u(t){var e=t.districtSeatResult[t.districtSeatResult.length-1],r=e.partyResults.find((function(t){return t.partyCode===e.winner})),a=[];e.partyResults.forEach((function(t){var e=Math.floor(r.quotient*t.denominator-t.votes+1);a.push({partyCode:t.partyCode,moreVotesToWin:e})}));var o=a.slice().sort((function(t,e){return t.moreVotesToWin>=e.moreVotesToWin?1:-1}));return{winner:r,partyCode:o[1].partyCode,moreVotesToWin:o[1].moreVotesToWin}}(o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(o.register(i,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\district.ts"),o.register(s,"getVotesToVulnerableSeatMap","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\district.ts"),o.register(l,"getQuotientsToVulnerableSeatMap","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\district.ts"),o.register(c,"getMostVulnerableSeatByQuotient","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\district.ts"),o.register(d,"getVulnerableSeatByQuotient","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\district.ts"),o.register(u,"getVulnerableSeatByVotes","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\district.ts")),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&n(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";var a=r(82);r.d(e,"a",(function(){return a.a}));"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature},function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return i})),r.d(e,"c",(function(){return s})),r.d(e,"b",(function(){return l})),r.d(e,"d",(function(){return c})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var o,n,i=function(){try{var t=localStorage.getItem("state");if(null===t)return;return console.log("State loaded from local storage"),JSON.parse(t)}catch(t){return}},s=function(t){try{var e=JSON.stringify(t);localStorage.setItem("state",e),console.log("State saved to local storage")}catch(t){console.error(t)}};function l(){try{var t=localStorage.getItem("version");if(null==t)return;return JSON.parse(t)}catch(t){return}}function c(t){try{var e=JSON.stringify(t);localStorage.setItem("version",e)}catch(t){console.error(t)}}(o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(o.register(i,"loadState","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\store\\local-storage.ts"),o.register(s,"saveState","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\store\\local-storage.ts"),o.register(l,"loadVersion","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\store\\local-storage.ts"),o.register(c,"saveVersion","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\store\\local-storage.ts")),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&n(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return d})),r.d(e,"c",(function(){return u})),r.d(e,"b",(function(){return f}));var a,o=r(19),n=r(92),i=r(54),s=r(23);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var l,c;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function d(t,e,r,a){var i=Object(o.a)(e),s=new n.a(a);s.populateQuotients(i,r);for(var l=0;l<t;l++){var c=s.getWinner(r);i[c.key]++,s.insertParty(c.key,r[c.key],i[c.key])}return i}function u(t,e){return 0===t?e:2*t+1}function p(t){return t+1}function f(t,e,r){for(var a=b(e,r),o=a.ratedParties,n=a.seatsWon,i=t-a.seatsDistributed,l=0;l<i;l++){var c=Object(s.a)(o.popTop(),e),d=n[c.key]?n[c.key]+1:1;n[c.key]=d}return{seatResults:[],seatsWon:n}}function b(t,e){var r=new i.a,a={},o=0;for(var n in t)if(t.hasOwnProperty(n)){var s=t[n]/e,l=Math.floor(s),c=s-l;a[n]=l,o+=l,r.insert({key:n,value:c})}return{ratedParties:r,seatsWon:a,seatsDistributed:o}}(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"distributionByQuotient","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\distribution.ts"),l.register(u,"sainteLagues","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\distribution.ts"),l.register(p,"dHondt","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\distribution.ts"),l.register(f,"largestFraction","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\distribution.ts"),l.register(b,"distributeWholeSeats","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\distribution.ts")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return u})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var o,n,i=function(t,e,r,a){return new(r||(r=Promise))((function(o,n){function i(t){try{l(a.next(t))}catch(t){n(t)}}function s(t){try{l(a.throw(t))}catch(t){n(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(i,s)}l((a=a.apply(t,e||[])).next())}))},s=function(t,e){var r,a,o,n,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,a&&(o=2&n[0]?a.return:n[0]?a.throw||((o=a.return)&&o.call(a),0):a.next)&&!(o=o.call(a,n[1])).done)return o;switch(a=0,o&&(n=[2&n[0],o.value]),n[0]){case 0:case 1:o=n;break;case 4:return i.label++,{value:n[1],done:!1};case 5:i.label++,a=n[1],n=[0];continue;case 7:n=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==n[0]&&2!==n[0])){i=0;continue}if(3===n[0]&&(!o||n[1]>o[0]&&n[1]<o[3])){i.label=n[1];break}if(6===n[0]&&i.label<o[1]){i.label=o[1],o=n;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(n);break}o[2]&&i.ops.pop(),i.trys.pop();continue}n=e.call(t,i)}catch(t){n=[6,t],a=0}finally{r=o=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}};function l(t){return t>=200&&t<300}function c(t,e){var r=t.headers.get("retry-after");if(null===r)return e;var a=Number(r);if(Number.isFinite(a))return Math.max(0,1e3*a);var o=Date.parse(r);if(Number.isNaN(o))return e;var n=o-Date.now();return Math.max(0,n)}function d(t,e){return i(this,void 0,void 0,(function(){var r,a;return s(this,(function(o){switch(o.label){case 0:return[4,fetch(t).catch((function(t){return t.message}))];case 1:if("string"!=typeof(r=o.sent())&&l(r.status))return[2,r.json()];if(e>5)throw"string"!=typeof r?new Error(r.statusText):new Error(r);return"string"==typeof r||429!==r.status?[3,3]:(a=c(r,1e4),[4,new Promise((function(t){return setTimeout(t,a)}))]);case 2:return o.sent(),[3,5];case 3:return[4,new Promise((function(t){return setTimeout(t,4e3*e)}))];case 4:o.sent(),o.label=5;case 5:return[2,d(t,++e)]}}))}))}function u(t){return i(this,void 0,void 0,(function(){return s(this,(function(e){return[2,d(t,1)]}))}))}(o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(o.register(i,"__awaiter","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\api-requests.ts"),o.register(s,"__generator","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\api-requests.ts"),o.register(4e3,"iterativeDelay","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\api-requests.ts"),o.register(5,"maxNumberOfAttempts","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\api-requests.ts"),o.register(l,"isSuccessful","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\api-requests.ts"),o.register(c,"parseRetryHeaderToMs","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\api-requests.ts"),o.register(d,"attemptRequest","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\api-requests.ts"),o.register(u,"request","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\api-requests.ts")),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&n(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return i})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var o,n,i={dataLoaded:!1,enableAutoSave:!1,votes:[],metrics:[],parameters:[],partyMap:{}};(o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&o.register(i,"unloadedState","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\requested-data\\requested-data-state.ts"),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&n(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return s}));var a,o=r(3);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s={electionYears:[],year:"",algorithm:o.a.UNDEFINED,firstDivisor:"",electionThreshold:"",districtThreshold:"",districtSeats:"",levelingSeats:"",autoCompute:!0,areaFactor:"",comparison:{algorithm:o.a.UNDEFINED,areaFactor:"",districtSeats:"",electionThreshold:"",districtThreshold:"",firstDivisor:"",levelingSeats:""}};(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&n.register(s,"unloadedState","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\computation-menu-state.ts"),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&i(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return s}));var a,o=r(4);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s={showComparison:!1,showFilters:!1,mergeDistricts:!1,use2021Distribution:!1,currentPresentation:o.b.ElectionTable,decimals:"2",decimalsNumber:2,showPartiesWithoutSeats:!0,districtSelected:"Østfold",disproportionalityIndex:o.a.LOOSEMORE_HANBY};(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&n.register(s,"unloadedState","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-state.ts"),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&i(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";var a=r(87);r.d(e,"a",(function(){return a.a}));var o=r(28);r.d(e,"b",(function(){return o.a}));"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature},,function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return O}));var a,o=r(0),n=r(10),i=r(32),s=r(3),l=r(93),c=r(94),d=r(95),u=r(96),p=r(97),f=r(100),b=r(22),h=r(34),v=r(5);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var y,g,m,S=(y=function(t,e){return(y=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}y(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),L=function(){return(L=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},E="https://project-lavinia.github.io/",O=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.onYearChange=function(t){var r=parseInt(t.target.value),a=e.props.votes.filter((function(t){return t.electionYear===r})),o=e.props.use2021Distribution&&r>=2005?2021:r,n=e.props.metrics.filter((function(t){return t.electionYear===o})),i=e.props.parameters.find((function(t){return t.electionYear===r}))||s.g;i&&(Object(h.a)(r)&&e.props.mergeDistricts&&(a=Object(b.c)(a,b.a),n=Object(b.b)(n,b.a)),e.props.resetHistorical(a,n,i,e.props.computationPayload.partyMap),e.props.updateCalculation(L(L({},e.props.computationPayload),{metrics:n,votes:a,parameters:i}),e.props.settingsPayload.autoCompute,!1),e.props.resetComparison(),e.props.resetToHistoricalSettings(L(L({},e.props.settingsPayload),{year:t.target.value}),a,n,i,e.props.computationPayload.partyMap))},e.onAlgorithmChange=function(t){var r=t.target.value;e.props.updateCalculation(L(L({},e.props.computationPayload),{algorithm:r}),e.props.settingsPayload.autoCompute,!1),e.props.updateSettings(L(L({},e.props.settingsPayload),{algorithm:r}))},e.onFirstDivisorChange=function(t,r){e.props.updateSettings(L(L({},e.props.settingsPayload),{firstDivisor:t})),e.props.updateCalculation(L(L({},e.props.computationPayload),{firstDivisor:r}),e.props.settingsPayload.autoCompute,!1)},e.onThresholdChange=function(t,r){e.props.updateSettings(L(L({},e.props.settingsPayload),{electionThreshold:t})),e.props.updateCalculation(L(L({},e.props.computationPayload),{electionThreshold:r}),e.props.settingsPayload.autoCompute,!1)},e.onDistrictThresholdChange=function(t,r){e.props.updateSettings(L(L({},e.props.settingsPayload),{districtThreshold:t})),e.props.updateCalculation(L(L({},e.props.computationPayload),{districtThreshold:r}),e.props.settingsPayload.autoCompute,!1)},e.onDistrictSeatsChange=function(t,r){e.props.updateSettings(L(L({},e.props.settingsPayload),{districtSeats:t})),e.props.updateCalculation(L(L({},e.props.computationPayload),{districtSeats:r}),e.props.settingsPayload.autoCompute,!1)},e.onLevelingSeatsChange=function(t,r){e.props.updateSettings(L(L({},e.props.settingsPayload),{levelingSeats:t})),e.props.updateCalculation(L(L({},e.props.computationPayload),{levelingSeats:r}),e.props.settingsPayload.autoCompute,!1)},e.onAreaFactorChange=function(t,r){e.props.updateSettings(L(L({},e.props.settingsPayload),{areaFactor:t})),e.props.updateCalculation(L(L({},e.props.computationPayload),{areaFactor:r}),e.props.settingsPayload.autoCompute,!1)},e.toggleAutoCompute=function(t){e.props.toggleAutoCompute(t.target.checked),e.computeManually()},e.computeManually=function(){var t=parseInt(e.props.settingsPayload.year),r=e.props.votes.filter((function(e){return e.electionYear===t})),a=e.props.use2021Distribution&&t>=2005?2021:t,o=e.props.metrics.filter((function(t){return t.electionYear===a})),n=e.props.parameters.find((function(e){return e.electionYear===t}))||s.g;n&&e.props.updateCalculation({algorithm:e.props.settingsPayload.algorithm,firstDivisor:parseFloat(e.props.settingsPayload.firstDivisor),electionThreshold:parseFloat(e.props.settingsPayload.electionThreshold),districtThreshold:parseFloat(e.props.settingsPayload.districtThreshold),districtSeats:parseInt(e.props.settingsPayload.districtSeats),levelingSeats:parseInt(e.props.settingsPayload.levelingSeats),areaFactor:parseFloat(e.props.settingsPayload.areaFactor),votes:r,metrics:o,parameters:n,partyMap:e.props.computationPayload.partyMap},e.props.settingsPayload.autoCompute,!0)},e.restoreToDefault=function(){var t=e.props.computationPayload;e.props.resetToHistoricalSettings(e.props.settingsPayload,t.votes,t.metrics,t.parameters,t.partyMap)},e.settingsChanged=function(){var t=e.props.settingsPayload,r=t.comparison;return t.algorithm!==r.algorithm||r.firstDivisor!==t.firstDivisor||t.electionThreshold!==r.electionThreshold||r.districtThreshold!==t.districtThreshold||t.levelingSeats!==r.levelingSeats||t.districtSeats!==r.districtSeats||r.areaFactor!==t.areaFactor},e}return S(e,t),e.prototype.shouldHideFirstDivisor=function(){return this.props.computationPayload.algorithm===s.a.D_HONDT||Object(v.h)(this.props.computationPayload.algorithm)},e.prototype.render=function(){var t=parseInt(this.props.settingsPayload.year);return o.createElement("div",null,o.createElement("h1",{className:"is-size-6-mobile is-size-4-tablet is-size-2-desktop is-size-1-widescreen"},"Stortingsvalg"),o.createElement("form",null,o.createElement(d.a,{autoCompute:this.props.settingsPayload.autoCompute,computeManually:this.computeManually,toggleAutoCompute:this.toggleAutoCompute}),o.createElement(l.a,{electionYears:this.props.settingsPayload.electionYears,onYearChange:this.onYearChange,year:this.props.settingsPayload.year,tooltip:o.createElement(n.f,{text:"Her kan du velge året stortingsvalget ble holdt.",url:E+"#Valgt%20%C3%A5r"})}),o.createElement(c.a,{algorithm:this.props.settingsPayload.algorithm,defaultAlgorithm:this.props.settingsPayload.comparison.algorithm,onAlgorithmChange:this.onAlgorithmChange,tooltip:o.createElement(n.e,{text:"Her kan du velge beregningsmetode for fordeling av mandater.",url:E+"#Valgt%20metode"})}),o.createElement(n.c,{hidden:this.shouldHideFirstDivisor(),name:"firstDivisor",title:"Første delingstall",value:this.props.settingsPayload.firstDivisor,onChange:this.onFirstDivisorChange,min:1,max:5,defaultValue:this.props.computationPayload.parameters.algorithm.parameters[i.a]||0,originalValue:this.props.settingsPayload.comparison.firstDivisor,integer:!1,tooltip:o.createElement(n.e,{text:"Her kan du forandre det første delingstallet i Sainte-Laguës metode.",url:E+"#F%C3%B8rste%20delingstall"})}),o.createElement(n.d,{name:"electionThreshold",title:"Sperregrense for utjevningsmandater",value:this.props.settingsPayload.electionThreshold,onChange:this.onThresholdChange,min:0,max:15,defaultValue:this.props.computationPayload.parameters.threshold,originalValue:this.props.settingsPayload.comparison.electionThreshold,integer:!1,label:"%",tooltip:o.createElement(n.e,{text:"Her kan du forandre sperregrensen for å få tildelt utjevningsmandat.",url:E+"/#Sperregrense%20for%20utjevningsmandat"})}),o.createElement(n.d,{name:"districtThreshold",title:"Sperregrense for distriktmandater",value:this.props.settingsPayload.districtThreshold,onChange:this.onDistrictThresholdChange,min:0,max:15,defaultValue:0,originalValue:this.props.settingsPayload.comparison.districtThreshold,integer:!1,label:"%",isHiddenTouch:!0,tooltip:o.createElement(n.e,{text:"Her kan du sette inn en sperregrense også for distriktsmandatene.",url:E+"#Sperregrense%20for%20distriktmandat"})}),o.createElement(n.c,{name:"levelingSeats",title:"Utjevningsmandater",value:this.props.settingsPayload.levelingSeats,onChange:this.onLevelingSeatsChange,min:0,max:100,defaultValue:this.props.computationPayload.parameters.levelingSeats,originalValue:this.props.settingsPayload.comparison.levelingSeats,integer:!0,tooltip:o.createElement(n.e,{text:"Her kan du endre antall utjevningsmandater.",url:E+"#Utjevningsmandater"})}),o.createElement(n.c,{name:"districtSeats",title:"Distriktsmandater",value:this.props.settingsPayload.districtSeats,onChange:this.onDistrictSeatsChange,min:0,max:500,defaultValue:this.props.computationPayload.parameters.districtSeats,originalValue:this.props.settingsPayload.comparison.districtSeats,integer:!0,hidden:!Object(h.a)(t),tooltip:o.createElement(n.e,{text:"Her kan du endre antall distriktsmandater.",url:E+"#Distriktsmandater"})}),o.createElement(n.c,{name:"areaFactor",title:"Arealfaktor",value:this.props.settingsPayload.areaFactor,onChange:this.onAreaFactorChange,min:0,max:3,defaultValue:this.props.computationPayload.parameters.areaFactor,originalValue:this.props.settingsPayload.comparison.areaFactor,integer:!1,hidden:!Object(h.a)(t),tooltip:o.createElement(n.e,{text:"Her kan du endre balansen mellom folketall og fylkets areal.",url:E+"#Arealfaktor"})}),o.createElement(f.a,{autoCompute:this.props.settingsPayload.autoCompute,computeManually:this.computeManually}),o.createElement(u.a,{restoreToDefault:this.restoreToDefault,highlight:this.settingsChanged()}),o.createElement(p.a,{showComparison:this.props.showComparison,resetComparison:this.props.resetComparison,saveComparison:this.props.saveComparison})))},e}(o.Component);(g="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(g.register(S,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ComputationMenu.tsx"),g.register(L,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ComputationMenu.tsx"),g.register(E,"WIKIURL","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ComputationMenu.tsx"),g.register(O,"ComputationMenu","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ComputationMenu.tsx")),(m="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&m(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";var a=r(70);r.d(e,"a",(function(){return a.a}));"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return p}));var a,o=r(11),n=r(48),i=r(7),s=r(3);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function l(t){return{currentPresentation:t.presentationMenuState.currentPresentation,decimals:t.presentationMenuState.decimals,results:t.computationState.current,showPartiesWithoutSeats:t.presentationMenuState.showPartiesWithoutSeats,districtSelected:t.presentationMenuState.districtSelected,disproportionalityIndex:t.presentationMenuState.disproportionalityIndex,showComparison:t.presentationMenuState.showComparison,showFilters:t.presentationMenuState.showFilters,year:t.computationState.parameters.electionYear,mergeDistricts:t.presentationMenuState.mergeDistricts,use2021Distribution:t.presentationMenuState.use2021Distribution,votes:t.requestedDataState.votes,metrics:t.requestedDataState.metrics,parameters:t.computationState.parameters,computationPayload:{algorithm:t.computationState.algorithm,firstDivisor:t.computationState.firstDivisor,electionThreshold:t.computationState.electionThreshold,districtThreshold:t.computationState.districtThreshold,districtSeats:t.computationState.districtSeats,levelingSeats:t.computationState.levelingSeats,areaFactor:t.computationState.areaFactor,votes:t.computationState.votes,metrics:t.computationState.metrics,parameters:t.computationState.parameters,partyMap:t.requestedDataState.partyMap},settingsPayload:{electionYears:t.settingsState.electionYears,year:t.settingsState.year,algorithm:t.settingsState.algorithm,firstDivisor:t.settingsState.firstDivisor,electionThreshold:t.settingsState.electionThreshold,districtThreshold:t.settingsState.districtThreshold,districtSeats:t.settingsState.districtSeats,levelingSeats:t.settingsState.levelingSeats,autoCompute:t.settingsState.autoCompute,forceCompute:!1,areaFactor:t.settingsState.areaFactor,comparison:t.settingsState.comparison}}}var c,d,u=function(t){return{changeDecimals:function(e,r){var a=Object(i.b)(e,r);t(a)},toggleShowPartiesWithoutSeats:function(e){var r=Object(i.e)(e.target.checked);t(r)},selectDistrict:function(e){var r=Object(i.g)(e.target.value);t(r)},changeDisproportionalityIndex:function(e){var r=Object(i.c)(e.target.value);t(r)},toggleShowComparison:function(e){var r=Object(i.i)(e.target.checked);t(r)},toggleShowFilters:function(e){var r=Object(i.j)(e.target.checked);t(r)},toggleMergeDistricts:function(e){var r=Object(i.h)(e);t(r)},toggleUse2021Distribution:function(e){var r=Object(i.k)(e);t(r)},updateCalculation:function(e,r,a){if(r||a){var o={algorithm:e.algorithm,firstDivisor:e.firstDivisor,electionThreshold:e.electionThreshold,districtThreshold:e.districtThreshold,districtSeats:e.districtSeats,levelingSeats:e.levelingSeats,areaFactor:e.areaFactor,votes:e.votes,metrics:e.metrics,parameters:e.parameters,partyMap:e.partyMap},n=Object(s.h)(o);t(n)}}}},p=Object(o.b)(l,u)(n.a);(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(c.register(l,"mapStateToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\ConnectedPresentationSettings.tsx"),c.register(u,"mapDispatchToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\ConnectedPresentationSettings.tsx"),c.register(p,"ConnectedPresentationSettings","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\ConnectedPresentationSettings.tsx")),(d="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&d(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return S}));var a,o=r(0),n=r(10),i=r(4),s=r(102),l=r(103),c=r(104),d=r(105),u=r(106),p=r(22),f=r(107),b=r(34);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var h,v,y,g=(h=function(t,e){return(h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}h(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),m=function(){return(m=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},S=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.onToggleMergeDistricts=function(t){e.props.toggleMergeDistricts(t.target.checked);var r=e.props.year,a=e.props.votes.filter((function(t){return t.electionYear===r})),o=e.props.use2021Distribution&&r>=2005?2021:r,n=e.props.metrics.filter((function(t){return t.electionYear===o})),i=e.props.parameters;a.length>0&&(Object(b.a)(r)&&t.target.checked&&(a=Object(p.c)(a,p.a),n=Object(p.b)(n,p.a)),e.props.updateCalculation(m(m({},e.props.computationPayload),{metrics:n,votes:a,parameters:i}),e.props.settingsPayload.autoCompute,!1))},e.onToggleUse2021Distribution=function(t){e.props.toggleUse2021Distribution(t.target.checked);var r=e.props.year,a=e.props.votes.filter((function(t){return t.electionYear===r})),o=t.target.checked&&r>=2005?2021:r,n=e.props.metrics.filter((function(t){return t.electionYear===o})),i=e.props.parameters;a.length>0&&e.props.updateCalculation(m(m({},e.props.computationPayload),{metrics:n,votes:a,parameters:i}),e.props.settingsPayload.autoCompute,!1)},e}return g(e,t),e.prototype.needsDecimals=function(){return this.props.currentPresentation===i.b.DistrictTable||this.props.currentPresentation===i.b.ElectionTable||this.props.currentPresentation===i.b.SingleDistrict||this.props.currentPresentation===i.b.RemainderQuotients},e.prototype.showDisproportionalitySelect=function(){return this.props.currentPresentation===i.b.SingleDistrict||this.props.currentPresentation===i.b.ElectionTable},e.prototype.showDistrictSelect=function(){return this.props.currentPresentation===i.b.SingleDistrict},e.prototype.showComparison=function(){return this.props.currentPresentation===i.b.ElectionTable},e.prototype.showFilters=function(){return this.props.currentPresentation===i.b.ElectionTable},e.prototype.showNoSeatsCheckbox=function(){return this.props.currentPresentation!==i.b.DistrictTable&&this.props.currentPresentation!==i.b.LevellingSeats},e.prototype.showUse2021Distribution=function(){return this.props.year>=2005},e.prototype.render=function(){return o.createElement("div",{className:"columns"},o.createElement("div",{className:"columns"},o.createElement("div",{className:"column min-column-width"},o.createElement(l.a,{hidden:!this.showNoSeatsCheckbox(),showPartiesWithoutSeats:this.props.showPartiesWithoutSeats,toggleShowPartiesWithoutSeats:this.props.toggleShowPartiesWithoutSeats}),o.createElement(d.a,{hidden:!this.showFilters(),showFilters:this.props.showFilters,toggleShowFilters:this.props.toggleShowFilters}),o.createElement(c.a,{hidden:!this.showComparison(),showComparison:this.props.showComparison,toggleComparison:this.props.toggleShowComparison})),o.createElement("div",{className:"column"},o.createElement(u.a,{hidden:!Object(b.a)(this.props.year),mergeDistricts:this.props.mergeDistricts,toggleMergeDistricts:this.onToggleMergeDistricts}),o.createElement(f.a,{hidden:!this.showUse2021Distribution(),use2021Distribution:this.props.use2021Distribution,toggleUse2021Distribution:this.onToggleUse2021Distribution}))),o.createElement("div",{className:"column"},o.createElement("div",{className:"columns"},o.createElement("div",{className:"column"},o.createElement(n.c,{hidden:!this.needsDecimals(),name:"decimalPlaces",defaultValue:2,min:0,max:16,integer:!0,slider:!1,title:"Antall desimaler",value:this.props.decimals,onChange:this.props.changeDecimals})),o.createElement("div",{className:"column"},o.createElement(s.a,{hidden:!this.showDisproportionalitySelect(),changeDisproportionalityIndex:this.props.changeDisproportionalityIndex,disproportionalityIndex:this.props.disproportionalityIndex,tooltip:o.createElement(n.e,{text:"Her kan du velge mellom Loosemore-Hanbys (L-H) og Gallaghers (LSq).",url:"https://project-lavinia.github.io/#Disproporsjonalitetsindeks"})})))))},e}(o.Component);(v="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(v.register(g,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\PresentationSettings.tsx"),v.register(m,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\PresentationSettings.tsx"),v.register(S,"PresentationSettingsMenu","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\PresentationSettings.tsx")),(y="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&y(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return d}));var a,o=r(10),n=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var i,s,l,c=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=function(t){function e(e){return t.call(this,e)||this}return c(e,t),e.prototype.render=function(){return n.createElement("button",{title:this.props.accessibilityLabel,onClick:this.props.onPress,className:this.props.className},this.props.title)},e}(o.a);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSelection\\PresentationSelectionButton\\PresentationSelectionButton.tsx"),s.register(d,"PresentationSelectionButton","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSelection\\PresentationSelectionButton\\PresentationSelectionButton.tsx")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var a,o=r(18),n=r(60),i=r(14);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l,c=function(){return(c=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},d=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var a=Array(t),o=0;for(e=0;e<r;e++)for(var n=arguments[e],i=0,s=n.length;i<s;i++,o++)a[o]=n[i];return a};function u(t,e){switch(void 0===t&&(t=n.a),e.type){case i.a.TOGGLE_HAMBURGER_EXPANDED:return c(c({},t),{hamburgerExpanded:e.hamburgerExpanded});case i.a.HIDE_TUTORIAL:return c(c({},t),{showTutorial:!1});case i.a.ADD_NOTIFICATION:var r=t.notificationId+1,a={id:r,text:e.notification.text,type:e.notification.type},s=d(t.notifications);return s.push(a),c(c({},t),{notifications:s,notificationId:r});case i.a.REMOVE_NOTIFICATION:var l=t.notifications.filter((function(t){return t.id!==e.id}));return c(c({},t),{notifications:l});case o.a.CLEAR_STATE:return n.a;default:return c({},t)}}(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ui-reducer.ts"),s.register(d,"__spreadArrays","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ui-reducer.ts"),s.register(u,"ui","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ui-reducer.ts")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return y}));var a,o=r(0),n=r(29),i=r(20),s=r(52),l=r(8),c=r(4),d=r(111),u=r(12);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var p,f,b,h=(p=function(t,e){return(p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}p(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),v=function(){return(v=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return h(e,t),e.prototype.getPartyTableData=function(t){return Object(i.d)(t,this.props.showPartiesWithoutSeats,this.props.decimals)},e.prototype.getDistrictTableData=function(){return Object(i.b)(this.props.results.districtResults,this.props.decimals)},e.prototype.getSeatDistributionData=function(){return Object(i.f)(this.props.results.districtResults,this.props.results.partyResults,this.props.showPartiesWithoutSeats)},e.prototype.getLocalSeatDistribution=function(){return Object(i.c)(this.props.results.districtResults,this.props.showPartiesWithoutSeats)},e.prototype.getSeatsPerPartyData=function(){return Object(i.g)(this.props.results.partyResults,this.props.showPartiesWithoutSeats)},e.prototype.getSingleDistrictData=function(){var t=this,e=Object(i.b)(this.getLocalSeatDistribution(),this.props.decimals),r=[];return e.forEach((function(e){r.push(v(v({},e),{partyResults:Object(i.i)(e.partyResults,t.props.decimals)}))})),r},e.prototype.getPartyCodes=function(){var t=[];return this.props.results.partyResults.forEach((function(e){t.push(e.partyCode)})),t},e.prototype.getPartyNames=function(){var t=[];return this.props.results.partyResults.forEach((function(e){t.push(e.partyName)})),t},e.prototype.getDistricts=function(){var t=[];return this.props.results.districtResults.forEach((function(e){t.push(e.name)})),t},e.prototype.getWidestStringWidth=function(t){return void 0===t&&(t=[]),t.map((function(t){return t.length})).reduce(l.a,0)},e.prototype.getLevellingSeats=function(){var t=Object(i.a)(this.props.results.levelingSeatDistribution),e=Object(i.e)(t),r=Object(i.h)(e);return Object(i.j)(r)},e.prototype.render=function(){switch(this.props.currentPresentation){case c.b.ElectionTable:return this.props.showComparison?o.createElement(d.a,{comparisonPartyResults:this.getPartyTableData(this.props.comparisonPartyResults),currentPartyResults:this.getPartyTableData(this.props.results.partyResults)}):o.createElement(n.c,{partyResults:this.props.results.partyResults,comparisonPartyResults:this.props.comparisonPartyResults,decimals:this.props.decimals,showPartiesWithoutSeats:this.props.showPartiesWithoutSeats,partyNameWidth:this.getWidestStringWidth(this.getPartyNames()),disproportionalityIndex:this.props.disproportionalityIndex,threshold:this.props.threshold,showFilters:this.props.showFilters});case c.b.DistrictTable:return o.createElement(n.b,{districtResults:this.getDistrictTableData(),districtWidth:this.getWidestStringWidth(this.getDistricts()),decimals:this.props.decimals,algorithm:this.props.algorithm,partyMap:this.props.partyMap});case c.b.SeatDistribution:return o.createElement(n.e,{districtResults:this.getSeatDistributionData(),districtWidth:this.getWidestStringWidth(this.getDistricts())});case c.b.SingleDistrict:return o.createElement(n.f,{districtSelected:this.props.districtSelected,districtResults:this.getSingleDistrictData(),decimals:this.props.decimals,disproportionalityIndex:this.props.disproportionalityIndex,selectDistrict:this.props.selectDistrict,algorithm:this.props.algorithm,partyMap:this.props.partyMap});case c.b.RemainderQuotients:return o.createElement(s.a,{districtResults:this.getSeatDistributionData(),levellingSeats:this.getLevellingSeats(),finalQuotients:this.props.results.finalQuotients,year:this.props.year,decimals:this.props.decimals,showPartiesWithoutSeats:this.props.showPartiesWithoutSeats,algorithm:this.props.algorithm});case c.b.LevellingSeats:return o.createElement(n.d,{levellingSeatQuotients:this.props.results.levelingSeatDistribution});default:return void Object(u.a)(this.props.currentPresentation)}},e}(o.Component);(f="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(f.register(h,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\Presentation.tsx"),f.register(v,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\Presentation.tsx"),f.register(y,"Presentation","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\Presentation.tsx")),(b="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&b(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return f}));var a,o=r(0),n=r(15),i=r(9),s=r(5);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var l,c,d,u=(l=function(t,e){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}l(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),p=function(){return(p=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},f=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.makeData=function(){var t=new Set,e=this.props.districtResults,r=[];return this.props.showPartiesWithoutSeats?r=this.props.finalQuotients:(e.forEach((function(e){e.partyResults.filter((function(t){return t.totalSeats>0})).forEach((function(e){t.add(e.partyCode)}))})),this.props.finalQuotients.forEach((function(e){var a={district:e.district,levellingSeatRounds:e.levellingSeatRounds.filter((function(e){return t.has(e.partyCode)}))};r.push(a)}))),r},e.prototype.getColumns=function(){for(var t=this,e=this.makeData(),r=[],a=0;a<e[0].levellingSeatRounds.length;a++){var n=e[0].levellingSeatRounds[a];r.push({Header:n.partyCode,accessor:"levellingSeatRounds["+a+"]",minWidth:80,Cell:function(e){if(void 0!==e.value){var r=e.value.quotient;return t.props.year>=2005&&Object(s.i)(t.props.algorithm)?r*=1e4:Object(s.i)(t.props.algorithm)&&(r/=1e4),o.createElement("div",{className:e.value.wonLevellingSeat?"has-background-dark has-text-white":""},Number(r).toFixed(t.props.decimals))}return o.createElement("div",{style:{textAlign:"center"}},(0).toFixed(t.props.decimals))},sortable:!1})}return r.sort((function(t,e){return"string"==typeof t.Header&&"string"==typeof e.Header?t.Header.localeCompare(e.Header):0})),r.unshift({Header:"Fylker",accessor:"district"}),r},e.prototype.getAdjustment=function(t,e){var r="og representerer verdien ved utdeling av siste distriktsmandat i fylket for det respektive partiet.";return t>=2005&&Object(s.i)(e)?" er ganget med 10 000 "+r:Object(s.i)(e)?" er delt på 10 000 "+r:" er fordelingstallet som tilsier hvor mange distriktsmandater partiet skal vinne i det respektive fylket."},e.prototype.render=function(){var t=this.makeData();return o.createElement(o.Fragment,null,o.createElement("div",{className:"card has-background-primary has-text-light is-size-5"},o.createElement("p",{className:"card-content"},"Markerte celler indikerer at partiet har vunnet et utjevningsmandat i det korresponderende fylket. Kvotientene",this.getAdjustment(this.props.year,this.props.algorithm))),o.createElement(n.a,p({className:"has-text-centered",data:t,columns:this.getColumns(),defaultPageSize:10,showPageSizeOptions:!1},i.c)))},e}(o.Component);(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(c.register(u,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\RemainderQuotients\\RemainderQuotients.tsx"),c.register(p,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\RemainderQuotients\\RemainderQuotients.tsx"),c.register(f,"RemainderQuotients","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\RemainderQuotients\\RemainderQuotients.tsx")),(d="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&d(t)}).call(this,r(2)(t))},,function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return s})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var o,n,i=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var a=Array(t),o=0;for(e=0;e<r;e++)for(var n=arguments[e],i=0,s=n.length;i<s;i++,o++)a[o]=n[i];return a},s=function(){function t(){this.reverseDict=[]}return t.prototype.insert=function(t){this.reverseDict.push(t);for(var e=this.reverseDict.length-1,r=this.reverseDict[e];e>0&&r.value>this.reverseDict[e-1].value;)this.reverseDict[e]=this.reverseDict[e-1],e-=1;this.reverseDict[e]=r},t.prototype.popTop=function(){for(var t=this.reverseDict[0].value,e=0;e<this.reverseDict.length&&this.reverseDict[e].value===t;)e++;var r=this.reverseDict.slice(0,e);return this.reverseDict=this.reverseDict.slice(e,this.reverseDict.length),r},t.prototype.length=function(){return this.reverseDict.length},t.prototype.print=function(){console.log(i(this.reverseDict))},t}();(o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(o.register(i,"__spreadArrays","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\sorted-reverse-dict.ts"),o.register(s,"SortedReverseDict","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\sorted-reverse-dict.ts")),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&n(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return f}));var a,o=r(0),n=r(4),i=r(101),s=r(10);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var l,c,d,u=(l=function(t,e){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}l(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),p="https://project-lavinia.github.io/",f=function(t){function e(e){var r=t.call(this,e)||this;return r.getSelectionOptions=function(){return i.a.map((function(t){return o.createElement("option",{key:t.type,value:t.type},t.displayName)}))},r}return u(e,t),e.prototype.render=function(){return o.createElement("div",{className:"field"},o.createElement("label",{className:"label"},o.createElement(s.f,{text:"Trykk på dette ikonet for å lese om oversikten.",url:p.concat("#Visning")})),o.createElement("div",{className:"control"},o.createElement("div",{className:"select is-primary is-fullwidth is-medium"},o.createElement("select",{onChange:this.props.changeSelection,value:this.props.currentSelection,id:"presentation_select"},this.getSelectionOptions()))))},e.defaultProps={currentSelection:n.b.ElectionTable},e}(o.Component);(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(c.register(u,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSelection\\PresentationSelection.tsx"),c.register(p,"WIKIURL","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSelection\\PresentationSelection.tsx"),c.register(f,"PresentationSelection","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSelection\\PresentationSelection.tsx")),(d="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&d(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(31),n=(r(135),r(91)),i=r(37);r.d(e,"b",(function(){return i.a})),r.d(e,"c",(function(){return i.c})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var s,l;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function c(t,e){var r=Object(o.a)();return Object(o.d)(n.a,e,r)}(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&s.register(c,"configureStore","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\store\\index.ts"),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},,,function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return i})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var o,n;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function i(t,e,r){var a=new Map(t.entries());if(t.has(e)){var o=t.get(e);void 0!==o&&(o.push(r),a.set(e,o))}else a.set(e,[r]);return a}function s(t,e,r){for(var a=new Map(t.entries()),o=0,n=r.length;o<n;o++){var s=r[o];a=i(a,e(s),s)}return a}function l(t){var e=new Map;for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.set(r,t[r]);return e}(o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(o.register(i,"mapAdd","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\map.ts"),o.register(s,"mapAddFromArray","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\map.ts"),o.register(l,"createMapFromObject","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\utilities\\map.ts")),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&n(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){var a;r.d(e,"a",(function(){return i})),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var o,n,i={hamburgerExpanded:!1,showTutorial:!0,notifications:[],notificationId:0};(o="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&o.register(i,"defaultState","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ui-state.ts"),(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&n(t)}).call(this,r(2)(t))},,,function(t,e,r){"use strict";(function(t){var e;(e="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&e(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var r,a,o=function(t){return function(e){return function(r){console.log("dispatching",r);var a=e(r);return console.log("next state",t.getState()),a}}};(r="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&r.register(o,"logger","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\middleware\\logger.ts"),(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&a(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var a,o=r(19),n=r(5),i=r(23),s=r(16);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var l,c,d=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var a=Array(t),o=0;for(e=0;e<r;e++)for(var n=arguments[e],i=0,s=n.length;i<s;i++,o++)a[o]=n[i];return a};function u(t,e,r,a){var n=p(d(Object.keys(e)).filter((function(r){return e[r].percentVotes>=t.electionThreshold})),t,e),l=n.levelingPartyCodes,c=f(l,e,t,n.nationalDistribution);for(var u in c.seatsWon)if(c.seatsWon.hasOwnProperty(u)){var b=c.seatsWon[u];e[u].levelingSeats+=b,e[u].totalSeats+=b}var h=l.filter((function(t){return e[t].levelingSeats>0})),v={};return v=Object(s.n)(t.parameters.electionYear)?Object(i.c)(t,h,e,r,a):Object(i.d)(t,h,e,r,a),Object(o.b)(v)}function p(t,e,r){for(var a=0,o=e.levelingSeats,i={},s=0,l=t;s<l.length;s++){var c=l[s];a+=r[c].votes,o+=r[c].districtSeats;var d={districtSeats:-1,levelingSeats:-1,partyCode:c,partyName:"",percentVotes:-1,proportionality:-1,totalSeats:-1,votes:r[c].votes};i[c]=d}var u=Object(n.c)(e.algorithm,e.firstDivisor,Number.MIN_SAFE_INTEGER,o,a,i),f=t.filter((function(t){return u.seatsWon[t]>r[t].districtSeats}));return f.length!==t.length?p(f,e,r):{nationalDistribution:u,levelingPartyCodes:f}}function f(t,e,r,a){return Object(s.m)(r.algorithm)?b(t,e,r):Object(s.l)(r.algorithm)?h(t,e,a):(console.error(r.algorithm+" is not a known quotient or largest fraction algorithm!"),{seatResults:[],seatsWon:{}})}function b(t,e,r){for(var a=0,o={},i=0,s=t;i<s.length;i++){var l=s[i];a+=e[l].votes;var c={districtSeats:-1,levelingSeats:-1,partyCode:l,partyName:"",percentVotes:-1,proportionality:-1,totalSeats:-1,votes:e[l].votes};o[l]=c}return Object(n.c)(r.algorithm,r.firstDivisor,Number.MIN_SAFE_INTEGER,r.levelingSeats,a,o,void 0,e)}function h(t,e,r){var a={};return t.forEach((function(t){a[t]=r.seatsWon[t]-e[t].districtSeats})),{seatResults:[],seatsWon:a}}(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"__spreadArrays","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\distribute-levelling-seats.ts"),l.register(u,"distributeLevelingSeats","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\distribute-levelling-seats.ts"),l.register(p,"nationalDistributionFilter","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\distribute-levelling-seats.ts"),l.register(f,"finalLevelingSeatDistribution","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\distribute-levelling-seats.ts"),l.register(b,"finalQuotientLevelingSeatDistribution","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\distribute-levelling-seats.ts"),l.register(h,"finalLargestFractionLevelingSeatDistribution","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\distribute-levelling-seats.ts")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var a,o=r(19),n=r(5),i=r(23),s=r(16),l=r(8);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var c,d;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function u(t){for(var e=Object(i.b)(t.areaFactor,19,t.districtSeats,t.metrics),r=t.votes.map((function(t){return t.votes})).reduce(l.d,0),a=Object(s.k)(t.votes),c=Object(s.e)(t.votes,r,t.partyMap),d=Object(s.c)(t.votes,a,t.partyMap),u=Object(s.d)(e,a,r),p=0,f=t.metrics;p<f.length;p++){var b=f[p],h=Object(n.c)(t.algorithm,t.firstDivisor,t.districtThreshold,e[b.district],u[b.district].votes,d[b.district]);for(var v in u[b.district].districtSeatResult=h.seatResults,h.seatsWon)c[v].districtSeats+=h.seatsWon[v],c[v].totalSeats+=h.seatsWon[v],d[b.district][v].districtSeats+=h.seatsWon[v],d[b.district][v].totalSeats+=h.seatsWon[v]}var y=Object(n.b)(t,c,d,u),g=t.districtSeats+t.levelingSeats;for(var m in Object(n.a)(g,c,d,u),Object(n.d)(u),d)u[m].partyResults=Object(o.b)(d[m]);var S=Object(o.b)(u),L=Object(o.b)(c),E=Object(s.n)(t.parameters.electionYear)&&Object(s.m)(t.algorithm);return{partyResults:L,districtResults:S,levelingSeatDistribution:y,finalQuotients:Object(s.a)(t.algorithm,t.firstDivisor,E,u)}}(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&c.register(u,"lagueDhont","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\lague-dhondt.ts"),(d="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&d(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var a,o=r(30),n=r(26),i=r(12),s=r(18);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var l,c,d=function(){return(d=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function u(t,e){switch(void 0===t&&(t=o.c),e.type){case n.a.INITIALIZE_COMPUTATION:return d(d({},t),{algorithm:e.algorithm,firstDivisor:e.firstDivisor,electionThreshold:e.electionThreshold,districtThreshold:e.districtThreshold,districtSeats:e.districtSeats,levelingSeats:e.levelingSeats,areaFactor:e.areaFactor,current:e.results,historical:e.results,comparison:e.results,votes:e.votes,metrics:e.metrics,parameters:e.parameters});case n.a.UPDATE_COMPUTATION:return d(d({},t),{algorithm:e.algorithm,firstDivisor:e.firstDivisor,electionThreshold:e.electionThreshold,districtThreshold:e.districtThreshold,districtSeats:e.districtSeats,levelingSeats:e.levelingSeats,areaFactor:e.areaFactor,current:e.results,votes:e.votes,metrics:e.metrics,parameters:e.parameters});case n.a.SAVE_COMPUTATION:return d(d({},t),{comparison:t.current});case n.a.RESET_SAVED_COMPUTATION:return d(d({},t),{comparison:t.historical});case n.a.UPDATE_HISTORICAL:return d(d({},t),{historical:e.historical});case s.a.CLEAR_STATE:return o.c;default:return Object(i.a)(e),t}}(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\computation-reducer.ts"),l.register(u,"computation","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\computation-reducer.ts")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return p}));var a,o=r(21),n=r(40),i=r(18),s=r(12);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var l,c,d=function(){return(d=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function u(t,e){return(t.metrics.length>0||e.type===o.a.INITIALIZE_REQUESTED_METRICS)&&(t.parameters.length>0||e.type===o.a.INITIALIZE_REQUESTED_PARAMETERS)&&(t.votes.length>0||e.type===o.a.INITIALIZE_REQUESTED_VOTES)&&(Object.keys(t.partyMap).length>0||e.type===o.a.INITIALIZE_REQUESTED_PARTY_MAP)}function p(t,e){switch(void 0===t&&(t=n.a),e.type){case o.a.INITIALIZE_REQUESTED_VOTES:return d(d({},t),{votes:e.votes,dataLoaded:u(t,e),enableAutoSave:u(t,e)});case o.a.INITIALIZE_REQUESTED_METRICS:return d(d({},t),{metrics:e.metrics,dataLoaded:u(t,e),enableAutoSave:u(t,e)});case o.a.INITIALIZE_REQUESTED_PARAMETERS:return d(d({},t),{parameters:e.parameters,dataLoaded:u(t,e),enableAutoSave:u(t,e)});case o.a.INITIALIZE_REQUESTED_PARTY_MAP:return d(d({},t),{partyMap:e.partyMap,dataLoaded:u(t,e),enableAutoSave:u(t,e)});case i.a.CLEAR_STATE:return n.a;default:return Object(s.a)(e),t}}(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\requested-data\\requested-data-reducer.ts"),l.register(u,"checkStateLoaded","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\requested-data\\requested-data-reducer.ts"),l.register(p,"requestedData","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\requested-data\\requested-data-reducer.ts")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var a,o=r(27),n=r(41),i=r(12),s=r(18);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var l,c,d=function(){return(d=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function u(t,e){switch(void 0===t&&(t=n.a),e.type){case o.a.INITIALIZE_COMPUTATION_MENU:return d(d({},t),{electionYears:e.electionYears,year:e.year,algorithm:e.algorithm,firstDivisor:e.firstDivisor,electionThreshold:e.electionThreshold,districtThreshold:e.districtThreshold,districtSeats:e.districtSeats,levelingSeats:e.levelingSeats,areaFactor:e.areaFactor,autoCompute:e.autoCompute,comparison:{algorithm:e.algorithm,areaFactor:e.areaFactor,districtSeats:e.districtSeats,electionThreshold:e.electionThreshold,districtThreshold:e.districtThreshold,firstDivisor:e.firstDivisor,levelingSeats:e.levelingSeats}});case o.a.UPDATE_COMPUTATION_MENU:return d(d({},t),{year:e.year,algorithm:e.algorithm,firstDivisor:e.firstDivisor,electionThreshold:e.electionThreshold,districtThreshold:e.districtThreshold,districtSeats:e.districtSeats,levelingSeats:e.levelingSeats,areaFactor:e.areaFactor});case o.a.SAVE_SETTINGS:return d(d({},t),{comparison:{algorithm:t.algorithm,areaFactor:t.areaFactor,districtSeats:t.districtSeats,electionThreshold:t.electionThreshold,districtThreshold:t.districtThreshold,firstDivisor:t.firstDivisor,levelingSeats:t.levelingSeats}});case o.a.RESET_SAVED_SETTINGS:return d(d({},t),{algorithm:t.comparison.algorithm,areaFactor:t.comparison.areaFactor,districtSeats:t.comparison.districtSeats,electionThreshold:t.comparison.electionThreshold,districtThreshold:t.comparison.districtThreshold,firstDivisor:t.comparison.firstDivisor,levelingSeats:t.comparison.levelingSeats});case o.a.TOGGLE_AUTO_COMPUTE:return d(d({},t),{autoCompute:e.autoCompute});case s.a.CLEAR_STATE:return n.a;default:return Object(i.a)(e),t}}(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\computation-menu-reducer.ts"),l.register(u,"computationMenu","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\computation-menu-reducer.ts")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("button",{title:this.props.accessibilityLabel,onClick:this.props.onPress,type:this.props.type,className:"btn"+(this.props.className?" "+this.props.className:"")},this.props.title)},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\Button\\Button.tsx"),i.register(c,"Button","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\Button\\Button.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.updateNumeric=function(t){var r=e.validateInput(t.target.value);e.props.onChange(r.stringValue,r.numericValue)},e.updateSlider=function(t){var r=e.props.integer?parseInt(t.target.value):parseFloat(t.target.value);e.props.onChange(t.target.value,r)},e}return l(e,t),e.prototype.render=function(){var t=this.validateInput(this.props.value),e=this.props.originalValue&&this.props.originalValue!==this.props.value,r=!0===this.props.isHiddenTouch?"is-hidden-touch":"";return o.createElement("div",{hidden:this.props.hidden,className:"field "+r},o.createElement("label",{htmlFor:this.props.name,className:"label"},this.props.title," ",this.props.tooltip),o.createElement("div",{className:"control"},o.createElement("input",{className:"input is-primary is-fullwidth",type:"number",name:this.props.name,id:this.props.name,onChange:this.updateNumeric,placeholder:t.numericValue.toString(),value:t.stringValue,min:this.props.min,step:this.props.integer?1:.1,max:this.props.max}),this.props.slider&&o.createElement("input",{className:"is-primary is-fullwidth",type:"range",onChange:this.updateSlider,value:t.numericValue,min:this.props.min,step:this.props.integer?1:.1,max:this.props.max})),e&&o.createElement("p",{className:"help"},"Originalt: ",this.props.originalValue))},e.prototype.validateInput=function(t){var e,r=RegExp(/(^-$)|(^-?\d+(\.\d*)?$)/),a=this.props.defaultValue;if(this.props.hidden)return{numericValue:a,stringValue:t};if(!1===r.test(t)&&""!==t)return this.validateInput(this.props.value);if(0===t.indexOf("-")&&this.props.min>=0)return this.validateInput(this.props.value);if(""===t||"-"===t)return{stringValue:t,numericValue:a};if(-1!==t.indexOf(".")){if(this.props.integer)return this.validateInput(this.props.value);if(t.indexOf(".")===t.length-1){var o=t.substring(0,t.indexOf("."));e=parseInt(o)}else e=parseFloat(t)}else e=parseInt(t);return e>=this.props.min&&e<=this.props.max?{stringValue:t,numericValue:e}:this.validateInput(this.props.value)},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\SmartNumericInput\\SmartNumericInput.tsx"),i.register(c,"SmartNumericInput","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\SmartNumericInput\\SmartNumericInput.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return d}));var a,o=r(0),n=r(46);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var i,s,l,c=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return c(e,t),e.prototype.render=function(){var t=this.validateInput(this.props.value),e=this.props.originalValue&&this.props.originalValue!==this.props.value,r=this.props.label,a=!0===this.props.isHiddenTouch?"is-hidden-touch":"";return o.createElement("div",{hidden:this.props.hidden,className:"field "+a},o.createElement("label",{htmlFor:this.props.name,className:"label"},this.props.title," ",this.props.tooltip),o.createElement("div",{className:"control has-icons-right"},o.createElement("input",{className:"input is-primary is-fullwidth",type:"number",name:this.props.name,id:this.props.name,onChange:this.updateNumeric,placeholder:t.numericValue.toString(),value:t.stringValue,min:this.props.min,step:this.props.integer?1:.1,max:this.props.max}),this.props.slider&&o.createElement("input",{className:"is-primary is-fullwidth",type:"range",onChange:this.updateSlider,value:t.numericValue,min:this.props.min,step:this.props.integer?1:.1,max:this.props.max}),o.createElement("span",{className:"icon has-text-dark is-medium is-right"},o.createElement("p",null,r))),e&&o.createElement("p",{className:"help"},"Originalt: ",this.props.originalValue))},e}(n.a);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\SmartNumericInputWithLabel\\SmartNumericInputWithLabel.tsx"),s.register(d,"SmartNumericInputWithLabel","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\SmartNumericInputWithLabel\\SmartNumericInputWithLabel.tsx")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("span",{className:"icon has-tooltip-multiline has-tooltip-arrow","data-tooltip":this.props.text},o.createElement("a",{href:this.props.url,target:"_blank",rel:"noreferrer noopener"},o.createElement("i",{className:"fas fa-info-circle has-text-primary"})))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\TooltipInfo\\TooltipInfo.tsx"),i.register(c,"TooltipInfo","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\TooltipInfo\\TooltipInfo.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("span",{className:"icon has-tooltip-multiline has-tooltip-arrow has-tooltip-right","data-tooltip":this.props.text},o.createElement("a",{href:this.props.url,target:"_blank",rel:"noreferrer noopener"},o.createElement("i",{className:"fas fa-info-circle has-text-primary"})))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\TooltipInfo\\TooltipInfoRight.tsx"),i.register(c,"TooltipInfoRight","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\TooltipInfo\\TooltipInfoRight.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){var t=this.props.title;return o.createElement("div",{className:"lavinia-logo"},o.createElement("svg",{width:"100%",height:"100%",viewBox:"0 0 164 48",version:"1.1",xmlns:"http://www.w3.org/2000/svg"},o.createElement("text",{fontSize:"26",x:"54",y:"34"},t),o.createElement("g",{transform:"translate(-32.831 -75.101)"},o.createElement("g",null,o.createElement("g",null,o.createElement("path",{d:"m35.364 81.039h42.095l-20.904-5.6012z"}),o.createElement("path",{d:"m35.364 84.179h41.961l0.93305 0.5387v2.4013l-0.7672 0.7672h-42.06l-0.7845-0.78451v-2.2545z"}),o.createElement("path",{d:"m38.638 88.99h-3.4745v1.0691l1.0622 0.61327h1.5437l0.96713-0.55838z"}),o.createElement("path",{d:"m44.398 88.951h-3.4745v1.0691l1.0622 0.61327h1.5437l0.96713-0.55838z"}),o.createElement("path",{d:"m49.943 88.951h-3.4745v1.0691l1.0622 0.61327h1.5437l0.96713-0.55838z"}),o.createElement("path",{d:"m55.503 88.94h-3.4745v1.0691l1.0622 0.61327h1.5437l0.96713-0.55838z"}),o.createElement("path",{d:"m61.052 88.94h-3.4745v1.0691l1.0622 0.61327h1.5437l0.96713-0.55838z"}),o.createElement("path",{d:"m66.724 88.95h-3.4745v1.0691l1.0622 0.61327h1.5437l0.96713-0.55838z"}),o.createElement("path",{d:"m72.22 88.95h-3.4745v1.0691l1.0622 0.61327h1.5437l0.96713-0.55838z"}),o.createElement("path",{d:"m77.853 88.95h-3.4745v1.0691l1.0622 0.61327h1.5437l0.96713-0.55838z"}),o.createElement("path",{d:"m37.591 91.807 0.93018 21.911h-0.49093v0.46509h-2.2479v-0.43925h-0.43925l0.93018-21.937z"}),o.createElement("path",{d:"m43.305 91.807 0.93018 21.911h-0.49093v0.46509h-2.2479v-0.43925h-0.43925l0.93018-21.937z"}),o.createElement("path",{d:"m48.826 91.781 0.93018 21.911h-0.49093v0.46509h-2.2479v-0.43925h-0.43925l0.93018-21.937z"}),o.createElement("path",{d:"m54.45 91.755 0.93018 21.911h-0.49093v0.46509h-2.2479v-0.43925h-0.43925l0.93018-21.937z"}),o.createElement("path",{d:"m60.105 91.755 0.93018 21.911h-0.49093v0.46509h-2.2479v-0.43925h-0.43925l0.93018-21.937z"}),o.createElement("path",{d:"m65.681 91.755 0.93017 21.911h-0.49093v0.46509h-2.2479v-0.43925h-0.43925l0.93018-21.937z"}),o.createElement("path",{d:"m71.177 91.703 0.93018 21.911h-0.49093v0.46509h-2.2479v-0.43925h-0.43925l0.93018-21.937z"}),o.createElement("path",{d:"m76.754 91.755 0.93018 21.911h-0.49093v0.46509h-2.2479v-0.43925h-0.43925l0.93018-21.937z"}),o.createElement("path",{d:"m79.277 119.42-45.891 8e-3s-1.1693-0.4933 0.38368-3.2521l45.124-8e-3 0.26458-1.9e-4c1.8176 2.7586 0.38368 3.2523 0.38368 3.2523z"}),o.createElement("path",{d:"m34.226 83.079-0.54811-0.54811 0.59379-0.59379h44.45l0.54811 0.54811-0.59378 0.59379z"}))))))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\LaviniaSVGLogo\\LaviniaSVGLogo.tsx"),i.register(c,"LaviniaSVGLogo","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\LaviniaSVGLogo\\LaviniaSVGLogo.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return f}));var a,o=r(11),n=r(45),i=r(17),s=r(3);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var l,c,d=function(){return(d=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},u=function(t){return{computationPayload:{algorithm:t.computationState.algorithm,firstDivisor:t.computationState.firstDivisor,electionThreshold:t.computationState.electionThreshold,districtThreshold:t.computationState.districtThreshold,districtSeats:t.computationState.districtSeats,levelingSeats:t.computationState.levelingSeats,areaFactor:t.computationState.areaFactor,votes:t.computationState.votes,metrics:t.computationState.metrics,parameters:t.computationState.parameters,partyMap:t.requestedDataState.partyMap},settingsPayload:{electionYears:t.settingsState.electionYears,year:t.settingsState.year,algorithm:t.settingsState.algorithm,firstDivisor:t.settingsState.firstDivisor,electionThreshold:t.settingsState.electionThreshold,districtThreshold:t.settingsState.districtThreshold,districtSeats:t.settingsState.districtSeats,levelingSeats:t.settingsState.levelingSeats,autoCompute:t.settingsState.autoCompute,forceCompute:!1,areaFactor:t.settingsState.areaFactor,comparison:t.settingsState.comparison},showComparison:t.presentationMenuState.showComparison,parameters:t.requestedDataState.parameters,metrics:t.requestedDataState.metrics,votes:t.requestedDataState.votes,mergeDistricts:t.presentationMenuState.mergeDistricts,use2021Distribution:t.presentationMenuState.use2021Distribution}},p=function(t){return{updateCalculation:function(e,r,a){if(r||a){var o={algorithm:e.algorithm,firstDivisor:e.firstDivisor,electionThreshold:e.electionThreshold,districtThreshold:e.districtThreshold,districtSeats:e.districtSeats,levelingSeats:e.levelingSeats,areaFactor:e.areaFactor,votes:e.votes,metrics:e.metrics,parameters:e.parameters,partyMap:e.partyMap},n=Object(s.h)(o);t(n)}},updateSettings:function(e){var r=Object(i.g)(e);t(r)},toggleAutoCompute:function(e){var r=Object(i.f)(e);t(r)},resetToHistoricalSettings:function(e,r,a,o,n){var l=o.algorithm.parameters["First Divisor"]?o.algorithm.parameters["First Divisor"]:s.c.firstDivisor;if(e.autoCompute){var c={algorithm:o.algorithm.algorithm,firstDivisor:l,electionThreshold:o.threshold,districtThreshold:0,districtSeats:o.districtSeats,levelingSeats:o.levelingSeats,areaFactor:o.areaFactor,votes:r,metrics:a,parameters:o,partyMap:n},u=Object(s.i)(r,a,o,n);t(u);var p=Object(s.h)(c);t(p)}var f=d(d({},e),{algorithm:o.algorithm.algorithm,firstDivisor:l.toString(),electionThreshold:o.threshold.toString(),districtThreshold:"0",districtSeats:o.districtSeats.toString(),levelingSeats:o.levelingSeats.toString(),areaFactor:o.areaFactor.toString()}),b=Object(i.g)(f);t(b);var h=Object(i.e)();t(h)},resetComparison:function(){var e=Object(s.e)();t(e);var r=Object(i.d)();t(r)},resetHistorical:function(e,r,a,o){var n=Object(s.i)(e,r,a,o);t(n)},saveComparison:function(){var e=Object(s.f)();t(e);var r=Object(i.e)();t(r)}}},f=Object(o.b)(u,p)(n.a);(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ConnectedComputationMenu.tsx"),l.register(u,"mapStateToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ConnectedComputationMenu.tsx"),l.register(p,"mapDispatchToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ConnectedComputationMenu.tsx"),l.register(f,"ConnectedComputationMenu","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ConnectedComputationMenu.tsx")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){var e,a=r(0),o=r(55),n=r(47);(e="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&e(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var i,s,l,c=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return c(e,t),e.prototype.render=function(){return a.createElement("div",null,a.createElement(o.a,null),a.createElement(n.a,null))},e}(a.PureComponent);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationMenu.tsx"),s.register(d,"PresentationMenu","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationMenu.tsx")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var a,o=r(42),n=r(7),i=r(12),s=r(18);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var l,c,d=function(){return(d=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function u(t,e){switch(void 0===t&&(t=o.a),e.type){case n.a.INITIALIZE_PRESENTATION:return d(d({},t),{currentPresentation:e.initialPresentation,decimals:e.decimals,decimalsNumber:e.decimalsNumber,showPartiesWithoutSeats:e.showPartiesWithoutSeats});case n.a.CHANGE_PRESENTATION:return d(d({},t),{currentPresentation:e.presentationSelected});case n.a.CHANGE_DECIMALS:return d(d({},t),{decimals:e.decimals,decimalsNumber:e.decimalsNumber});case n.a.SHOW_PARTIES_NO_SEATS:return d(d({},t),{showPartiesWithoutSeats:e.showPartiesWithoutSeats});case n.a.SELECT_DISTRICT:return d(d({},t),{districtSelected:e.districtSelected});case n.a.CHANGE_DISPROPORTIONALITY_INDEX:return d(d({},t),{disproportionalityIndex:e.index});case n.a.TOGGLE_SHOW_COMPARISON:return d(d({},t),{showComparison:e.showComparison});case n.a.TOGGLE_SHOW_FILTERS:return d(d({},t),{showFilters:e.showFilters});case n.a.TOGGLE_MERGE_DISTRICTS:return d(d({},t),{mergeDistricts:e.mergeDistricts});case n.a.TOGGLE_USE_2021_DISTRIBUTION:return d(d({},t),{use2021Distribution:e.use2021Distribution});case s.a.CLEAR_STATE:return o.a;default:return Object(i.a)(e),t}}(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-reducer.ts"),l.register(u,"presentationMenu","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\presentation-menu-reducer.ts")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){var e,a=r(49),o=r(11),n=r(7);(e="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&e(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var i,s,l=function(t,e){return{onPress:function(){var r=Object(n.d)(e.presentationSelected);t(r)}}},c=Object(o.b)(null,l)(a.a);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"mapDispatchToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSelection\\PresentationSelectionButton\\ConnectedPresentationSelectionButton.tsx"),i.register(c,"ConnectedPresentationSelectionButton","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSelection\\PresentationSelectionButton\\ConnectedPresentationSelectionButton.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return E}));var a,o=r(110),n=r(11),i=r(39),s=r(33),l=r(3),c=r(17),d=r(25),u=r(122),p=r(123),f=r(18),b=r(43),h=r(14);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var v,y,g=function(t,e,r,a){return new(r||(r=Promise))((function(o,n){function i(t){try{l(a.next(t))}catch(t){n(t)}}function s(t){try{l(a.throw(t))}catch(t){n(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(i,s)}l((a=a.apply(t,e||[])).next())}))},m=function(t,e){var r,a,o,n,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,a&&(o=2&n[0]?a.return:n[0]?a.throw||((o=a.return)&&o.call(a),0):a.next)&&!(o=o.call(a,n[1])).done)return o;switch(a=0,o&&(n=[2&n[0],o.value]),n[0]){case 0:case 1:o=n;break;case 4:return i.label++,{value:n[1],done:!1};case 5:i.label++,a=n[1],n=[0];continue;case 7:n=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==n[0]&&2!==n[0])){i=0;continue}if(3===n[0]&&(!o||n[1]>o[0]&&n[1]<o[3])){i.label=n[1];break}if(6===n[0]&&i.label<o[1]){i.label=o[1],o=n;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(n);break}o[2]&&i.ops.pop(),i.trys.pop();continue}n=e.call(t,i)}catch(t){n=[6,t],a=0}finally{r=o=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}},S=function(t){return{dataLoaded:t.requestedDataState.dataLoaded,hamburgerExpanded:t.uiState.hamburgerExpanded}},L=function(t){return{initializeState:function(){return g(void 0,void 0,void 0,(function(){var e,r,a,o,n,f,v,y,g,S,L,E,O,H,G,M,_,A,I,T,J,P,C;return m(this,(function(m){switch(m.label){case 0:if(e="https://lavinia-api-staging.azurewebsites.net/api/v3.0.0/votes?partyCode=ALL&district=ALL",r="https://lavinia-api-staging.azurewebsites.net/api/v3.0.0/metrics?district=ALL",a="https://lavinia-api-staging.azurewebsites.net/api/v3.0.0/parameters",o="https://lavinia-api-staging.azurewebsites.net/api/v3.0.0/years",n="https://lavinia-api-staging.azurewebsites.net/api/v3.0.0/parties",!Object(u.a)())return[3,9];f=[],v=[],y=[],g={},S=[],m.label=1;case 1:return m.trys.push([1,7,,8]),[4,Object(i.a)(e)];case 2:return f=m.sent(),[4,Object(i.a)(r)];case 3:return v=m.sent(),[4,Object(i.a)(a)];case 4:return y=m.sent(),[4,Object(i.a)(n)];case 5:return g=m.sent(),[4,Object(i.a)(o)];case 6:return S=m.sent(),[3,8];case 7:return L=m.sent(),E={text:"Klarte ikke å laste ned valgdata fra APIet, prøv igjen senere. Feilmeldingen var: "+L.message,type:b.b.DANGER},O=Object(h.b)(E),t(O),[3,8];case 8:H=Object(s.d)(f),t(H),G=Object(s.a)(v),t(G),M=y.map((function(t){return Object(p.a)(t)})),_=Object(s.b)(M),t(_),A=Object(s.c)(g),t(A),I=S[0],T=S.map((function(t){return t.toString()})),J=Object(c.c)(T,M[0]),t(J),P=Object(d.b)(),t(P),C=Object(l.d)(I,f,v,M,g),t(C),m.label=9;case 9:return[2]}}))}))},clearState:function(){var e=Object(f.b)();t(e)},showNotification:function(e,r){var a={text:r,type:e},o=Object(h.b)(a);t(o)},toggleHamburger:function(e){t(Object(h.e)(e))}}},E=Object(n.b)(S,L)(o.a);(v="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(v.register(g,"__awaiter","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ConnectedLayout.tsx"),v.register(m,"__generator","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ConnectedLayout.tsx"),v.register(S,"mapStateToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ConnectedLayout.tsx"),v.register(L,"mapDispatchToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ConnectedLayout.tsx"),v.register(E,"ConnectedLayout","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ConnectedLayout.tsx")),(y="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&y(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var a,o=r(51),n=r(11),i=r(25);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l,c=function(t){var e=parseInt(t.settingsState.year);return{comparisonPartyResults:t.computationState.comparison.partyResults,results:t.computationState.current,currentPresentation:t.presentationMenuState.currentPresentation,decimals:t.presentationMenuState.decimalsNumber,showPartiesWithoutSeats:t.presentationMenuState.showPartiesWithoutSeats,districtSelected:t.presentationMenuState.districtSelected,disproportionalityIndex:t.presentationMenuState.disproportionalityIndex,showComparison:t.presentationMenuState.showComparison,year:e,algorithm:t.computationState.algorithm,threshold:t.computationState.electionThreshold,showFilters:t.presentationMenuState.showFilters,partyMap:t.requestedDataState.partyMap}},d=function(t){return{selectDistrict:function(e){t(Object(i.d)(e.target.value))}}},u=Object(n.b)(c,d)(o.a);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"mapStateToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\ConnectedPresentation.tsx"),s.register(d,"mapDispatchToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\ConnectedPresentation.tsx"),s.register(u,"ConnectedPresentation","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\ConnectedPresentation.tsx")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return v}));var a,o=r(0),n=r(15),i=r(8),s=r(35),l=r(9),c=r(5),d=r(112);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var u,p,f,b=(u=function(t,e){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}u(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),h=function(){return(h=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},v=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return b(e,t),e.prototype.render=function(){var t=this.props.districtResults,e=this.props.decimals,r=t.map((function(t){return t.votesPerSeat})).reduce(i.c),a=t.map((function(t){return t.votesPerSeat})).reduce(i.a),u=t.map((function(t){return t.votesPerSeat})).reduce(i.b),p=1/r/(1/u)*100,f=1/a/(1/u)*100,b=t.find((function(t){return t.votesPerSeat===r})).name,v=t.find((function(t){return t.votesPerSeat===a})).name,y=Object(c.i)(this.props.algorithm)?Object(s.a)(t):void 0;return o.createElement(o.Fragment,null,o.createElement("div",{className:"card has-background-primary has-text-light is-size-5"},o.createElement("p",{className:"card-content"},"En stemme i ",b," hadde mest vekt, og telte ",p.toFixed(e)+"%"," av en gjennomsnittlig stemme",", mens en stemme i ",v," hadde minst vekt, og bare telte ",f.toFixed(e)+"%.",o.createElement(d.a,{mostVulnerable:y,partyMap:this.props.partyMap}))),o.createElement(n.a,h({className:"-highlight -striped has-text-centered",defaultPageSize:this.props.districtResults.length,pageSize:this.props.districtResults.length,showPaginationBottom:!1,data:t},l.c,{columns:[{Header:"Fylke",accessor:"name",minWidth:10*this.props.districtWidth,Footer:o.createElement("span",null,o.createElement("strong",null,"Alle fylker"))},{Header:"Stemmer",accessor:"votes",Footer:o.createElement("span",null,o.createElement("strong",null,t.map((function(t){return t.votes})).reduce(i.d,0)))},{Header:"Distrikt",accessor:"districtSeats",Footer:o.createElement("span",null,o.createElement("strong",null,t.map((function(t){return t.districtSeats})).reduce(i.d,0)))},{Header:"Utjevning",accessor:"levelingSeats",Footer:o.createElement("span",null,o.createElement("strong",null,t.map((function(t){return t.levelingSeats})).reduce(i.d,0)))},{Header:"Sum",accessor:"totalSeats",Footer:o.createElement("span",null,o.createElement("strong",null,t.map((function(t){return t.totalSeats})).reduce(i.d,0)),o.createElement("br",null))},{Header:"Stemmer/mandat",accessor:"votesPerSeat",Footer:o.createElement("span",null,o.createElement("strong",null,u.toFixed(e)))}]})))},e}(o.Component);(p="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(p.register(b,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\DistrictOverview\\DistrictOverview.tsx"),p.register(h,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\DistrictOverview\\DistrictOverview.tsx"),p.register(v,"DistrictOverview","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\DistrictOverview\\DistrictOverview.tsx")),(f="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&f(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){var t=this.props.partyMap,e=this.props.name,r=t?t[e]:e;return o.createElement("b",null,r)},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\PartyName\\PartyName.tsx"),i.register(c,"PartyName","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\common\\PartyName\\PartyName.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return v}));var a,o=r(0),n=r(15),i=r(8),s=r(4),l=r(12),c=r(13),d=r(9);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var u,p,f,b=(u=function(t,e){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}u(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),h=function(){return(h=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},v=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.makeData=function(){for(var t=[],r=e.props.partyResults,a=e.props.comparisonPartyResults,o=r.length===a.length,n=0;n<r.length;n++){var i=o?r[n].totalSeats-a[n].totalSeats:0,s=h(h({},e.props.partyResults[n]),{totalSeatDifference:i});t.push(s)}return e.props.showPartiesWithoutSeats?t:t.filter((function(t){return t.totalSeats>0||0!==t.totalSeatDifference}))},e.shouldShowDifference=function(t){return t.some((function(t){return 0!==t.totalSeatDifference}))},e}return b(e,t),e.prototype.render=function(){var t,e,r=this.makeData(),a=this.props.showPartiesWithoutSeats?r.map((function(t){return t.proportionality})):r.filter((function(t){return t.totalSeats>0})).map((function(t){return t.proportionality})),u=this.props.decimals,p=Math.sqrt(a.map((function(t){return t*t})).reduce(i.d,0)/2),f=a.map((function(t){return Math.abs(t)})).reduce(i.d,0)/2;switch(this.props.disproportionalityIndex){case s.a.LOOSEMORE_HANBY:e="L-H",t=f;break;case s.a.GALLAGHER:e="LSq",t=p;break;default:Object(l.a)(this.props.disproportionalityIndex),e="Error",t=-1}var b=[{value:"all",title:"Alle"},{value:"true",title:"> 0"},{value:"false",title:"= 0"}],v=[{value:"all",title:"Alle"},{value:"gteq",title:"≥ "+this.props.threshold+"%"},{value:"lt",title:"< "+this.props.threshold+"%"}];return o.createElement(o.Fragment,null,o.createElement(n.a,h({className:"-highlight -striped has-text-centered",multiSort:!1,data:r,filterable:this.props.showFilters,showPagination:this.props.showFilters?r.length>8:r.length>10,showPageSizeOptions:!1,pageSize:this.props.showFilters?8:r.length>10?10:r.length},d.c,{columns:[{Header:"Parti",accessor:"partyCode",filterMethod:d.b,Footer:o.createElement("strong",null,"Utvalg"),Cell:function(t){return t.original.partyName?o.createElement("abbr",{title:t.original.partyName},t.value):t.value}},{Header:"Stemmer",accessor:"votes",filterable:!1,Footer:o.createElement("strong",null,r.map((function(t){return t.votes})).reduce(i.d,0))},{Header:"%",id:"%",Filter:Object(d.f)(v),filterMethod:Object(d.g)(this.props.threshold),accessor:function(t){return Object(c.b)(t.percentVotes,u)}},{Header:"Distrikt",accessor:"districtSeats",Filter:Object(d.f)(b),filterMethod:d.a,Footer:o.createElement("strong",null,r.map((function(t){return t.districtSeats})).reduce(i.d,0))},{Header:"Utjevning",accessor:"levelingSeats",Filter:Object(d.f)(b),filterMethod:d.a,Footer:o.createElement("strong",null,r.map((function(t){return t.levelingSeats})).reduce(i.d,0))},{Header:"Sum",accessor:"totalSeats",filterable:!1,Footer:o.createElement("strong",null,r.map((function(t){return t.totalSeats})).reduce(i.d,0))},{Header:"Differanse",accessor:"totalSeatDifference",Filter:Object(d.f)(b),filterMethod:d.h,show:this.shouldShowDifference(r)},{Header:"Prop. %",id:"proportionality",accessor:function(t){return Object(c.b)(t.proportionality,u)},Filter:Object(d.f)([{value:"all",title:"Alle"},{value:"gteq",title:"≥ 0"},{value:"lt",title:"< 0"}]),filterMethod:Object(d.e)(),Footer:o.createElement("strong",null,e,": ",t.toFixed(this.props.decimals))}],defaultSorted:[{id:"totalSeats",desc:!0}]})))},e}(o.Component);(p="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(p.register(b,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\ElectionOverview\\ElectionOverview.tsx"),p.register(h,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\ElectionOverview\\ElectionOverview.tsx"),p.register(v,"ElectionOverview","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\ElectionOverview\\ElectionOverview.tsx")),(f="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&f(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return p}));var a,o=r(0),n=r(15),i=r(9);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l,c,d=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),u=function(){return(u=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return d(e,t),e.prototype.makeData=function(){var t=this.props.levellingSeatQuotients,e=t.map((function(t){return t.partyCode})),r=[];return e.forEach((function(t){r.push({partyCode:t,seatsWon:[]})})),t.forEach((function(t){var e=r.findIndex((function(e){return e.partyCode===t.partyCode}));t.levelingSeats.forEach((function(t){0!==t.seatNumber&&r[e].seatsWon.push(t.district)}))})),r},e.prototype.getColumns=function(){var t=[],e=this.makeData();if(e.length>0){for(var r=this.findMostSeatsWon(e),a=0;a<e[r].seatsWon.length;a++)t.push({Header:a+1+".",accessor:"seatsWon["+a+"]",minWidth:150});t.unshift({Header:"Parti",accessor:"partyCode"})}return t},e.prototype.render=function(){var t=this.makeData(),e=this.getColumns();return o.createElement(o.Fragment,null,o.createElement(n.a,u({className:"-highlight -striped has-text-centered",style:{minHeight:100},data:t,columns:e,defaultPageSize:t.length>10?10:t.length,pageSize:t.length>10?10:t.length,showPageSizeOptions:!1,showPagination:t.length>10},i.d)))},e.prototype.findMostSeatsWon=function(t){var e=t.map((function(t){return t.seatsWon.length}));return e.indexOf(Math.max.apply(Math,e))},e}(o.Component);(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\LevellingSeatOverview\\LevellingSeatOverview.tsx"),l.register(u,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\LevellingSeatOverview\\LevellingSeatOverview.tsx"),l.register(p,"LevellingSeatOverview","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\LevellingSeatOverview\\LevellingSeatOverview.tsx")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return p}));var a,o=r(0),n=r(15),i=r(9);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l,c,d=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),u=function(){return(u=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return d(e,t),e.prototype.generateColumns=function(){for(var t=[{Header:"Fylke",accessor:"name",width:10*this.props.districtWidth}],e=0,r=this.props.districtResults;e<r.length;e++){r[e].partyResults.sort((function(t,e){return t.partyCode.localeCompare(e.partyCode)}))}if(this.props.districtResults.length>0)for(var a=0;a<this.props.districtResults[0].partyResults.length;a++){var o=this.props.districtResults[0].partyResults[a];t.push({Header:o.partyCode,accessor:"partyResults["+a+"].totalSeats",minWidth:50})}return t},e.prototype.render=function(){return o.createElement(o.Fragment,null,o.createElement(n.a,u({className:"-highlight -striped has-text-centered",defaultPageSize:19,showPaginationBottom:!1,data:this.props.districtResults,columns:this.generateColumns()},i.c)))},e}(o.Component);(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\SeatDistribution\\SeatDistribution.tsx"),l.register(u,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\SeatDistribution\\SeatDistribution.tsx"),l.register(p,"SeatDistribution","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\SeatDistribution\\SeatDistribution.tsx")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return S}));var a,o=r(0),n=r(15),i=r(8),s=r(4),l=r(12),c=r(113),d=r(9),u=r(13),p=r(114),f=r(35),b=r(5);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var h,v,y,g=(h=function(t,e){return(h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}h(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),m=function(){return(m=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},S=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.getDistrictResult=function(t){return e.props.districtResults.find((function(e){return e.name===t}))||e.props.districtResults[0]},e.getData=function(){return e.getDistrictResult(e.props.districtSelected).partyResults},e.getLastSeat=function(){var t=e.getDistrictResult(e.props.districtSelected);if(t)return t.districtSeatResult[t.districtSeatResult.length-1]},e}return g(e,t),e.prototype.render=function(){var t,e,r=this.getDistrictResult(this.props.districtSelected),a=Object(b.i)(this.props.algorithm)&&r.districtSeats>0,h=a?Object(f.c)(r):void 0,v=a?Object(f.b)(r):void 0,y=a?Object(f.d)(r):void 0,g=a?Object(f.e)(r):void 0,S=this.getData(),L=this.props.decimals,E=S.map((function(t){return t.proportionality}));switch(this.props.disproportionalityIndex){case s.a.LOOSEMORE_HANBY:t="L-H",e=E.map((function(t){return Math.abs(t)})).reduce(i.d,0)/2;break;case s.a.GALLAGHER:t="LSq",e=Math.sqrt(E.map((function(t){return t*t})).reduce(i.d,0)/2);break;default:Object(l.a)(this.props.disproportionalityIndex),t="Error",e=-1}return o.createElement(o.Fragment,null,o.createElement(c.a,{selectDistrict:this.props.selectDistrict,districtSelected:this.props.districtSelected,districtResults:this.props.districtResults}),a&&o.createElement(p.a,{vulnerable:y,vulnerableVotes:g,partyMap:this.props.partyMap}),o.createElement(n.a,m({className:"-highlight -striped has-text-centered",data:S,pageSize:S.length<=10?S.length:10,showPagination:S.length>10,columns:[{Header:"Parti",accessor:"partyCode",Footer:o.createElement("span",null,o.createElement("strong",null,"Utvalg")),Cell:function(t){return t.original.partyName?o.createElement("abbr",{title:t.original.partyName},t.value):t.value}},{Header:"Stemmer",accessor:"votes",Footer:o.createElement("span",null,o.createElement("strong",null,S.map((function(t){return t.votes})).reduce(i.d)))},{Header:"%",id:"%",accessor:function(t){return Object(u.b)(t.percentVotes,L)}},{Header:"Distrikt",accessor:"districtSeats",Footer:o.createElement("span",null,o.createElement("strong",null,S.map((function(t){return t.districtSeats})).reduce(i.d)))},{Header:"Utjevning",accessor:"levelingSeats",Footer:o.createElement("span",null,o.createElement("strong",null,S.map((function(t){return t.levelingSeats})).reduce(i.d)))},{Header:"Sum Mandater",accessor:"totalSeats",Footer:o.createElement("span",null,o.createElement("strong",null,S.map((function(t){return t.totalSeats})).reduce(i.d)))},{id:"marginInVotes",Header:"Margin i stemmer",accessor:function(t){return t.votes>0&&h?h.get(t.partyCode):null},Cell:function(t){return g&&t.original.partyCode===g.partyCode?o.createElement("div",{className:"has-background-dark has-text-white"},t.value):g&&t.original.partyCode===g.winner.partyCode?o.createElement("span",{className:"icon"},o.createElement("i",{className:"fas fa-trophy"})):t.value},show:a},{id:"lastSeatQuotient",Header:"Siste kvotient",accessor:function(t){return t.votes>0&&v?v.get(t.partyCode).toFixed(L):null},Cell:function(t){return y&&t.original.partyCode===y.runnerUp.partyCode?o.createElement("div",{className:"has-background-dark has-text-white"},t.value):t.value},show:a},{Header:"Prop. %",accessor:"proportionality",Footer:o.createElement("span",null,o.createElement("strong",null,t,": ",e.toFixed(L)))}],showPageSizeOptions:!1},d.c)))},e}(o.Component);(v="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(v.register(g,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\SingleDistrict\\SingleDistrict.tsx"),v.register(m,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\SingleDistrict\\SingleDistrict.tsx"),v.register(S,"SingleDistrict","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\SingleDistrict\\SingleDistrict.tsx")),(y="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&y(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var a,o=r(11),n=r(118),i=r(14);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l,c=function(t){return{notifications:t.uiState.notifications}},d=function(t){return{close:function(e){var r=Object(i.d)(e);t(r)}}},u=Object(o.b)(c,d)(n.a);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"mapStateToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Notifications\\ConnectedNotificationDisplay.tsx"),s.register(d,"mapDispatchToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Notifications\\ConnectedNotificationDisplay.tsx"),s.register(u,"ConnectedNotificationDisplay","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Notifications\\ConnectedNotificationDisplay.tsx")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var a,o=r(121),n=r(14),i=r(11);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l,c=function(t){return{showTutorial:t.uiState.showTutorial}},d=function(t){return{closeTutorial:function(){var e=Object(n.c)();t(e)}}},u=Object(i.b)(c,d)(o.a);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"mapStateToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Tutorial\\ConnectedTutorial.tsx"),s.register(d,"mapDispatchToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Tutorial\\ConnectedTutorial.tsx"),s.register(u,"ConnectedTutorial","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Tutorial\\ConnectedTutorial.tsx")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},,,function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return p}));var a,o=r(31),n=r(3),i=r(33),s=r(17),l=r(25),c=r(50);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var d,u,p=Object(o.c)({computationState:n.b,settingsState:s.b,presentationMenuState:l.c,requestedDataState:i.e,uiState:c.a});(d="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&d.register(p,"rootReducer","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\reducers\\index.ts"),(u="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&u(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return d}));var a,o=r(54),n=r(23);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var i,s,l,c=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=function(t){function e(e){var r=t.call(this)||this;return r.denominatorFunction=e,r}return c(e,t),e.prototype.insertParty=function(t,e,r){var a=e/this.denominatorFunction(r);this.insert({key:t,value:a})},e.prototype.getWinner=function(t){var e,r=this,a=this.popTop();return a.length>1?(e=Object(n.a)(a,t),a.forEach((function(t){t.key!==e.key&&r.insert(t)}))):e=a[0],e},e.prototype.populateQuotients=function(t,e){for(var r in t)t.hasOwnProperty(r)&&this.insertParty(r,e[r],t[r])},e}(o.a);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\quotient-dictionary.ts"),s.register(d,"QuotientDictionary","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\computation\\logic\\quotient-dictionary.ts")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("div",{className:"field"},o.createElement("label",{className:"label",htmlFor:"year_select"},"Valgt år ",this.props.tooltip),o.createElement("div",{className:"control"},o.createElement("div",{className:"select is-primary is-fullwidth"},o.createElement("select",{title:"Velg år",id:"year_select",value:this.props.year,onChange:this.props.onYearChange,name:"year"},this.props.electionYears.map((function(t,e){return o.createElement("option",{key:e,value:t},t)}))))))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\YearSelect.tsx"),i.register(c,"YearSelect","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\YearSelect.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var a,o=r(0),n=r(3),i=r(5);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l,c,d=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return d(e,t),e.prototype.render=function(){var t=this.props.algorithm!==this.props.defaultAlgorithm;return o.createElement("div",{className:"field"},o.createElement("label",{className:"label",htmlFor:"algorithm_select"},"Valgt metode ",this.props.tooltip),o.createElement("div",{className:"control"},o.createElement("div",{className:"select is-primary is-fullwidth"},o.createElement("select",{title:"Beregningsmetode",id:"algorithm_select",name:"calcMethod",value:this.props.algorithm,onChange:this.props.onAlgorithmChange},o.createElement("option",{value:n.a.SAINTE_LAGUE},Object(i.f)(n.a.SAINTE_LAGUE)),o.createElement("option",{value:n.a.D_HONDT},Object(i.f)(n.a.D_HONDT)),o.createElement("option",{value:n.a.LARGEST_FRACTION_HARE},Object(i.f)(n.a.LARGEST_FRACTION_HARE)),o.createElement("option",{value:n.a.LARGEST_FRACTION_DROOP},Object(i.f)(n.a.LARGEST_FRACTION_DROOP)),o.createElement("option",{value:n.a.LARGEST_FRACTION_HAGENBACH_BISCHOFF},Object(i.f)(n.a.LARGEST_FRACTION_HAGENBACH_BISCHOFF))))),t&&o.createElement("label",null,"Orginalt: ",Object(i.f)(this.props.defaultAlgorithm)))},e}(o.Component);(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\AlgorithmSelect.tsx"),l.register(u,"AlgorithmSelect","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\AlgorithmSelect.tsx")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("div",{className:"field"},o.createElement("input",{type:"checkbox",className:"switch",name:"autoCompute",id:"autoCompute",checked:this.props.autoCompute,onChange:this.props.toggleAutoCompute}),o.createElement("label",{htmlFor:"autoCompute",className:"checkbox"},"Oppdater automatisk"))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\AutoComputeCheckbox.tsx"),i.register(c,"AutoComputeCheckbox","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\AutoComputeCheckbox.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){var t=this.props.highlight?" is-primary is-outlined":" is-static";return o.createElement("div",null,o.createElement("button",{className:"button is-fullwidth has-text-weight-bold"+t,onClick:this.props.restoreToDefault,type:"button"},"Tilbakestill til historisk ordning"))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ResetButton.tsx"),i.register(c,"ResetButton","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ResetButton.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var a,o=r(0),n=r(98),i=r(99);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l,c,d=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return d(e,t),e.prototype.render=function(){return o.createElement("div",{hidden:!this.props.showComparison},o.createElement("label",{className:"label has-text-centered"},"Sammenlikning"),o.createElement("div",null,o.createElement(i.a,{resetComparison:this.props.resetComparison}),o.createElement(n.a,{saveComparison:this.props.saveComparison})))},e}(o.Component);(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ComparisonOptions.tsx"),l.register(u,"ComparisonOptions","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ComparisonOptions.tsx")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("button",{className:"button is-primary is-fullwidth",title:"Lagre sammenlikning",id:"saveComparison",onClick:this.props.saveComparison,type:"button"},"Lagre")},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\SaveComparisonButton.tsx"),i.register(c,"SaveComparisonButton","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\SaveComparisonButton.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("button",{className:"button is-primary is-outlined is-fullwidth",title:"Gjenopprett sammenlikning",id:"resetComparison",onClick:this.props.resetComparison,type:"button"},"Gjenopprett")},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ResetComparisonButton.tsx"),i.register(c,"ResetComparisonButton","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ResetComparisonButton.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("div",{hidden:this.props.autoCompute},o.createElement("button",{id:"compute_manually",className:"button is-primary is-outlined is-fullwidth has-text-weight-bold",title:"Beregn manuelt",onClick:this.props.computeManually,type:"button",hidden:this.props.autoCompute},"Beregn manuelt"))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ComputeManuallyButton.tsx"),i.register(c,"ComputeManuallyButton","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\ComputationMenu\\ComputeManuallyButton.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return s}));var a,o=r(4);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s=[{type:o.b.ElectionTable,displayName:"Landsoversikt"},{type:o.b.DistrictTable,displayName:"Fylkesoversikt"},{type:o.b.LevellingSeats,displayName:"Utjevningsmandater"},{type:o.b.RemainderQuotients,displayName:"Restkvotienter"},{type:o.b.SeatDistribution,displayName:"Fylkesfordeling av mandater"},{type:o.b.SingleDistrict,displayName:"Enkeltfylke"}];function l(t){return s.find((function(e){return e.type===t})).displayName}(n="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(n.register(s,"selectionLookup","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSelection\\presentation-selection-utilities.ts"),n.register(l,"getSelectionName","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSelection\\presentation-selection-utilities.ts")),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&i(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return d}));var a,o=r(0),n=r(4);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var i,s,l,c=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return c(e,t),e.prototype.render=function(){return o.createElement("div",{hidden:this.props.hidden,className:"field"},o.createElement("label",{className:"label",htmlFor:"disproportionality"},"Disproporsjonalitetsindeks ",this.props.tooltip),o.createElement("div",{className:"control"},o.createElement("div",{className:"select is-primary is-fullwidth"},o.createElement("select",{id:"disproportionality",onChange:this.props.changeDisproportionalityIndex,value:this.props.disproportionalityIndex},o.createElement("option",{key:n.a.LOOSEMORE_HANBY,value:n.a.LOOSEMORE_HANBY},"Loosemore-Hanby"),o.createElement("option",{key:n.a.GALLAGHER,value:n.a.GALLAGHER},"Gallagher")))))},e}(o.Component);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\DisproportionalitySelect.tsx"),s.register(d,"DisproportionalitySelect","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\DisproportionalitySelect.tsx")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("div",{hidden:this.props.hidden,className:"field"},o.createElement("input",{type:"checkbox",className:"switch",id:"no-seats-setting",name:"no-seats-setting",checked:this.props.showPartiesWithoutSeats,onChange:this.props.toggleShowPartiesWithoutSeats}),o.createElement("label",{className:"checkbox",htmlFor:"no-seats-setting"},"Inkluder partier uten mandater"))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\NoSeatsCheckbox.tsx"),i.register(c,"NoSeatsCheckbox","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\NoSeatsCheckbox.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("div",{hidden:this.props.hidden,className:"field"},o.createElement("input",{type:"checkbox",id:"comparison-checkbox",name:"comparison-checkbox",className:"switch",checked:this.props.showComparison,onChange:this.props.toggleComparison}),o.createElement("label",{className:"checkbox",htmlFor:"comparison-checkbox"},"Mandatendringer"))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\ComparisonCheckbox.tsx"),i.register(c,"ComparisonCheckbox","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\ComparisonCheckbox.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("div",{className:"field",hidden:this.props.hidden},o.createElement("input",{type:"checkbox",className:"switch",id:"filters-setting",name:"filters-setting",checked:this.props.showFilters,onChange:this.props.toggleShowFilters}),o.createElement("label",{className:"checkbox",htmlFor:"filters-setting"},"Vis tabellfiltre"))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\FiltersCheckbox.tsx"),i.register(c,"FiltersCheckbox","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\FiltersCheckbox.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("div",{className:"field",hidden:this.props.hidden},o.createElement("input",{type:"checkbox",className:"switch",name:"merge-setting",id:"merge-setting",checked:this.props.mergeDistricts,onChange:this.props.toggleMergeDistricts}),o.createElement("label",{className:"checkbox",htmlFor:"merge-setting"},"Slå sammen 19 fylker til 11 fylker"))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\MergeDistrictsCheckbox.tsx"),i.register(c,"MergeDistrictsCheckbox","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\MergeDistrictsCheckbox.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("div",{className:"field",hidden:this.props.hidden},o.createElement("input",{type:"checkbox",className:"switch",id:"2021-distribution-setting",name:"2021-distribution-setting",checked:this.props.use2021Distribution,onChange:this.props.toggleUse2021Distribution}),o.createElement("label",{className:"checkbox",htmlFor:"2021-distribution-setting"},"Bruk fylkesdata fra 2021"))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\Use2021DistributionCheckbox.tsx"),i.register(c,"Use2021DistributionCheckbox","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSettings\\Use2021DistributionCheckbox.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0),n=r(109),i=r(124);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l,c=Object(i.hot)(t)((function(){return o.createElement(n.a,null)}));(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&s.register(c,"App","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\index.tsx"),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";var a=r(79);r.d(e,"a",(function(){return a.a}));r(50),"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return g}));var a,o=r(0),n=r(29),i=r(17),s=r(25),l=r(115),c=r(117),d=r(43),u=r(120);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var p,f,b,h=(p=function(t,e){return(p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}p(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),v=function(t,e,r,a){return new(r||(r=Promise))((function(o,n){function i(t){try{l(a.next(t))}catch(t){n(t)}}function s(t){try{l(a.throw(t))}catch(t){n(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(i,s)}l((a=a.apply(t,e||[])).next())}))},y=function(t,e){var r,a,o,n,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,a&&(o=2&n[0]?a.return:n[0]?a.throw||((o=a.return)&&o.call(a),0):a.next)&&!(o=o.call(a,n[1])).done)return o;switch(a=0,o&&(n=[2&n[0],o.value]),n[0]){case 0:case 1:o=n;break;case 4:return i.label++,{value:n[1],done:!1};case 5:i.label++,a=n[1],n=[0];continue;case 7:n=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==n[0]&&2!==n[0])){i=0;continue}if(3===n[0]&&(!o||n[1]>o[0]&&n[1]<o[3])){i.label=n[1];break}if(6===n[0]&&i.label<o[1]){i.label=o[1],o=n;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(n);break}o[2]&&i.ops.pop(),i.trys.pop();continue}n=e.call(t,i)}catch(t){n=[6,t],a=0}finally{r=o=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}},g=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.closeHamburger=function(t){e.props.hamburgerExpanded&&e.props.toggleHamburger(!0)},e}return h(e,t),e.prototype.componentWillMount=function(){return v(this,void 0,void 0,(function(){return y(this,(function(t){switch(t.label){case 0:return[4,this.props.initializeState()];case 1:return t.sent(),[2]}}))}))},e.prototype.componentDidCatch=function(t,e){return v(this,void 0,void 0,(function(){var e;return y(this,(function(r){switch(r.label){case 0:return this.props.clearState(),localStorage.clear(),[4,this.props.initializeState()];case 1:return r.sent(),e="Det oppstod en feil så Lavinia måtte tilbakestilles. Feilmeldingen var: "+t.message,this.props.showNotification(d.b.DANGER,e),[2]}}))}))},e.prototype.render=function(){var t="pageloader is-size-1"+(this.props.dataLoaded?"":" is-active");return o.createElement(o.Fragment,null,o.createElement(u.a,null),o.createElement(l.a,null),o.createElement(d.a,null),o.createElement("div",{className:t,id:"page_loader"},o.createElement("span",{className:"title is-size-2"},"Laster inn Lavinia...")),o.createElement("div",{className:"columns is-desktop section",onClick:this.closeHamburger},o.createElement("div",{className:"column is-narrow"},o.createElement(i.a,null)),o.createElement("div",{className:"column presentation"},o.createElement(s.a,null),o.createElement(c.a,null),o.createElement(n.a,null))))},e}(o.Component);(f="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(f.register(h,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Layout.tsx"),f.register(v,"__awaiter","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Layout.tsx"),f.register(y,"__generator","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Layout.tsx"),f.register(g,"Layout","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Layout.tsx")),(b="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&b(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return p}));var a,o=r(0),n=r(15),i=r(9);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l,c,d=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),u=function(){return(u=Object.assign||function(t){for(var e,r=1,a=arguments.length;r<a;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},p=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.getData=function(t,e){return t.map((function(t){var r=e.find((function(e){return t.partyCode===e.partyCode}));return r?{partyCode:t.partyCode,districtSeats:t.districtSeats,districtSeatsComparison:r.districtSeats,districtSeatsDifference:t.districtSeats-r.districtSeats,levelingSeats:t.levelingSeats,levelingSeatsComparison:r.levelingSeats,levelingSeatsDifference:t.levelingSeats-r.levelingSeats,totalSeats:t.totalSeats,totalSeatsComparison:r.totalSeats,totalSeatsDifference:t.totalSeats-r.totalSeats,proportionality:t.proportionality,proportionalityComparison:r.proportionality,proportionalityDifference:t.proportionality-r.proportionality}:void 0})).filter((function(t){return void 0!==t}))},e}return d(e,t),e.prototype.render=function(){var t=this.getData(this.props.currentPartyResults,this.props.comparisonPartyResults);return o.createElement(n.a,u({className:"-highlight -striped has-text-centered",data:t,pageSize:t.length>10?10:t.length,columns:[{id:"partyCode",Header:o.createElement("abbr",{title:"Partikode"},"Parti"),accessor:function(t){return t.partyCode}},{id:"totalDifference",Header:o.createElement("abbr",{title:"Differanse av total sum mandater"},"Total endring"),accessor:function(t){return t.totalSeatsDifference}},{id:"districtDifference",Header:o.createElement("abbr",{title:"Differanse av distriktsmandater"},"Endring distrikt"),accessor:function(t){return t.districtSeatsDifference}},{id:"levelingDifference",Header:o.createElement("abbr",{title:"Differanse av utjevningsmandater"},"Endring utjevning"),accessor:function(t){return t.levelingSeatsDifference}}],showPagination:t.length>10,showPageSizeOptions:!1},i.c))},e}(o.Component);(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(d,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\ElectionOverview\\ElectionComparison.tsx"),l.register(u,"__assign","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\ElectionOverview\\ElectionComparison.tsx"),l.register(p,"ElectionComparison","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\ElectionOverview\\ElectionComparison.tsx")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return d}));var a,o=r(0),n=r(36);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var i,s,l,c=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return c(e,t),e.prototype.render=function(){if(this.props.mostVulnerable){var t=this.props.partyMap,e=this.props.mostVulnerable.winner.partyCode,r=this.props.mostVulnerable.runnerUp.partyCode;return o.createElement(o.Fragment,null," Det mest utsatte sistemandatet (relativt til kvotient) var i ",this.props.mostVulnerable.district," og ble vunnet av ",o.createElement(n.a,{name:e,partyMap:t}),". ",o.createElement(n.a,{name:r,partyMap:t})," ville trengt ",this.props.mostVulnerable.moreVotesToWin.toFixed(0)," flere stemmer for å vinne det.")}return null},e}(o.Component);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\DistrictOverview\\VulnerableDistrictSeatText.tsx"),s.register(d,"VulnerableDistrictSeatText","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\DistrictOverview\\VulnerableDistrictSeatText.tsx")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){return o.createElement("div",{className:"field"},o.createElement("div",{className:"control"},o.createElement("div",{className:"select is-fullwidth is-primary is-medium"},o.createElement("select",{id:"district",onChange:this.props.selectDistrict,value:this.props.districtSelected},this.props.districtResults.map((function(t,e){return o.createElement("option",{key:e,value:t.name},t.name)}))))))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\SingleDistrict\\DistrictSelect.tsx"),i.register(c,"DistrictSelect","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\SingleDistrict\\DistrictSelect.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return d}));var a,o=r(0),n=r(36);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var i,s,l,c=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return c(e,t),e.prototype.render=function(){var t=this.props.partyMap,e=this.props.vulnerable,r=this.props.vulnerableVotes,a=e.moreVotesToWin>r.moreVotesToWin?[" hadde nærmeste kvotient og trengte ",e.moreVotesToWin," flere stemmer for å vinne mandatet. ",o.createElement(n.a,{name:r.partyCode,partyMap:t,key:"vulnerableVotes"})," hadde derimot minst margin i stemmer og trengte bare ",r.moreVotesToWin," flere stemmer."]:[" hadde nærmeste kvotient og trengte ",e.moreVotesToWin," flere stemmer for å ta mandatet. "];return o.createElement("div",{className:"card has-background-primary has-text-light is-size-5"},o.createElement("div",{className:"card-content"},o.createElement("p",null,"Sistemandat i ",e.district," gikk til ",o.createElement(n.a,{name:e.winner.partyCode,partyMap:t}),". "," ",o.createElement(n.a,{name:e.runnerUp.partyCode,partyMap:t}),a)))},e}(o.Component);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\SingleDistrict\\InfoBox.tsx"),s.register(d,"InfoBox","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Presentation\\SingleDistrict\\InfoBox.tsx")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var a,o=r(116),n=r(11),i=r(14);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l,c=function(t){return{hamburgerExpanded:t.uiState.hamburgerExpanded}},d=function(t){return{toggleHamburger:function(e){t(Object(i.e)(e))}}},u=Object(n.b)(c,d)(o.a);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"mapStateToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Navigation\\ConnectedNavigation.ts"),s.register(d,"mapDispatchToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Navigation\\ConnectedNavigation.ts"),s.register(u,"ConnectedNavigation","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Navigation\\ConnectedNavigation.ts")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return d}));var a,o=r(0),n=r(10);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var i,s,l,c=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.handleHamburgerClick=function(t){e.props.toggleHamburger(e.props.hamburgerExpanded)},e}return c(e,t),e.prototype.render=function(){var t="https://project-lavinia.github.io/",e={menuButton:"navbar-burger burger",menu:"navbar-menu"};return this.props.hamburgerExpanded&&(e.menuButton+=" is-active",e.menu+=" is-active"),o.createElement("nav",{className:"navbar is-primary",role:"navigation","aria-label":"main navigation"},o.createElement("div",{className:"navbar-brand"},o.createElement("a",{className:"navbar-item",href:"./"},o.createElement(n.b,{title:"LAVINIA"})),o.createElement("a",{role:"button",className:e.menuButton,"aria-label":"menu","aria-expanded":this.props.hamburgerExpanded,onClick:this.handleHamburgerClick},o.createElement("span",{"aria-hidden":"true"}),o.createElement("span",{"aria-hidden":"true"}),o.createElement("span",{"aria-hidden":"true"}))),o.createElement("div",{id:"toggleable-menu",className:e.menu},o.createElement("div",{className:"navbar-start"},o.createElement("a",{target:"_blank",href:t,rel:"noopener noreferrer",className:"navbar-item"},"Hjelp"),o.createElement("div",{className:"navbar-item has-dropdown is-hoverable"},o.createElement("a",{className:"navbar-link",target:"_blank",href:t.concat("#Lavinia"),rel:"noopener noreferrer"},"Om Lavinia"),o.createElement("div",{className:"navbar-dropdown"},o.createElement("a",{target:"_blank",href:"https://lavinia-api-staging.azurewebsites.net/",rel:"noopener noreferrer",className:"navbar-item"},"API"),o.createElement("hr",{className:"navbar-divider"}),o.createElement("a",{target:"_blank",href:"https://www.github.com/Project-Lavinia/Lavinia-Client/issues",rel:"noopener noreferrer",className:"navbar-item"},"Gi en tilbakemelding"),o.createElement("a",{target:"_blank",href:"https://www.github.com/Project-Lavinia",rel:"noopener noreferrer",className:"navbar-item"},"GitHub"))))))},e}(o.Component);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Navigation\\Navigation.tsx"),s.register(d,"Navigation","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Navigation\\Navigation.tsx")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var a,o=r(55),n=r(7),i=r(11);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l,c=function(t){return{currentSelection:t.presentationMenuState.currentPresentation}},d=function(t){return{changeSelection:function(e){t(Object(n.d)(e.target.value))}}},u=Object(i.b)(c,d)(o.a);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"mapStateToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSelection\\ConnectedPresentationSelection.ts"),s.register(d,"mapDispatchToProps","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSelection\\ConnectedPresentationSelection.ts"),s.register(u,"ConnectedPresentationSelection","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\PresentationMenu\\PresentationSelection\\ConnectedPresentationSelection.ts")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return d}));var a,o=r(0),n=r(119);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var i,s,l,c=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return c(e,t),e.prototype.render=function(){var t=this;return o.createElement("div",{className:"toast-display"},this.props.notifications.map((function(e){return o.createElement(n.a,{data:e,close:t.props.close,key:e.id})})))},e}(o.Component);(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(s.register(c,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Notifications\\NotificationDisplay.tsx"),s.register(d,"NotificationDisplay","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Notifications\\NotificationDisplay.tsx")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return p}));var a,o=r(0),n=r(12),i=r(28);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,l=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});function c(t){var e="toast notification ";switch(t){case i.a.DANGER:return e+"is-danger";case i.a.INFO:return e+"is-info";case i.a.PRIMARY:return e+"is-primary";case i.a.SUCCESS:return e+"is-success";case i.a.WARNING:return e+"is-warning";default:throw Object(n.a)(t),Error("Reached unreachable code!")}}var d,u,p=function(t){function e(e){var r=t.call(this,e)||this;return r.handleClose=r.handleClose.bind(r),r}return l(e,t),e.prototype.handleClose=function(){this.props.close(this.props.data.id)},e.prototype.render=function(){return o.createElement("div",{className:c(this.props.data.type)},o.createElement("button",{className:"delete",onClick:this.handleClose}),this.props.data.text)},e}(o.Component);(d="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(d.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Notifications\\Notification.tsx"),d.register(c,"buildClassText","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Notifications\\Notification.tsx"),d.register(p,"Notification","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Notifications\\Notification.tsx")),(u="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&u(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";var a=r(88);r.d(e,"a",(function(){return a.a}));"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(0);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var n,i,s,l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return l(e,t),e.prototype.render=function(){var t="modal"+(this.props.showTutorial?" is-active":"");return o.createElement("div",{className:t},o.createElement("div",{className:"modal-background",onClick:this.props.closeTutorial}),o.createElement("div",{className:"modal-card"},o.createElement("header",{className:"modal-card-head"},o.createElement("p",{className:"modal-card-title"},"Velkommen til Lavinia"),o.createElement("button",{className:"delete","aria-label":"close",onClick:this.props.closeTutorial})),o.createElement("section",{className:"modal-card-body"},o.createElement("b",null,"Programtips"),o.createElement("p",null,"I Lavinia vil du se hjelpesymboler (",o.createElement("i",{className:"fas fa-info-circle has-text-primary"}),") ved de forskjellige innstillingene. Dersom du holder musepekeren over de vil du få en kort forklaring om innstillingen. Du kan klikke på symbolene for å få mer informasjon."),o.createElement("br",null),o.createElement("b",null,"Wiki"),o.createElement("p",null,"For å lese mer som Lavinia og det norske valgsystemet kan du ta en titt på wikien vår:",o.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://project-lavinia.github.io/#Lavinia"}," ","https://project-lavinia.github.io/#Lavinia"))),o.createElement("footer",{className:"modal-card-foot has-text-centered",style:{justifyContent:"center"}},o.createElement("button",{className:"button is-medium",onClick:this.props.closeTutorial,id:"close_tutorial_button"},"OK"))))},e}(o.Component);(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"__extends","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Tutorial\\Tutorial.tsx"),i.register(c,"Tutorial","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\Layout\\Tutorial\\Tutorial.tsx")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return n}));var a,o=r(37);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function n(){var t=Object(o.b)();return t?!(!i(t)&&Object(o.a)())&&(s(),!0):(s(),!0)}function i(t){return t.major!==d.major||t.minor!==d.minor}function s(){localStorage.clear(),Object(o.d)(d)}var l,c,d={major:2,minor:8,patch:0};(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(l.register(n,"stateIsInvalid","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\store\\version.ts"),l.register(i,"isIncompatibleVersion","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\store\\version.ts"),l.register(s,"clearAndSave","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\store\\version.ts"),l.register(d,"currentVersion","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\store\\version.ts")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&c(t)}).call(this,r(2)(t))},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return c}));var a,o=r(19),n=r(5);(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(t);var i,s;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function l(t){return{algorithm:Object(n.g)(t.algorithm),parameters:Object(o.c)(t.parameters)}}function c(t){return{algorithm:l(t.algorithm),areaFactor:t.areaFactor,districtSeats:t.districtSeats,electionType:t.electionType,electionYear:t.electionYear,levelingSeats:t.levelingSeats,threshold:t.threshold,totalVotes:t.totalVotes}}(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(i.register(l,"rawAlgorithmToAlgorithmConverter","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\requested-data\\requested-data-utilities.ts"),i.register(c,"rawParametersToParametersConverter","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\requested-data\\requested-data-utilities.ts")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(t)}).call(this,r(2)(t))},,function(t,e,r){"use strict";r.r(e),function(t){var e,a=r(0),o=r(44),n=r(11),i=r(56),s=r(108),l=r(53);r(138);(e="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&e(t);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var c,d,u=Object(i.b)(),p=Object(i.a)(history,u);p.subscribe(Object(l.debounce)((function(){var t=p.getState();t.requestedDataState.enableAutoSave&&Object(i.c)(t)}),500)),o.render(a.createElement(n.a,{store:p},a.createElement(s.a,null)),document.getElementById("root")),(c="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(c.register(u,"persistedState","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\main.tsx"),c.register(p,"store","E:\\Shared\\BtSync\\Anders Jakob\\UIO\\Jobb\\Mandater\\Lavinia-client\\src\\main.tsx")),(d="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&d(t)}.call(this,r(2)(t))},,,,,,,,,,function(t,e,r){"use strict";r(63),"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature},,,function(t,e,r){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbi9wcmVzZW50YXRpb24tbW9kZWxzLnRzIiwid2VicGFjazovLy8uL0xheW91dC9QcmVzZW50YXRpb25NZW51L3ByZXNlbnRhdGlvbi1tZW51LWFjdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vdXRpbGl0aWVzL3JlZHVjZS50cyIsIndlYnBhY2s6Ly8vLi91dGlsaXRpZXMvcnQudHN4Iiwid2VicGFjazovLy8uL3V0aWxpdGllcy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi91dGlsaXRpZXMvbnVtYmVyLnRzIiwid2VicGFjazovLy8uL0xheW91dC91aS1hY3Rpb25zLnRzIiwid2VicGFjazovLy8uL2NvbXB1dGF0aW9uL2xvZ2ljL2FsZ29yaXRobS11dGlsaXRpZXMudHMiLCJ3ZWJwYWNrOi8vLy4vcmVkdWNlcnMvZ2xvYmFsLWFjdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vdXRpbGl0aWVzL2RpY3Rpb25hcnkudHMiLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbi9wcmVzZW50YXRpb24tdXRpbGl0aWVzLnRzIiwid2VicGFjazovLy8uL3JlcXVlc3RlZC1kYXRhL3JlcXVlc3RlZC1kYXRhLWFjdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vY29tcHV0YXRpb24vbG9naWMvZGlzdHJpY3QtbWVyZ2luZy50cyIsIndlYnBhY2s6Ly8vLi9jb21wdXRhdGlvbi9sb2dpYy91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9jb21wdXRhdGlvbi9jb21wdXRhdGlvbi1tb2RlbHMudHMiLCJ3ZWJwYWNrOi8vLy4vY29tcHV0YXRpb24vY29tcHV0YXRpb24tYWN0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvQ29tcHV0YXRpb25NZW51L2NvbXB1dGF0aW9uLW1lbnUtYWN0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvTm90aWZpY2F0aW9ucy9ub3RpZmljYXRpb24tbW9kZWxzLnRzIiwid2VicGFjazovLy8uL2NvbXB1dGF0aW9uL2NvbXB1dGF0aW9uLXN0YXRlLnRzIiwid2VicGFjazovLy8uL3JlcXVlc3RlZC1kYXRhL3JlcXVlc3RlZC1kYXRhLW1vZGVscy50cyIsIndlYnBhY2s6Ly8vLi91dGlsaXRpZXMvY29uZGl0aW9uYWxzLnRzIiwid2VicGFjazovLy8uL3V0aWxpdGllcy9kaXN0cmljdC50cyIsIndlYnBhY2s6Ly8vLi9zdG9yZS9sb2NhbC1zdG9yYWdlLnRzIiwid2VicGFjazovLy8uL2NvbXB1dGF0aW9uL2xvZ2ljL2Rpc3RyaWJ1dGlvbi50cyIsIndlYnBhY2s6Ly8vLi91dGlsaXRpZXMvYXBpLXJlcXVlc3RzLnRzIiwid2VicGFjazovLy8uL3JlcXVlc3RlZC1kYXRhL3JlcXVlc3RlZC1kYXRhLXN0YXRlLnRzIiwid2VicGFjazovLy8uL0xheW91dC9Db21wdXRhdGlvbk1lbnUvY29tcHV0YXRpb24tbWVudS1zdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvUHJlc2VudGF0aW9uTWVudS9wcmVzZW50YXRpb24tbWVudS1zdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvQ29tcHV0YXRpb25NZW51L0NvbXB1dGF0aW9uTWVudS50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbk1lbnUvUHJlc2VudGF0aW9uU2V0dGluZ3MvQ29ubmVjdGVkUHJlc2VudGF0aW9uU2V0dGluZ3MudHN4Iiwid2VicGFjazovLy8uL0xheW91dC9QcmVzZW50YXRpb25NZW51L1ByZXNlbnRhdGlvblNldHRpbmdzL1ByZXNlbnRhdGlvblNldHRpbmdzLnRzeCIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvUHJlc2VudGF0aW9uTWVudS9QcmVzZW50YXRpb25TZWxlY3Rpb24vUHJlc2VudGF0aW9uU2VsZWN0aW9uQnV0dG9uL1ByZXNlbnRhdGlvblNlbGVjdGlvbkJ1dHRvbi50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L3VpLXJlZHVjZXIudHMiLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbi9QcmVzZW50YXRpb24udHN4Iiwid2VicGFjazovLy8uL0xheW91dC9QcmVzZW50YXRpb24vUmVtYWluZGVyUXVvdGllbnRzL1JlbWFpbmRlclF1b3RpZW50cy50c3giLCJ3ZWJwYWNrOi8vLy4vY29tcHV0YXRpb24vbG9naWMvc29ydGVkLXJldmVyc2UtZGljdC50cyIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvUHJlc2VudGF0aW9uTWVudS9QcmVzZW50YXRpb25TZWxlY3Rpb24vUHJlc2VudGF0aW9uU2VsZWN0aW9uLnRzeCIsIndlYnBhY2s6Ly8vLi9zdG9yZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi91dGlsaXRpZXMvbWFwLnRzIiwid2VicGFjazovLy8uL0xheW91dC91aS1zdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9taWRkbGV3YXJlL2xvZ2dlci50cyIsIndlYnBhY2s6Ly8vLi9jb21wdXRhdGlvbi9sb2dpYy9kaXN0cmlidXRlLWxldmVsbGluZy1zZWF0cy50cyIsIndlYnBhY2s6Ly8vLi9jb21wdXRhdGlvbi9sb2dpYy9sYWd1ZS1kaG9uZHQudHMiLCJ3ZWJwYWNrOi8vLy4vY29tcHV0YXRpb24vY29tcHV0YXRpb24tcmVkdWNlci50cyIsIndlYnBhY2s6Ly8vLi9yZXF1ZXN0ZWQtZGF0YS9yZXF1ZXN0ZWQtZGF0YS1yZWR1Y2VyLnRzIiwid2VicGFjazovLy8uL0xheW91dC9Db21wdXRhdGlvbk1lbnUvY29tcHV0YXRpb24tbWVudS1yZWR1Y2VyLnRzIiwid2VicGFjazovLy8uL2NvbW1vbi9CdXR0b24vQnV0dG9uLnRzeCIsIndlYnBhY2s6Ly8vLi9jb21tb24vU21hcnROdW1lcmljSW5wdXQvU21hcnROdW1lcmljSW5wdXQudHN4Iiwid2VicGFjazovLy8uL2NvbW1vbi9TbWFydE51bWVyaWNJbnB1dFdpdGhMYWJlbC9TbWFydE51bWVyaWNJbnB1dFdpdGhMYWJlbC50c3giLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL1Rvb2x0aXBJbmZvL1Rvb2x0aXBJbmZvLnRzeCIsIndlYnBhY2s6Ly8vLi9jb21tb24vVG9vbHRpcEluZm8vVG9vbHRpcEluZm9SaWdodC50c3giLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL0xhdmluaWFTVkdMb2dvL0xhdmluaWFTVkdMb2dvLnRzeCIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvQ29tcHV0YXRpb25NZW51L0Nvbm5lY3RlZENvbXB1dGF0aW9uTWVudS50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbk1lbnUvUHJlc2VudGF0aW9uTWVudS50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbk1lbnUvcHJlc2VudGF0aW9uLW1lbnUtcmVkdWNlci50cyIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvUHJlc2VudGF0aW9uTWVudS9QcmVzZW50YXRpb25TZWxlY3Rpb24vUHJlc2VudGF0aW9uU2VsZWN0aW9uQnV0dG9uL0Nvbm5lY3RlZFByZXNlbnRhdGlvblNlbGVjdGlvbkJ1dHRvbi50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L0Nvbm5lY3RlZExheW91dC50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbi9Db25uZWN0ZWRQcmVzZW50YXRpb24udHN4Iiwid2VicGFjazovLy8uL0xheW91dC9QcmVzZW50YXRpb24vRGlzdHJpY3RPdmVydmlldy9EaXN0cmljdE92ZXJ2aWV3LnRzeCIsIndlYnBhY2s6Ly8vLi9jb21tb24vUGFydHlOYW1lL1BhcnR5TmFtZS50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbi9FbGVjdGlvbk92ZXJ2aWV3L0VsZWN0aW9uT3ZlcnZpZXcudHN4Iiwid2VicGFjazovLy8uL0xheW91dC9QcmVzZW50YXRpb24vTGV2ZWxsaW5nU2VhdE92ZXJ2aWV3L0xldmVsbGluZ1NlYXRPdmVydmlldy50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbi9TZWF0RGlzdHJpYnV0aW9uL1NlYXREaXN0cmlidXRpb24udHN4Iiwid2VicGFjazovLy8uL0xheW91dC9QcmVzZW50YXRpb24vU2luZ2xlRGlzdHJpY3QvU2luZ2xlRGlzdHJpY3QudHN4Iiwid2VicGFjazovLy8uL0xheW91dC9Ob3RpZmljYXRpb25zL0Nvbm5lY3RlZE5vdGlmaWNhdGlvbkRpc3BsYXkudHN4Iiwid2VicGFjazovLy8uL0xheW91dC9UdXRvcmlhbC9Db25uZWN0ZWRUdXRvcmlhbC50c3giLCJ3ZWJwYWNrOi8vLy4vcmVkdWNlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vY29tcHV0YXRpb24vbG9naWMvcXVvdGllbnQtZGljdGlvbmFyeS50cyIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvQ29tcHV0YXRpb25NZW51L1llYXJTZWxlY3QudHN4Iiwid2VicGFjazovLy8uL0xheW91dC9Db21wdXRhdGlvbk1lbnUvQWxnb3JpdGhtU2VsZWN0LnRzeCIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvQ29tcHV0YXRpb25NZW51L0F1dG9Db21wdXRlQ2hlY2tib3gudHN4Iiwid2VicGFjazovLy8uL0xheW91dC9Db21wdXRhdGlvbk1lbnUvUmVzZXRCdXR0b24udHN4Iiwid2VicGFjazovLy8uL0xheW91dC9Db21wdXRhdGlvbk1lbnUvQ29tcGFyaXNvbk9wdGlvbnMudHN4Iiwid2VicGFjazovLy8uL0xheW91dC9Db21wdXRhdGlvbk1lbnUvU2F2ZUNvbXBhcmlzb25CdXR0b24udHN4Iiwid2VicGFjazovLy8uL0xheW91dC9Db21wdXRhdGlvbk1lbnUvUmVzZXRDb21wYXJpc29uQnV0dG9uLnRzeCIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvQ29tcHV0YXRpb25NZW51L0NvbXB1dGVNYW51YWxseUJ1dHRvbi50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbk1lbnUvUHJlc2VudGF0aW9uU2VsZWN0aW9uL3ByZXNlbnRhdGlvbi1zZWxlY3Rpb24tdXRpbGl0aWVzLnRzIiwid2VicGFjazovLy8uL0xheW91dC9QcmVzZW50YXRpb25NZW51L1ByZXNlbnRhdGlvblNldHRpbmdzL0Rpc3Byb3BvcnRpb25hbGl0eVNlbGVjdC50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbk1lbnUvUHJlc2VudGF0aW9uU2V0dGluZ3MvTm9TZWF0c0NoZWNrYm94LnRzeCIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvUHJlc2VudGF0aW9uTWVudS9QcmVzZW50YXRpb25TZXR0aW5ncy9Db21wYXJpc29uQ2hlY2tib3gudHN4Iiwid2VicGFjazovLy8uL0xheW91dC9QcmVzZW50YXRpb25NZW51L1ByZXNlbnRhdGlvblNldHRpbmdzL0ZpbHRlcnNDaGVja2JveC50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbk1lbnUvUHJlc2VudGF0aW9uU2V0dGluZ3MvTWVyZ2VEaXN0cmljdHNDaGVja2JveC50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbk1lbnUvUHJlc2VudGF0aW9uU2V0dGluZ3MvVXNlMjAyMURpc3RyaWJ1dGlvbkNoZWNrYm94LnRzeCIsIndlYnBhY2s6Ly8vLi9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L0xheW91dC50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbi9FbGVjdGlvbk92ZXJ2aWV3L0VsZWN0aW9uQ29tcGFyaXNvbi50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbi9EaXN0cmljdE92ZXJ2aWV3L1Z1bG5lcmFibGVEaXN0cmljdFNlYXRUZXh0LnRzeCIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvUHJlc2VudGF0aW9uL1NpbmdsZURpc3RyaWN0L0Rpc3RyaWN0U2VsZWN0LnRzeCIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvUHJlc2VudGF0aW9uL1NpbmdsZURpc3RyaWN0L0luZm9Cb3gudHN4Iiwid2VicGFjazovLy8uL0xheW91dC9OYXZpZ2F0aW9uL0Nvbm5lY3RlZE5hdmlnYXRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L05hdmlnYXRpb24vTmF2aWdhdGlvbi50c3giLCJ3ZWJwYWNrOi8vLy4vTGF5b3V0L1ByZXNlbnRhdGlvbk1lbnUvUHJlc2VudGF0aW9uU2VsZWN0aW9uL0Nvbm5lY3RlZFByZXNlbnRhdGlvblNlbGVjdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25EaXNwbGF5LnRzeCIsIndlYnBhY2s6Ly8vLi9MYXlvdXQvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb24udHN4Iiwid2VicGFjazovLy8uL0xheW91dC9UdXRvcmlhbC9UdXRvcmlhbC50c3giLCJ3ZWJwYWNrOi8vLy4vc3RvcmUvdmVyc2lvbi50cyIsIndlYnBhY2s6Ly8vLi9yZXF1ZXN0ZWQtZGF0YS9yZXF1ZXN0ZWQtZGF0YS11dGlsaXRpZXMudHMiLCJ3ZWJwYWNrOi8vLy4vbWFpbi50c3giXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImV4ZWN1dGVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJkZWZlcnJlZE1vZHVsZXMiLCJhcHBseSIsImNoZWNrRGVmZXJyZWRNb2R1bGVzIiwicmVzdWx0IiwiZGVmZXJyZWRNb2R1bGUiLCJmdWxmaWxsZWQiLCJqIiwiZGVwSWQiLCJzcGxpY2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicyIsImluc3RhbGxlZE1vZHVsZXMiLCIwIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicCIsImpzb25wQXJyYXkiLCJ3aW5kb3ciLCJvbGRKc29ucEZ1bmN0aW9uIiwic2xpY2UiLCJQcmVzZW50YXRpb25UeXBlIiwiRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXgiLCJQcmVzZW50YXRpb25NZW51QWN0aW9uVHlwZSIsImluaXRpYWxpemVQcmVzZW50YXRpb24iLCJ0eXBlIiwiSU5JVElBTElaRV9QUkVTRU5UQVRJT04iLCJpbml0aWFsUHJlc2VudGF0aW9uIiwiRWxlY3Rpb25UYWJsZSIsImRlY2ltYWxzIiwiZGVjaW1hbHNOdW1iZXIiLCJzaG93UGFydGllc1dpdGhvdXRTZWF0cyIsImNoYW5nZVByZXNlbnRhdGlvbiIsInByZXNlbnRhdGlvblNlbGVjdGVkIiwiQ0hBTkdFX1BSRVNFTlRBVElPTiIsImNoYW5nZURlY2ltYWxzIiwiQ0hBTkdFX0RFQ0lNQUxTIiwiY2hhbmdlU2hvd1BhcnRpZXNOb1NlYXRzIiwic2hvd1BhcnRpZXNOb1NlYXRzIiwiU0hPV19QQVJUSUVTX05PX1NFQVRTIiwic2VsZWN0RGlzdHJpY3QiLCJTRUxFQ1RfRElTVFJJQ1QiLCJkaXN0cmljdFNlbGVjdGVkIiwiY2hhbmdlRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXgiLCJpbmRleCIsIkNIQU5HRV9ESVNQUk9QT1JUSU9OQUxJVFlfSU5ERVgiLCJ0b2dnbGVTaG93Q29tcGFyaXNvbiIsInNob3dDb21wYXJpc29uIiwiVE9HR0xFX1NIT1dfQ09NUEFSSVNPTiIsInRvZ2dsZVNob3dGaWx0ZXJzIiwic2hvd0ZpbHRlcnMiLCJUT0dHTEVfU0hPV19GSUxURVJTIiwidG9nZ2xlTWVyZ2VEaXN0cmljdHMiLCJtZXJnZURpc3RyaWN0cyIsIlRPR0dMRV9NRVJHRV9ESVNUUklDVFMiLCJ0b2dnbGVVc2UyMDIxRGlzdHJpYnV0aW9uIiwidXNlMjAyMURpc3RyaWJ1dGlvbiIsIlRPR0dMRV9VU0VfMjAyMV9ESVNUUklCVVRJT04iLCJ0b1N1bSIsImFjY3VtdWxhdG9yIiwiY3VycmVudCIsInRvTWVhbiIsImFycmF5IiwidG9BYnNvbHV0ZU1lYW4iLCJ0b01heCIsInRvTWluIiwiaGFuZGxlU2VsZWN0Q2hhbmdlIiwib25DaGFuZ2UiLCJldmVudCIsInRhcmdldCIsInNlbGVjdEZpbHRlcldpdGhPcHRpb25zIiwib3B0aW9ucyIsImZpbHRlciIsImNsYXNzTmFtZSIsIm1hcCIsIm9wdGlvbiIsImFsbEdyZWF0ZXJUaGFuRXF1YWxzTWV0aG9kIiwicm93cyIsImlkIiwiemVyb05vdFplcm9GaWx0ZXJNZXRob2QiLCJ0aHJlc2hvbGRGaWx0ZXJNZXRob2QiLCJ0aHJlc2hvbGQiLCJwb3NpdGl2ZU9yTmVnYXRpdmVGaWx0ZXJNZXRob2QiLCJjYXNlSW5zZW5zaXRpdmVGaWx0ZXJNZXRob2QiLCJwaXZvdElkIiwibG93ZXJDYXNlSW5wdXQiLCJ0b0xvd2VyQ2FzZSIsIlN0cmluZyIsInN0YXJ0c1dpdGgiLCJub3J3ZWdpYW4iLCJwYWdlVGV4dCIsImxvYWRpbmdUZXh0IiwibmV4dFRleHQiLCJwcmV2aW91c1RleHQiLCJub0RhdGFUZXh0Iiwib2ZUZXh0Iiwicm93c1RleHQiLCJub3J3ZWdpYW5MZXZlbGluZyIsImNoZWNrRXhoYXVzdGl2ZWx5Iiwicm91bmROdW1iZXIiLCJyb3VuZGVyIiwiTWF0aCIsInBvdyIsInJvdW5kIiwiY2FsY3VsYXRlUGVyY2VudCIsInRvdGFsIiwiVWlBY3Rpb25UeXBlIiwidG9nZ2xlSGFtYnVyZ2VyIiwiaGFtYnVyZ2VyRXhwYW5kZWQiLCJUT0dHTEVfSEFNQlVSR0VSX0VYUEFOREVEIiwiaGlkZVR1dG9yaWFsIiwiSElERV9UVVRPUklBTCIsImFkZE5vdGlmaWNhdGlvbiIsIm5vdGlmaWNhdGlvbiIsIkFERF9OT1RJRklDQVRJT04iLCJyZW1vdmVOb3RpZmljYXRpb24iLCJSRU1PVkVfTk9USUZJQ0FUSU9OIiwiaWxsZWdhbFBhcnR5Q29kZXMiLCJTZXQiLCJjb25zdHJ1Y3REaXN0cmljdFJlc3VsdHMiLCJkaXN0cmljdFNlYXRzIiwiZGlzdHJpY3RWb3RlcyIsInRvdGFsVm90ZXMiLCJkaXN0cmljdFJlc3VsdHMiLCJkaXN0cmljdCIsImxldmVsaW5nU2VhdHMiLCJ0b3RhbFNlYXRzIiwidm90ZXMiLCJwZXJjZW50Vm90ZXMiLCJ2b3Rlc1BlclNlYXQiLCJkaXN0cmljdFNlYXRSZXN1bHQiLCJwYXJ0eVJlc3VsdHMiLCJjb25zdHJ1Y3RQYXJ0eVJlc3VsdHMiLCJwYXJ0eU1hcCIsInZvdGUiLCJwYXJ0eSIsInBhcnR5Q29kZSIsInBhcnR5TmFtZSIsInByb3BvcnRpb25hbGl0eSIsImNvbnN0cnVjdERpc3RyaWN0UGFydHlSZXN1bHRzIiwiZGlzdHJpY3RQYXJ0eVJlc3VsdHMiLCJnZXRWb3Rlc1BlckRpc3RyaWN0Iiwidm90ZUNvdW50IiwiZGlzdHJpYnV0ZVNlYXRzIiwiYWxnb3JpdGhtIiwiZmlyc3REaXZpc29yIiwiZGlzdHJpY3RUaHJlc2hvbGQiLCJudW1TZWF0cyIsInJlc3VsdHMiLCJhdmVyYWdlVm90ZXNQZXJTZWF0IiwiaXNMYXJnZXN0RnJhY3Rpb25BbGdvcml0aG0iLCJlbGVjdGlvbk51bWJlciIsImdldEVsZWN0aW9uTnVtYmVyIiwicGFydHlWb3RlcyIsInJlc3VsdEFycmF5VG9EaWN0aW9uYXJ5Iiwic2VhdHNXb24iLCJjdXJyZW50U2VhdHNXb24iLCJzZWF0UmVzdWx0cyIsInVuZGVmaW5lZCIsInNlYXRSZXN1bHQiLCJzZWF0SW5kZXgiLCJ3aW5uZXIiLCJ0aWVkU2VhdFdpbm5lcnMiLCJxdW90aWVudCIsImRlbm9taW5hdG9yIiwiY3VycmVudERlbm9taW5hdG9yIiwiZ2V0RGVub21pbmF0b3IiLCJjdXJyZW50UGFydHlSZXN1bHQiLCJjYWxjdWxhdGVBZGp1c3RlZFF1b3RpZW50IiwiY2FsY3VsYXRlUXVvdGllbnQiLCJoYXMiLCJ1cGRhdGVXaW5uZXJzIiwid2lubmVycyIsImN1cnJlbnRQYXJ0eSIsIm51bWJlck9mU2VhdHNBc3NpZ25lZCIsIlNBSU5URV9MQUdVRSIsIkRfSE9ORFQiLCJMQVJHRVNUX0ZSQUNUSU9OX0hBUkUiLCJMQVJHRVNUX0ZSQUNUSU9OX0RST09QIiwiTEFSR0VTVF9GUkFDVElPTl9IQUdFTkJBQ0hfQklTQ0hPRkYiLCJVTkRFRklORUQiLCJjb25zb2xlIiwiZXJyb3IiLCJOdW1iZXIiLCJNSU5fU0FGRV9JTlRFR0VSIiwiZmxvb3IiLCJ0b1N0cmluZyIsImNhbGN1bGF0ZVByb3BvcnRpb25hbGl0eSIsInBlcmNlbnRTZWF0cyIsImNvdW50eSIsInRvdGFsRGlzdHJpY3RTZWF0cyIsImZpbmFsaXplRGlzdHJpY3RDYWxjdWxhdGlvbnMiLCJjYWxjdWxhdGVGaW5hbFF1b3RpZW50cyIsImFkanVzdGVkIiwiZmluYWxRdW90aWVudHMiLCJkaXN0cmljdE5hbWUiLCJsZXZlbGxpbmdTZWF0Um91bmRzIiwiZm9yRWFjaCIsIndvbkxldmVsbGluZ1NlYXQiLCJzb3J0TGV2ZWxpbmdTZWF0cyIsInNvcnQiLCJ2IiwicmFuZG9tIiwiZ2VuZXJhdGVMZXZlbGluZ1NlYXRBcnJheSIsImxldmVsaW5nUGFydHlDb2RlcyIsInVzZUFkanVzdGVkUXVvdGllbnQiLCJjb3VudHlOYW1lIiwicGFydHlSZXN1bHQiLCJzZWF0Iiwic2VhdE51bWJlciIsInF1b3RpZW50TnVtYmVyIiwicmVzdWx0RGljdCIsImdldEFsZ29yaXRobVR5cGUiLCJnZXRBbGdvcml0aG1OYW1lIiwiZ2V0QWxnb3JpdGhtTmFtZUZyb21UeXBlIiwiZ2V0QWxnb3JpdGhtVHlwZVN0cmluZyIsImlzUXVvdGllbnRBbGdvcml0aG0iLCJzaG91bGRBcHBseTIwMDVSZWZvcm0iLCJ5ZWFyIiwiR2xvYmFsQWN0aW9uVHlwZSIsImNsZWFyU3RhdGUiLCJDTEVBUl9TVEFURSIsImNvcHlEaWN0aW9uYXJ5IiwiZGljdGlvbmFyeSIsImNvcHkiLCJlbnRyeSIsImRpY3Rpb25hcnlUb0FycmF5IiwicmF3RGljdGlvbmFyeVRvRGljdGlvbmFyeSIsInJhd0RpY3Rpb25hcnkiLCJkaWN0IiwiZ2V0UGFydHlUYWJsZURhdGEiLCJudW1iZXJPZkRlY2ltYWxzIiwiZmlsdGVyZWRSZXN1bHRzIiwicm91bmRlZFJlc3VsdHMiLCJnZXREaXN0cmljdFRhYmxlRGF0YSIsImRpc3RyaWN0UmVzdWx0IiwiZ2V0U2VhdERpc3RyaWJ1dGlvbkRhdGEiLCJuZXdEaXN0cmljdFJlc3VsdHMiLCJnZXRMb2NhbFNlYXREaXN0cmlidXRpb24iLCJnZXRTZWF0c1BlclBhcnR5RGF0YSIsInJvdW5kUGFydHlSZXN1bHRzIiwicmVtb3ZlU2VhdER1cGxpY2F0ZXMiLCJzZWF0cyIsImV4aXN0aW5nU2VhdHNTZXQiLCJ1bmlxdWVTZWF0cyIsImFkZCIsImZsYXR0ZW5QYXJ0eVJlc3RRdW90aWVudHMiLCJwcnFzIiwibGV2ZWxsaW5nU2VhdHMiLCJwcnEiLCJmbGF0dGVuQW55IiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5Iiwic29ydFNlYXRzQnlOdW1iZXIiLCJzb3J0ZWRTZWF0cyIsImEiLCJiIiwiZ2V0Um91bmRzQXNzaWduZWRTZWF0cyIsInJvdW5kcyIsIlJlcXVlc3RlZERhdGFBY3Rpb25UeXBlIiwiaW5pdGlhbGl6ZVJlcXVlc3RlZFZvdGVzIiwiSU5JVElBTElaRV9SRVFVRVNURURfVk9URVMiLCJpbml0aWFsaXplUmVxdWVzdGVkTWV0cmljcyIsIm1ldHJpY3MiLCJJTklUSUFMSVpFX1JFUVVFU1RFRF9NRVRSSUNTIiwiaW5pdGlhbGl6ZVJlcXVlc3RlZFBhcmFtZXRlcnMiLCJwYXJhbWV0ZXJzIiwiSU5JVElBTElaRV9SRVFVRVNURURfUEFSQU1FVEVSUyIsImluaXRpYWxpemVSZXF1ZXN0ZWRQYXJ0eU1hcCIsIklOSVRJQUxJWkVfUkVRVUVTVEVEX1BBUlRZX01BUCIsImRpc3RyaWN0TWFwIiwiTWFwIiwibWVyZ2VWb3RlRGlzdHJpY3RzIiwiZ3JvdXBWb3RlcyIsImZpbmlzaGVkVm90ZXMiLCJtZXJnZWRWb3RlcyIsIm1lcmdlVm90ZXMiLCJjb25jYXQiLCJncm91cGVkVm90ZXMiLCJjdXJyZW50Vm90ZSIsIm5ld05hbWUiLCJzZXQiLCJ2b3RlTWFwIiwiXyIsIm1lcmdlZFBhcnR5UmVzdWx0cyIsInJlZHVjZSIsInZvdGVzUmVkdWNlciIsImVsZWN0aW9uVHlwZSIsImVsZWN0aW9uWWVhciIsIm1lcmdlTWV0cmljRGlzdHJpY3RzIiwiZ3JvdXBNZXRyaWNzIiwiZmluaXNoZWRNZXRyaWNzIiwibWVyZ2VkTWV0cmljcyIsIm1lcmdlTWV0cmljcyIsImdyb3VwZWRNZXRyaWNzIiwiY3VycmVudE1ldHJpYyIsImRpc3RyaWN0TWV0cmljcyIsIm1ldHJpY1JlZHVjZXIiLCJhcmVhIiwicG9wdWxhdGlvbiIsImJ1aWxkRGlzdHJpY3RSZXN1bHRzIiwibWV0cmljIiwic3VtQWxsVm90ZXMiLCJwYXlsb2FkIiwibmF0aW9uYWxQYXJ0eVJlc3VsdHMiLCJjYWxjdWxhdGVQZXJjZW50YWdlcyIsImRpc3RyaWJ1dGVEaXN0cmljdFNlYXRzT25EaXN0cmljdHMiLCJhcmVhRmFjdG9yIiwibnVtRGlzdHJpY3RTZWF0cyIsImJhc2VWYWx1ZXMiLCJkZW5vbWluYXRvckZ1bmN0aW9uIiwiZGlzdHJpY3RTZWF0c05vTGV2ZWxpbmdTZWF0cyIsInN1YnRyYWN0TGV2ZWxpbmdTZWF0cyIsImFueU5lZ2F0aXZlU2VhdHMiLCJzZWF0TWFwcGluZyIsImNvcHlNYXBwaW5nIiwiZGlzdHJpYnV0ZUxldmVsaW5nU2VhdHNPbkRpc3RyaWN0cyIsImZpbmlzaGVkRGlzdHJpY3RzIiwicGFydHlSZXN0UXVvdGllbnRzIiwicGFydHlTZWF0cyIsInF1b3RpZW50SW5kZXgiLCJudW1iZXJPZlNlYXRzIiwiaW5jbHVkZXMiLCJkaXN0cmlidXRlTGV2ZWxpbmdTZWF0c09uRGlzdHJpY3RzUHJlMjAwNSIsImJyZWFrVGllcyIsImJhc2VWYWx1ZSIsIndpbm5lcnNDb3B5IiwibnVtZXJhdG9ycyIsIm1heE51bWVyYXRvciIsIm1heCIsIml0ZW0iLCJBbGdvcml0aG1UeXBlIiwiQ29tcHV0YXRpb25BY3Rpb25UeXBlIiwiaW5pdGlhbGl6ZUNvbXB1dGF0aW9uIiwiZmlsdGVyVm90ZXMiLCJmaWx0ZXJNZXRyaWNzIiwiZmlsdGVyUGFyYW1ldGVycyIsImZpbmQiLCJwYXJhbWV0ZXIiLCJlbGVjdGlvblRocmVzaG9sZCIsIklOSVRJQUxJWkVfQ09NUFVUQVRJT04iLCJ1cGRhdGVDb21wdXRhdGlvbiIsIlVQREFURV9DT01QVVRBVElPTiIsInNhdmVDb21wYXJpc29uIiwiU0FWRV9DT01QVVRBVElPTiIsInJlc2V0U2F2ZWRDb21wdXRhdGlvbiIsIlJFU0VUX1NBVkVEX0NPTVBVVEFUSU9OIiwidXBkYXRlSGlzdG9yaWNhbCIsIlVQREFURV9ISVNUT1JJQ0FMIiwiaGlzdG9yaWNhbCIsIkNvbXB1dGF0aW9uTWVudUFjdGlvblR5cGUiLCJpbml0aWFsaXplQ29tcHV0YXRpb25NZW51IiwiZWxlY3Rpb25ZZWFycyIsIklOSVRJQUxJWkVfQ09NUFVUQVRJT05fTUVOVSIsImF1dG9Db21wdXRlIiwidXBkYXRlQ29tcHV0YXRpb25NZW51Iiwic2V0dGluZ3NQYXlsb2FkIiwiVVBEQVRFX0NPTVBVVEFUSU9OX01FTlUiLCJzYXZlU2V0dGluZ3MiLCJTQVZFX1NFVFRJTkdTIiwicmVzZXRTYXZlZFNldHRpbmdzIiwiUkVTRVRfU0FWRURfU0VUVElOR1MiLCJ0b2dnbGVBdXRvQ29tcHV0ZSIsIlRPR0dMRV9BVVRPX0NPTVBVVEUiLCJOb3RpZmljYXRpb25UeXBlIiwidW5sb2FkZWRQYXJhbWV0ZXJzIiwidW5sb2FkZWRTdGF0ZSIsImxldmVsaW5nU2VhdERpc3RyaWJ1dGlvbiIsImNvbXBhcmlzb24iLCJjb21wdXRhdGlvbkRlZmF1bHRzIiwiRmlyc3REaXZpc29yIiwic2hvdWxkRGlzdHJpYnV0ZURpc3RyaWN0U2VhdHMiLCJnZXRWb3Rlc1RvVnVsbmVyYWJsZVNlYXRNYXAiLCJwYXJ0eUNvZGVUb1Z1bG5lcmFibGVTZWF0c01hcCIsImxhc3RTZWF0IiwicHIiLCJjdXJyZW50TWFyZ2luQnlWb3RlcyIsImdldFF1b3RpZW50c1RvVnVsbmVyYWJsZVNlYXRNYXAiLCJwYXJ0eUNvZGVUb1F1b3RpZW50TWFwIiwiZ2V0TW9zdFZ1bG5lcmFibGVTZWF0QnlRdW90aWVudCIsInZ1bG5lcmFibGVEaXN0cmljdFNlYXRzIiwiZ2V0VnVsbmVyYWJsZVNlYXRCeVF1b3RpZW50IiwibW9yZVZvdGVzVG9XaW4iLCJydW5uZXJVcCIsImdldFZ1bG5lcmFibGVTZWF0QnlWb3RlcyIsIm1hcmdpbnMiLCJzb3J0ZWQiLCJsb2FkU3RhdGUiLCJzZXJpYWxpemVkU3RhdGUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwibG9nIiwiSlNPTiIsInBhcnNlIiwiZXJyIiwic2F2ZVN0YXRlIiwic3RhdGUiLCJzdHJpbmdpZnkiLCJzZXRJdGVtIiwibG9hZFZlcnNpb24iLCJzZXJpYWxpemVkVmVyc2lvbiIsInNhdmVWZXJzaW9uIiwidmVyc2lvbiIsImRpc3RyaWJ1dGlvbkJ5UXVvdGllbnQiLCJudW1iZXJUb0Rpc3RyaWJ1dGUiLCJkaXN0cmlidXRlT24iLCJ1cGRhdGVkRGlzdHJpYnV0aW9uIiwicXVvdGllbnREaWN0aW9uYXJ5IiwicG9wdWxhdGVRdW90aWVudHMiLCJkaXN0cmlidXRpb25JbmRleCIsImdldFdpbm5lciIsImluc2VydFBhcnR5Iiwic2FpbnRlTGFndWVzIiwiZEhvbmR0IiwibGFyZ2VzdEZyYWN0aW9uIiwiZGlzdHJpYnV0ZVdob2xlU2VhdHMiLCJyYXRlZFBhcnRpZXMiLCJyZW1haW5pbmdTZWF0cyIsInNlYXRTdXJwbHVzIiwicG9wVG9wIiwidXBkYXRlZFNlYXRzIiwic2VhdHNEaXN0cmlidXRlZCIsImRpc3RyaWJ1dGlvblZhbHVlIiwicmVtYWluZGVyIiwiaW5zZXJ0IiwiaXNTdWNjZXNzZnVsIiwicmVzcG9uc2VDb2RlIiwicGFyc2VSZXRyeUhlYWRlclRvTXMiLCJyZXNwb25zZSIsImRlZmF1bHREZWxheSIsInJldHJ5SGVhZGVyIiwiaGVhZGVycyIsIm51bVNlY29uZHMiLCJpc0Zpbml0ZSIsInJldHJ5RGF0ZSIsIkRhdGUiLCJpc05hTiIsIndhaXRUaW1lIiwibm93IiwiYXR0ZW1wdFJlcXVlc3QiLCJ1cmkiLCJhdHRlbXB0TnVtYmVyIiwiZmV0Y2giLCJjYXRjaCIsInJlYXNvbiIsInN0YXR1cyIsImpzb24iLCJFcnJvciIsInN0YXR1c1RleHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJyZXF1ZXN0IiwiZGF0YUxvYWRlZCIsImVuYWJsZUF1dG9TYXZlIiwiY3VycmVudFByZXNlbnRhdGlvbiIsImRpc3Byb3BvcnRpb25hbGl0eUluZGV4IiwiTE9PU0VNT1JFX0hBTkJZIiwiV0lLSVVSTCIsIm9uWWVhckNoYW5nZSIsIm5leHRZZWFyIiwicGFyc2VJbnQiLCJwcm9wcyIsImRpc3RyaWJ1dGlvblllYXIiLCJyZXNldEhpc3RvcmljYWwiLCJjb21wdXRhdGlvblBheWxvYWQiLCJ1cGRhdGVDYWxjdWxhdGlvbiIsInJlc2V0Q29tcGFyaXNvbiIsInJlc2V0VG9IaXN0b3JpY2FsU2V0dGluZ3MiLCJvbkFsZ29yaXRobUNoYW5nZSIsImFsZ29yaXRobVR5cGUiLCJ1cGRhdGVTZXR0aW5ncyIsIm9uRmlyc3REaXZpc29yQ2hhbmdlIiwic3RyaW5nVmFsdWUiLCJudW1lcmljVmFsdWUiLCJvblRocmVzaG9sZENoYW5nZSIsIm9uRGlzdHJpY3RUaHJlc2hvbGRDaGFuZ2UiLCJvbkRpc3RyaWN0U2VhdHNDaGFuZ2UiLCJvbkxldmVsaW5nU2VhdHNDaGFuZ2UiLCJvbkFyZWFGYWN0b3JDaGFuZ2UiLCJjaGVja2VkIiwiY29tcHV0ZU1hbnVhbGx5IiwicGFyc2VGbG9hdCIsInJlc3RvcmVUb0RlZmF1bHQiLCJjb21wUGF5bG9hZCIsInNldHRpbmdzQ2hhbmdlZCIsInNob3VsZEhpZGVGaXJzdERpdmlzb3IiLCJ0aGlzIiwicmVuZGVyIiwidG9vbHRpcCIsInRleHQiLCJ1cmwiLCJkZWZhdWx0QWxnb3JpdGhtIiwiaGlkZGVuIiwidGl0bGUiLCJtaW4iLCJkZWZhdWx0VmFsdWUiLCJvcmlnaW5hbFZhbHVlIiwiaW50ZWdlciIsImxhYmVsIiwiaXNIaWRkZW5Ub3VjaCIsImhpZ2hsaWdodCIsIm1hcFN0YXRlVG9Qcm9wcyIsInByZXNlbnRhdGlvbk1lbnVTdGF0ZSIsImNvbXB1dGF0aW9uU3RhdGUiLCJyZXF1ZXN0ZWREYXRhU3RhdGUiLCJzZXR0aW5nc1N0YXRlIiwiZm9yY2VDb21wdXRlIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJ0b2dnbGVTaG93UGFydGllc1dpdGhvdXRTZWF0cyIsInVwZGF0ZUNhbGN1bGF0aW9uQWN0aW9uIiwiQ29ubmVjdGVkUHJlc2VudGF0aW9uU2V0dGluZ3MiLCJvblRvZ2dsZU1lcmdlRGlzdHJpY3RzIiwib25Ub2dnbGVVc2UyMDIxRGlzdHJpYnV0aW9uIiwibWV0cmljc1llYXIiLCJuZWVkc0RlY2ltYWxzIiwiRGlzdHJpY3RUYWJsZSIsIlNpbmdsZURpc3RyaWN0IiwiUmVtYWluZGVyUXVvdGllbnRzIiwic2hvd0Rpc3Byb3BvcnRpb25hbGl0eVNlbGVjdCIsInNob3dEaXN0cmljdFNlbGVjdCIsInNob3dOb1NlYXRzQ2hlY2tib3giLCJMZXZlbGxpbmdTZWF0cyIsInNob3dVc2UyMDIxRGlzdHJpYnV0aW9uIiwidG9nZ2xlQ29tcGFyaXNvbiIsInNsaWRlciIsImFjY2Vzc2liaWxpdHlMYWJlbCIsIm9uQ2xpY2siLCJvblByZXNzIiwidWkiLCJzaG93VHV0b3JpYWwiLCJuZXdOb3RpZmljYXRpb25JZCIsIm5vdGlmaWNhdGlvbklkIiwiZnVsbE5vdGlmaWNhdGlvbkRhdGEiLCJjb3BpZWROb3RpZmljYXRpb25zIiwibm90aWZpY2F0aW9ucyIsImZpbHRlcmVkTm90aWZpY2F0aW9ucyIsImdldFNpbmdsZURpc3RyaWN0RGF0YSIsInJvdW5kZWREYXRhIiwiZ2V0UGFydHlDb2RlcyIsInBhcnR5Q29kZXMiLCJnZXRQYXJ0eU5hbWVzIiwicGFydHlOYW1lcyIsImdldERpc3RyaWN0cyIsImRpc3RyaWN0cyIsImdldFdpZGVzdFN0cmluZ1dpZHRoIiwic3RyaW5ncyIsImdldExldmVsbGluZ1NlYXRzIiwiZmxhdHRlbmVkIiwiYXNzaWduZWRTZWF0cyIsIm5vRHVwbGljYXRlU2VhdHMiLCJjb21wYXJpc29uUGFydHlSZXN1bHRzIiwiY3VycmVudFBhcnR5UmVzdWx0cyIsInBhcnR5TmFtZVdpZHRoIiwiZGlzdHJpY3RXaWR0aCIsIlNlYXREaXN0cmlidXRpb24iLCJsZXZlbGxpbmdTZWF0UXVvdGllbnRzIiwibWFrZURhdGEiLCJ3b25TZWF0IiwibW9kaWZpZWQiLCJtb2RpZmllZFF1b3RpZW50cyIsImRpc3RyaWN0UXVvdGllbnRzIiwiZ2V0Q29sdW1ucyIsImNvbHVtbnMiLCJlbGVtZW50IiwiSGVhZGVyIiwiYWNjZXNzb3IiLCJtaW5XaWR0aCIsIkNlbGwiLCJyb3ciLCJ0b0ZpeGVkIiwic3R5bGUiLCJ0ZXh0QWxpZ24iLCJzb3J0YWJsZSIsImxvY2FsZUNvbXBhcmUiLCJ1bnNoaWZ0IiwiZ2V0QWRqdXN0bWVudCIsImVuZGluZyIsImRlZmF1bHRQYWdlU2l6ZSIsInNob3dQYWdlU2l6ZU9wdGlvbnMiLCJyZXZlcnNlRGljdCIsInBhaXIiLCJtYXhWYWx1ZSIsImVudHJpZXNUaWVkVG9NYXhWYWx1ZSIsInRvcCIsInByaW50IiwiZ2V0U2VsZWN0aW9uT3B0aW9ucyIsImRpc3BsYXlOYW1lIiwiY2hhbmdlU2VsZWN0aW9uIiwiY3VycmVudFNlbGVjdGlvbiIsImRlZmF1bHRQcm9wcyIsImNvbmZpZ3VyZVN0b3JlIiwiaGlzdG9yeSIsImluaXRpYWxTdGF0ZSIsIm1pZGRsZXdhcmUiLCJtYXBBZGQiLCJuZXdNYXAiLCJlbnRyaWVzIiwibWFwQWRkRnJvbUFycmF5IiwiZ2V0S2V5IiwiY3JlYXRlTWFwRnJvbU9iamVjdCIsImRlZmF1bHRTdGF0ZSIsImxvZ2dlciIsInN0b3JlIiwibmV4dCIsImdldFN0YXRlIiwiZGlzdHJpYnV0ZUxldmVsaW5nU2VhdHMiLCJyZXN1bHROYXRpb25hbEZpbHRlciIsIm5hdGlvbmFsRGlzdHJpYnV0aW9uRmlsdGVyIiwia2V5cyIsImZpbmFsTGV2ZWxpbmdTZWF0RGlzdHJpYnV0aW9uIiwibmF0aW9uYWxEaXN0cmlidXRpb24iLCJ3b25MZXZlbGluZ1BhcnR5Q29kZXMiLCJzZWF0c1RvRGlzdHJpYnV0ZSIsImxldmVsaW5nUGFydGllcyIsImZpbHRlcmVkTGV2ZWxpbmdQYXJ0eUNvZGVzIiwiZmluYWxRdW90aWVudExldmVsaW5nU2VhdERpc3RyaWJ1dGlvbiIsImZpbmFsTGFyZ2VzdEZyYWN0aW9uTGV2ZWxpbmdTZWF0RGlzdHJpYnV0aW9uIiwibGFndWVEaG9udCIsImRpc3RyaWJ1dGlvblJlc3VsdCIsImRpc3RyaWN0UmVzdWx0QXJyYXkiLCJwYXJ0eVJlc3VsdEFycmF5IiwidXNlQWRqdXN0ZWRRdW90aWVudHMiLCJjb21wdXRhdGlvbiIsImNoZWNrU3RhdGVMb2FkZWQiLCJyZXF1ZXN0ZWREYXRhIiwiY29tcHV0YXRpb25NZW51IiwidXBkYXRlTnVtZXJpYyIsImlucHV0IiwidmFsaWRhdGVJbnB1dCIsInVwZGF0ZVNsaWRlciIsInNldHRpbmdXYXNDaGFuZ2VkIiwiaHRtbEZvciIsInBsYWNlaG9sZGVyIiwic3RlcCIsInJlZ2V4IiwiUmVnRXhwIiwidGVzdCIsImluZGV4T2YiLCJwcmVmaXgiLCJzdWJzdHJpbmciLCJocmVmIiwicmVsIiwid2lkdGgiLCJoZWlnaHQiLCJ2aWV3Qm94IiwieG1sbnMiLCJmb250U2l6ZSIsIngiLCJ5IiwidHJhbnNmb3JtIiwidXBkYXRlU2V0dGluZ3NBY3Rpb24iLCJpc0NoZWNrZWQiLCJ0b2dnbGVBdXRvQ29tcHV0ZUFjdGlvbiIsInVwZGF0ZUhpc3RvcmljYWxBY3Rpb24iLCJuZXdTZXR0aW5nc1BheWxvYWQiLCJzYXZlU2V0dGluZ3NBY3Rpb24iLCJyZXNldFNhdmVkQ29tcHV0YXRpb25BY3Rpb24iLCJyZXNldFNhdmVkU2V0dGluZ3NBY3Rpb24iLCJzYXZlQ29tcGFyaXNvbkFjdGlvbiIsIkNvbm5lY3RlZENvbXB1dGF0aW9uTWVudSIsInByZXNlbnRhdGlvbk1lbnUiLCJvd25Qcm9wcyIsIkNvbm5lY3RlZFByZXNlbnRhdGlvblNlbGVjdGlvbkJ1dHRvbiIsInVpU3RhdGUiLCJpbml0aWFsaXplU3RhdGUiLCJ2b3Rlc1VyaSIsIm1ldHJpY3NVcmkiLCJwYXJhbWV0ZXJzVXJpIiwieWVhcnNVcmkiLCJwYXJ0eU1hcFVyaSIsInJhd1BhcmFtZXRlcnMiLCJudW1iZXJZZWFycyIsIm1lc3NhZ2UiLCJEQU5HRVIiLCJhZGROb3RpZmljYXRpb25BY3Rpb24iLCJpbml0aWFsaXplUmVxdWVzdGVkVm90ZXNBY3Rpb24iLCJpbml0aWFsaXplUmVxdWVzdGVkTWV0cmljc0FjdGlvbiIsInJhdyIsImluaXRpYWxpemVSZXF1ZXN0ZWRQYXJhbWV0ZXJzQWN0aW9uIiwiaW5pdGlhbGl6ZVJlcXVlc3RlZFBhcnR5TWFwQWN0aW9uIiwic3RyaW5nWWVhcnMiLCJpbml0aWFsaXplU2V0dGluZ3NBY3Rpb24iLCJpbml0aWFsaXplUHJlc2VudGF0aW9uQWN0aW9uIiwiaW5pdGlhbGl6ZUNvbXB1dGF0aW9uQWN0aW9uIiwiY2xlYXJTdGF0ZUFjdGlvbiIsInNob3dOb3RpZmljYXRpb24iLCJDb25uZWN0ZWRMYXlvdXQiLCJDb25uZWN0ZWRQcmVzZW50YXRpb24iLCJoaWdoZXN0Vm90aW5nUG93ZXIiLCJsb3dlc3RWb3RpbmdQb3dlciIsImF2ZXJhZ2VWb3RpbmdQb3dlciIsImhpZ2hlc3RWc0F2ZXJhZ2VJblBlcmNlbnRhZ2UiLCJsb3dlc3RWc0F2ZXJhZ2VJblBlcmNlbnRhZ2UiLCJtb3N0V2VpZ2h0ZWREaXN0cmljdCIsImxlYXN0V2VpZ2h0ZWREaXN0cmljdCIsIm1vc3RWdWxuZXJhYmxlIiwicGFnZVNpemUiLCJzaG93UGFnaW5hdGlvbkJvdHRvbSIsIkZvb3RlciIsImN1cnJlbnRzIiwiY29tcGFyaXNvbnMiLCJzaG91bGRDYWxjdWxhdGVEaWZmZXJlbmNlIiwiZGlmZmVyZW5jZSIsImRhdHVtIiwidG90YWxTZWF0RGlmZmVyZW5jZSIsInNob3VsZFNob3dEaWZmZXJlbmNlIiwic29tZSIsInByb3BvcnRpb25hbGl0aWVzIiwiTFNxIiwic3FydCIsIkxIIiwiYWJzIiwiR0FMTEFHSEVSIiwiYWxsVHJ1ZUZhbHNlT3B0aW9ucyIsInRocmVzaG9sZE9wdGlvbnMiLCJtdWx0aVNvcnQiLCJmaWx0ZXJhYmxlIiwic2hvd1BhZ2luYXRpb24iLCJmaWx0ZXJNZXRob2QiLCJvcmlnaW5hbCIsIkZpbHRlciIsInNob3ciLCJkZWZhdWx0U29ydGVkIiwiZGVzYyIsInF1b3RpZW50c0FycmF5IiwicGFydGllcyIsInF1b3RpZW50cyIsInNlYXREYXRhIiwiY3VycmVudEluZGV4IiwiZmluZEluZGV4IiwibW9zdFNlYXRzSW5kZXgiLCJmaW5kTW9zdFNlYXRzV29uIiwibWluSGVpZ2h0IiwiZ2VuZXJhdGVDb2x1bW5zIiwicGFydHlJbmRleCIsImdldERpc3RyaWN0UmVzdWx0IiwiZ2V0RGF0YSIsImdldExhc3RTZWF0IiwiY3VycmVudERpc3RyaWN0UmVzdWx0IiwiY2FsY3VsYXRlVnVsbmVyYWJsZSIsInZ1bG5lcmFibGVNYXAiLCJxdW90aWVudE1hcCIsInZ1bG5lcmFibGUiLCJ2dWxuZXJhYmxlVm90ZXMiLCJjbG9zZSIsImNsb3NlTm90aWZpY2F0aW9uQWN0aW9uIiwiQ29ubmVjdGVkTm90aWZpY2F0aW9uRGlzcGxheSIsImNsb3NlVHV0b3JpYWwiLCJoaWRlVHV0b3JpYWxBY3Rpb24iLCJDb25uZWN0ZWRUdXRvcmlhbCIsInJvb3RSZWR1Y2VyIiwidGltZXNXb24iLCJkaXN0cmlidXRpb24iLCJzZXR0dGluZ1dhc0NoYW5nZWQiLCJoaWdobGlnaHRCdXR0b24iLCJzZWxlY3Rpb25Mb29rdXAiLCJnZXRTZWxlY3Rpb25OYW1lIiwic2VsZWN0aW9uIiwiQXBwIiwiY2xvc2VIYW1idXJnZXIiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRDYXRjaCIsImVycm9ySW5mbyIsImNsZWFyIiwibm90aWZpY2F0aW9uVGV4dCIsInBhZ2VMb2FkZXJDbGFzcyIsImNvbXBhcmVkUGFydHlSZXN1bHRzIiwiY29tcGFyYWJsZSIsImRpc3RyaWN0U2VhdHNDb21wYXJpc29uIiwiZGlzdHJpY3RTZWF0c0RpZmZlcmVuY2UiLCJsZXZlbGluZ1NlYXRzQ29tcGFyaXNvbiIsImxldmVsaW5nU2VhdHNEaWZmZXJlbmNlIiwidG90YWxTZWF0c0NvbXBhcmlzb24iLCJ0b3RhbFNlYXRzRGlmZmVyZW5jZSIsInByb3BvcnRpb25hbGl0eUNvbXBhcmlzb24iLCJwcm9wb3J0aW9uYWxpdHlEaWZmZXJlbmNlIiwid2lubmVyUGFydHlDb2RlIiwicnVubmVyVXBQYXJ0eUNvZGUiLCJleHRlbmRlZEluZm8iLCJDb25uZWN0ZWROYXZpZ2F0aW9uIiwiaGFuZGxlSGFtYnVyZ2VyQ2xpY2siLCJ3aWtpVXJsIiwibWVudUJ1dHRvbiIsIm1lbnUiLCJyb2xlIiwiQ29ubmVjdGVkUHJlc2VudGF0aW9uU2VsZWN0aW9uIiwiYnVpbGRDbGFzc1RleHQiLCJiYXNlQ2xhc3MiLCJJTkZPIiwiUFJJTUFSWSIsIlNVQ0NFU1MiLCJXQVJOSU5HIiwiaGFuZGxlQ2xvc2UiLCJtb2RhbENsYXNzIiwianVzdGlmeUNvbnRlbnQiLCJzdGF0ZUlzSW52YWxpZCIsImxvY2FsVmVyc2lvbiIsImlzSW5jb21wYXRpYmxlVmVyc2lvbiIsImNsZWFyQW5kU2F2ZSIsIm1ham9yIiwiY3VycmVudFZlcnNpb24iLCJtaW5vciIsInBhdGNoIiwicmF3QWxnb3JpdGhtVG9BbGdvcml0aG1Db252ZXJ0ZXIiLCJyYXdBbGdvcml0aG0iLCJyYXdQYXJhbWV0ZXJzVG9QYXJhbWV0ZXJzQ29udmVydGVyIiwicGVyc2lzdGVkU3RhdGUiLCJzdWJzY3JpYmUiLCJjdXJyZW50U3RhdGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiYUFDRSxTQUFTQSxFQUFxQkMsR0FRN0IsSUFQQSxJQU1JQyxFQUFVQyxFQU5WQyxFQUFXSCxFQUFLLEdBQ2hCSSxFQUFjSixFQUFLLEdBQ25CSyxFQUFpQkwsRUFBSyxHQUlITSxF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Q0FDM0JsaEIsVUFBV3VwQixFQUFpQ3JJLEVBQWNsaEIsV0FDMURvSyxXQUFZOFcsRUFBYzlXLFdBQzFCNUwsY0FBZTBpQixFQUFjMWlCLGNBQzdCd0ssYUFBY2tZLEVBQWNsWSxhQUM1QkMsYUFBY2lZLEVBQWNqWSxhQUM1QnBLLGNBQWVxaUIsRUFBY3JpQixjQUM3QjVDLFVBQVdpbEIsRUFBY2psQixVQUN6QnlDLFdBQVl3aUIsRUFBY3hpQixhLDZGQWxCbEI2cUIsRSx5S0FTQUUsRSxvakJDTFZDLEVBQWlCLGNBRWpCNU0sRUFBUSxZQUFlWCxRQUFTdU4sR0FFdEM1TSxFQUFNNk0sVUFDRixvQkFBUyxXQUNMLElBQU1DLEVBQWU5TSxFQUFNRSxXQUN2QjRNLEVBQWFsVCxtQkFBbUJuRCxnQkFDaEMsWUFBVXFXLEtBRWYsTUFHUCxTQUNJLGdCQUFDLElBQVEsQ0FBQzlNLE1BQU9BLEdBQ2IsZ0JBQUMsSUFBRyxPQUVSK00sU0FBU0MsZUFBZSxVLDZGQWpCdEJKLEUsb0hBRUE1TSxFIiwiZmlsZSI6ImpzL2FwcC43YTcxMjhlMDExZTJmNDM0NGI4NS5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH07XG5cbiBcdHZhciBkZWZlcnJlZE1vZHVsZXMgPSBbXTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wXCJdID0gd2luZG93W1wid2VicGFja0pzb25wXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBhZGQgZW50cnkgbW9kdWxlIHRvIGRlZmVycmVkIGxpc3RcbiBcdGRlZmVycmVkTW9kdWxlcy5wdXNoKFsxMjUsMV0pO1xuIFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiByZWFkeVxuIFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4iLCJleHBvcnQgZW51bSBQcmVzZW50YXRpb25UeXBlIHtcclxuICAgIERpc3RyaWN0VGFibGUgPSBcIlRBQkxFX0RJU1RSSUNUX09WRVJWSUVXXCIsXHJcbiAgICBFbGVjdGlvblRhYmxlID0gXCJUQUJMRV9FTEVDVElPTl9PVkVSVklFV1wiLFxyXG4gICAgU2VhdERpc3RyaWJ1dGlvbiA9IFwiU0VBVF9ESVNUUklCVVRJT05cIixcclxuICAgIFNpbmdsZURpc3RyaWN0ID0gXCJUQUJMRV9TSU5HTEVfQ09VTlRZXCIsXHJcbiAgICBSZW1haW5kZXJRdW90aWVudHMgPSBcIlRBQkxFX1JFTUFJTkRFUl9RVU9USUVOVFNcIixcclxuICAgIExldmVsbGluZ1NlYXRzID0gXCJUQUJMRV9MRVZFTExJTkdfU0VBVFNfT1ZFUlZJRVdcIixcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXgge1xyXG4gICAgTE9PU0VNT1JFX0hBTkJZID0gXCJMT09TRU1PUkVfSEFOQllfSU5ERVhcIixcclxuICAgIEdBTExBR0hFUiA9IFwiR0FMTEFHSEVSX0lOREVYXCIsXHJcbn1cclxuIiwiaW1wb3J0IHsgUHJlc2VudGF0aW9uVHlwZSwgRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXggfSBmcm9tIFwiLi4vUHJlc2VudGF0aW9uL3ByZXNlbnRhdGlvbi1tb2RlbHNcIjtcclxuaW1wb3J0IHsgQ2xlYXJTdGF0ZSB9IGZyb20gXCIuLi8uLi9yZWR1Y2Vycy9nbG9iYWwtYWN0aW9uc1wiO1xyXG5cclxuLyoqXHJcbiAqIEVudW0gY29udGFpbmluZyBhbGwgcG9zc2libGUgUHJlc2VudGF0aW9uTWVudUFjdGlvbiB0eXBlcy5cclxuICovXHJcbmV4cG9ydCBlbnVtIFByZXNlbnRhdGlvbk1lbnVBY3Rpb25UeXBlIHtcclxuICAgIElOSVRJQUxJWkVfUFJFU0VOVEFUSU9OID0gXCJJTklUSUFMSVpFX1BSRVNFTlRBVElPTlwiLFxyXG4gICAgQ0hBTkdFX1BSRVNFTlRBVElPTiA9IFwiQ0hBTkdFX1BSRVNFTlRBVElPTlwiLFxyXG4gICAgQ0hBTkdFX0RFQ0lNQUxTID0gXCJDSEFOR0VfREVDSU1BTFNcIixcclxuICAgIFNIT1dfUEFSVElFU19OT19TRUFUUyA9IFwiU0hPV19QQVJUSUVTX05PX1NFQVRTXCIsXHJcbiAgICBTRUxFQ1RfRElTVFJJQ1QgPSBcIlNFTEVDVF9ESVNUUklDVFwiLFxyXG4gICAgQ0hBTkdFX0RJU1BST1BPUlRJT05BTElUWV9JTkRFWCA9IFwiQ0hBTkdFX0RJU1BST1BPUlRJT05BTElUWV9JTkRFWFwiLFxyXG4gICAgVE9HR0xFX1NIT1dfQ09NUEFSSVNPTiA9IFwiVE9HR0xFX1NIT1dfQ09NUEFSSVNPTlwiLFxyXG4gICAgVE9HR0xFX1NIT1dfRklMVEVSUyA9IFwiVE9HR0xFX1NIT1dfRklMVEVSU1wiLFxyXG4gICAgVE9HR0xFX01FUkdFX0RJU1RSSUNUUyA9IFwiVE9HR0xFX01FUkdFX0RJU1RSSUNUU1wiLFxyXG4gICAgVE9HR0xFX1VTRV8yMDIxX0RJU1RSSUJVVElPTiA9IFwiVE9HR0xFX1VTRV8yMDIxX0RJU1RSSUJVVElPTlwiLFxyXG59XHJcblxyXG4vKipcclxuICogVHlwZSBjb250YWluaW5nIGFsbCBwb3NzaWJsZSBQcmVzZW50YXRpb25NZW51QWN0aW9ucy5cclxuICovXHJcbmV4cG9ydCB0eXBlIFByZXNlbnRhdGlvbk1lbnVBY3Rpb24gPVxyXG4gICAgfCBJbml0aWFsaXplUHJlc2VudGF0aW9uXHJcbiAgICB8IENoYW5nZVByZXNlbnRhdGlvblxyXG4gICAgfCBDaGFuZ2VEZWNpbWFsc1xyXG4gICAgfCBDaGFuZ2VTaG93UGFydGllc05vU2VhdHNcclxuICAgIHwgU2VsZWN0RGlzdHJpY3RcclxuICAgIHwgQ2hhbmdlRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXhcclxuICAgIHwgVG9nZ2xlU2hvd0NvbXBhcmlzb25cclxuICAgIHwgVG9nZ2xlU2hvd0ZpbHRlcnNcclxuICAgIHwgVG9nZ2xlTWVyZ2VEaXN0cmljdHNcclxuICAgIHwgVG9nZ2xlVXNlMjAyMURpc3RyaWJ1dGlvblxyXG4gICAgfCBDbGVhclN0YXRlO1xyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBmb3IgaW5pdGlhbGl6aW5nIHRoZSBwcmVzZW50YXRpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEluaXRpYWxpemVQcmVzZW50YXRpb24ge1xyXG4gICAgdHlwZTogUHJlc2VudGF0aW9uTWVudUFjdGlvblR5cGUuSU5JVElBTElaRV9QUkVTRU5UQVRJT047XHJcbiAgICBpbml0aWFsUHJlc2VudGF0aW9uOiBQcmVzZW50YXRpb25UeXBlO1xyXG4gICAgZGVjaW1hbHM6IHN0cmluZztcclxuICAgIGRlY2ltYWxzTnVtYmVyOiBudW1iZXI7XHJcbiAgICBzaG93UGFydGllc1dpdGhvdXRTZWF0czogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBjcmVhdG9yIGZvciBpbml0aWFsaXppbmcgdGhlIHByZXNlbnRhdGlvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplUHJlc2VudGF0aW9uKCk6IEluaXRpYWxpemVQcmVzZW50YXRpb24ge1xyXG4gICAgY29uc3QgYWN0aW9uOiBJbml0aWFsaXplUHJlc2VudGF0aW9uID0ge1xyXG4gICAgICAgIHR5cGU6IFByZXNlbnRhdGlvbk1lbnVBY3Rpb25UeXBlLklOSVRJQUxJWkVfUFJFU0VOVEFUSU9OLFxyXG4gICAgICAgIGluaXRpYWxQcmVzZW50YXRpb246IFByZXNlbnRhdGlvblR5cGUuRWxlY3Rpb25UYWJsZSxcclxuICAgICAgICBkZWNpbWFsczogXCIyXCIsXHJcbiAgICAgICAgZGVjaW1hbHNOdW1iZXI6IDIsXHJcbiAgICAgICAgc2hvd1BhcnRpZXNXaXRob3V0U2VhdHM6IHRydWUsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBmb3IgY2hhbmdpbmcgdGhlIHByZXNlbnRhdGlvbi5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2hhbmdlUHJlc2VudGF0aW9uIHtcclxuICAgIHR5cGU6IFByZXNlbnRhdGlvbk1lbnVBY3Rpb25UeXBlLkNIQU5HRV9QUkVTRU5UQVRJT047XHJcbiAgICBwcmVzZW50YXRpb25TZWxlY3RlZDogUHJlc2VudGF0aW9uVHlwZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBjcmVhdG9yIGZvciBjaGFuZ2luZyB0aGUgcHJlc2VudGF0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0gcHJlc2VudGF0aW9uU2VsZWN0ZWQgLSBwcmVzZW50YXRpb24gdG8gY2hhbmdlIHRvLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZVByZXNlbnRhdGlvbihwcmVzZW50YXRpb25TZWxlY3RlZDogUHJlc2VudGF0aW9uVHlwZSk6IENoYW5nZVByZXNlbnRhdGlvbiB7XHJcbiAgICBjb25zdCBhY3Rpb246IENoYW5nZVByZXNlbnRhdGlvbiA9IHtcclxuICAgICAgICB0eXBlOiBQcmVzZW50YXRpb25NZW51QWN0aW9uVHlwZS5DSEFOR0VfUFJFU0VOVEFUSU9OLFxyXG4gICAgICAgIHByZXNlbnRhdGlvblNlbGVjdGVkLFxyXG4gICAgfTtcclxuICAgIHJldHVybiBhY3Rpb247XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gZm9yIGNoYW5naW5nIGRpc3BsYXllZCBkZWNpbWFscy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2hhbmdlRGVjaW1hbHMge1xyXG4gICAgdHlwZTogUHJlc2VudGF0aW9uTWVudUFjdGlvblR5cGUuQ0hBTkdFX0RFQ0lNQUxTO1xyXG4gICAgZGVjaW1hbHM6IHN0cmluZztcclxuICAgIGRlY2ltYWxzTnVtYmVyOiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gY3JlYXRvciBmb3IgY2hhbmdpbmcgZGlzcGxheWVkIGRlY2ltYWxzLlxyXG4gKlxyXG4gKiBAcGFyYW0gZGVjaW1hbHMgLSBudW1iZXIgb2YgZGVjaW1hbHMgYXMgc3RyaW5nLlxyXG4gKiBAcGFyYW0gZGVjaW1hbHNOdW1iZXIgLSBudW1iZXIgb2YgZGVjaW1hbHMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlRGVjaW1hbHMoZGVjaW1hbHM6IHN0cmluZywgZGVjaW1hbHNOdW1iZXI6IG51bWJlcikge1xyXG4gICAgY29uc3QgYWN0aW9uOiBDaGFuZ2VEZWNpbWFscyA9IHtcclxuICAgICAgICB0eXBlOiBQcmVzZW50YXRpb25NZW51QWN0aW9uVHlwZS5DSEFOR0VfREVDSU1BTFMsXHJcbiAgICAgICAgZGVjaW1hbHMsXHJcbiAgICAgICAgZGVjaW1hbHNOdW1iZXIsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBmb3IgY2hhbmdpbmcgd2hldGhlciBwYXJ0aWVzIHdpdGggbm8gc2VhdHMgYXJlIHNob3duLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDaGFuZ2VTaG93UGFydGllc05vU2VhdHMge1xyXG4gICAgdHlwZTogUHJlc2VudGF0aW9uTWVudUFjdGlvblR5cGUuU0hPV19QQVJUSUVTX05PX1NFQVRTO1xyXG4gICAgc2hvd1BhcnRpZXNXaXRob3V0U2VhdHM6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gY3JlYXRvciBmb3IgY2hhbmdpbmcgd2hldGhlciBwYXJ0aWVzIHdpdGggbm8gc2VhdHMgYXJlIHNob3duLlxyXG4gKlxyXG4gKiBAcGFyYW0gc2hvd1BhcnRpZXNOb1NlYXRzIC0gdHJ1ZSBpZiBzaG93aW5nIHBhcnRpZXMgd2l0aCBubyBzZWF0cywgZWxzZSBmYWxzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VTaG93UGFydGllc05vU2VhdHMoc2hvd1BhcnRpZXNOb1NlYXRzOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBhY3Rpb246IENoYW5nZVNob3dQYXJ0aWVzTm9TZWF0cyA9IHtcclxuICAgICAgICB0eXBlOiBQcmVzZW50YXRpb25NZW51QWN0aW9uVHlwZS5TSE9XX1BBUlRJRVNfTk9fU0VBVFMsXHJcbiAgICAgICAgc2hvd1BhcnRpZXNXaXRob3V0U2VhdHM6IHNob3dQYXJ0aWVzTm9TZWF0cyxcclxuICAgIH07XHJcbiAgICByZXR1cm4gYWN0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGZvciBzZWxlY3Rpbmcgd2hpY2ggZGlzdHJpY3Qgc2hvdWxkIGJlIGRpc3BsYXllZC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0RGlzdHJpY3Qge1xyXG4gICAgdHlwZTogUHJlc2VudGF0aW9uTWVudUFjdGlvblR5cGUuU0VMRUNUX0RJU1RSSUNUO1xyXG4gICAgZGlzdHJpY3RTZWxlY3RlZDogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGNyZWF0b3IgZm9yIHNlbGVjdGluZyB3aGljaCBkaXN0cmljdCBzaG91bGQgYmUgZGlzcGxheWVkLlxyXG4gKlxyXG4gKiBAcGFyYW0gbmFtZSAtIG5hbWUgb2YgZGlzdHJpY3QgdG8gYmUgZGlzcGxheWVkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdERpc3RyaWN0KG5hbWU6IHN0cmluZyk6IFNlbGVjdERpc3RyaWN0IHtcclxuICAgIGNvbnN0IGFjdGlvbjogU2VsZWN0RGlzdHJpY3QgPSB7XHJcbiAgICAgICAgdHlwZTogUHJlc2VudGF0aW9uTWVudUFjdGlvblR5cGUuU0VMRUNUX0RJU1RSSUNULFxyXG4gICAgICAgIGRpc3RyaWN0U2VsZWN0ZWQ6IG5hbWUsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBmb3IgY2hhbmdpbmcgd2hpY2ggZGlzcHJvcG9ydGlvbmFsaXR5IGluZGV4IHRvIHVzZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2hhbmdlRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXgge1xyXG4gICAgdHlwZTogUHJlc2VudGF0aW9uTWVudUFjdGlvblR5cGUuQ0hBTkdFX0RJU1BST1BPUlRJT05BTElUWV9JTkRFWDtcclxuICAgIGluZGV4OiBEaXNwcm9wb3J0aW9uYWxpdHlJbmRleDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBjcmVhdG9yIGZvciBjaGFuZ2luZyB3aGljaCBkaXNwcm9wb3J0aW9uYWxpdHkgaW5kZXggdG8gdXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gaW5kZXggLSB3aGljaCBpbmRleCB0byB1c2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXgoaW5kZXg6IERpc3Byb3BvcnRpb25hbGl0eUluZGV4KSB7XHJcbiAgICBjb25zdCBhY3Rpb246IENoYW5nZURpc3Byb3BvcnRpb25hbGl0eUluZGV4ID0ge1xyXG4gICAgICAgIHR5cGU6IFByZXNlbnRhdGlvbk1lbnVBY3Rpb25UeXBlLkNIQU5HRV9ESVNQUk9QT1JUSU9OQUxJVFlfSU5ERVgsXHJcbiAgICAgICAgaW5kZXgsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBmb3IgY2hhbmdpbmcgd2hldGhlciB0byBzaG93IGNvbXBhcmlzb24gb3Igbm90LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUb2dnbGVTaG93Q29tcGFyaXNvbiB7XHJcbiAgICB0eXBlOiBQcmVzZW50YXRpb25NZW51QWN0aW9uVHlwZS5UT0dHTEVfU0hPV19DT01QQVJJU09OO1xyXG4gICAgc2hvd0NvbXBhcmlzb246IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gY3JlYXRvciBmb3IgY2hhbmdpbmcgd2hldGhlciB0byBzaG93IGNvbXBhcmlzb24gb3Igbm90LlxyXG4gKlxyXG4gKiBAcGFyYW0gc2hvd0NvbXBhcmlzb24gLSB0cnVlIGlmIHRvIHNob3cgY29tcGFyaXNvbiwgZWxzZSBmYWxzZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZVNob3dDb21wYXJpc29uKHNob3dDb21wYXJpc29uOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBhY3Rpb246IFRvZ2dsZVNob3dDb21wYXJpc29uID0ge1xyXG4gICAgICAgIHR5cGU6IFByZXNlbnRhdGlvbk1lbnVBY3Rpb25UeXBlLlRPR0dMRV9TSE9XX0NPTVBBUklTT04sXHJcbiAgICAgICAgc2hvd0NvbXBhcmlzb24sXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBmb3IgdG9nZ2xpbmcgZmlsdGVycycgdmlzaWJpbGl0eS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVG9nZ2xlU2hvd0ZpbHRlcnMge1xyXG4gICAgdHlwZTogUHJlc2VudGF0aW9uTWVudUFjdGlvblR5cGUuVE9HR0xFX1NIT1dfRklMVEVSUztcclxuICAgIHNob3dGaWx0ZXJzOiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGNyZWF0b3IgZm9yIHRvZ2dsaW5nIGZpbHRlcnMnIHZpc2liaWxpdHkuXHJcbiAqXHJcbiAqIEBwYXJhbSBzaG93RmlsdGVycyAtIHRydWUgaWYgZmlsdGVycyB2aXNpYmxlLCBlbHNlIGZhbHNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZVNob3dGaWx0ZXJzKHNob3dGaWx0ZXJzOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBhY3Rpb246IFRvZ2dsZVNob3dGaWx0ZXJzID0ge1xyXG4gICAgICAgIHR5cGU6IFByZXNlbnRhdGlvbk1lbnVBY3Rpb25UeXBlLlRPR0dMRV9TSE9XX0ZJTFRFUlMsXHJcbiAgICAgICAgc2hvd0ZpbHRlcnMsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBmb3IgdG9nZ2xpbmcgd2hldGhlciBvciBub3QgdG8gbWVyZ2UgZGlzdHJpY3RzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUb2dnbGVNZXJnZURpc3RyaWN0cyB7XHJcbiAgICB0eXBlOiBQcmVzZW50YXRpb25NZW51QWN0aW9uVHlwZS5UT0dHTEVfTUVSR0VfRElTVFJJQ1RTO1xyXG4gICAgbWVyZ2VEaXN0cmljdHM6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gY3JlYXRvciBmb3IgdG9nZ2xpbmcgd2hldGhlciBvciBub3QgdG8gbWVyZ2UgZGlzdHJpY3RzLlxyXG4gKlxyXG4gKiBAcGFyYW0gbWVyZ2VEaXN0cmljdHMgLSB0cnVlIGlmIGRpc3RyaWN0cyBzaG91bGQgYmUgbWVyZ2VkLCBlbHNlIGZhbHNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZU1lcmdlRGlzdHJpY3RzKG1lcmdlRGlzdHJpY3RzOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBhY3Rpb246IFRvZ2dsZU1lcmdlRGlzdHJpY3RzID0ge1xyXG4gICAgICAgIHR5cGU6IFByZXNlbnRhdGlvbk1lbnVBY3Rpb25UeXBlLlRPR0dMRV9NRVJHRV9ESVNUUklDVFMsXHJcbiAgICAgICAgbWVyZ2VEaXN0cmljdHMsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBmb3IgdG9nZ2xpbmcgd2hldGhlciBvciBub3QgdG8gbWVyZ2UgZGlzdHJpY3RzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUb2dnbGVVc2UyMDIxRGlzdHJpYnV0aW9uIHtcclxuICAgIHR5cGU6IFByZXNlbnRhdGlvbk1lbnVBY3Rpb25UeXBlLlRPR0dMRV9VU0VfMjAyMV9ESVNUUklCVVRJT047XHJcbiAgICB1c2UyMDIxRGlzdHJpYnV0aW9uOiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGNyZWF0b3IgZm9yIHRvZ2dsaW5nIHdoZXRoZXIgb3Igbm90IHRvIG1lcmdlIGRpc3RyaWN0cy5cclxuICpcclxuICogQHBhcmFtIG1lcmdlRGlzdHJpY3RzIC0gdHJ1ZSBpZiBkaXN0cmljdHMgc2hvdWxkIGJlIG1lcmdlZCwgZWxzZSBmYWxzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVVc2UyMDIxRGlzdHJpYnV0aW9uKHVzZTIwMjFEaXN0cmlidXRpb246IGJvb2xlYW4pIHtcclxuICAgIGNvbnN0IGFjdGlvbjogVG9nZ2xlVXNlMjAyMURpc3RyaWJ1dGlvbiA9IHtcclxuICAgICAgICB0eXBlOiBQcmVzZW50YXRpb25NZW51QWN0aW9uVHlwZS5UT0dHTEVfVVNFXzIwMjFfRElTVFJJQlVUSU9OLFxyXG4gICAgICAgIHVzZTIwMjFEaXN0cmlidXRpb24sXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbjtcclxufVxyXG4iLCJleHBvcnQgZnVuY3Rpb24gdG9TdW0oYWNjdW11bGF0b3I6IG51bWJlciwgY3VycmVudDogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gYWNjdW11bGF0b3IgKyBjdXJyZW50O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9NZWFuKGFjY3VtdWxhdG9yOiBudW1iZXIsIGN1cnJlbnQ6IG51bWJlciwgaW5kZXg6IG51bWJlciwgYXJyYXk6IG51bWJlcltdKSB7XHJcbiAgICBhY2N1bXVsYXRvciArPSBjdXJyZW50O1xyXG4gICAgaWYgKGluZGV4ID09PSBhcnJheS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yIC8gYXJyYXkubGVuZ3RoO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0Fic29sdXRlTWVhbihhY2N1bXVsYXRvcjogbnVtYmVyLCBjdXJyZW50OiBudW1iZXIsIGluZGV4OiBudW1iZXIsIGFycmF5OiBudW1iZXJbXSkge1xyXG4gICAgY3VycmVudCA9IGN1cnJlbnQgPj0gMCA/IGN1cnJlbnQgOiBjdXJyZW50ICogLTE7XHJcbiAgICBhY2N1bXVsYXRvciArPSBjdXJyZW50O1xyXG4gICAgaWYgKGluZGV4ID09PSBhcnJheS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yIC8gYXJyYXkubGVuZ3RoO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b01heChhY2N1bXVsYXRvcjogbnVtYmVyLCBjdXJyZW50OiBudW1iZXIpIHtcclxuICAgIHJldHVybiBjdXJyZW50ID4gYWNjdW11bGF0b3IgPyBjdXJyZW50IDogYWNjdW11bGF0b3I7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b01pbihhY2N1bXVsYXRvcjogbnVtYmVyLCBjdXJyZW50OiBudW1iZXIpIHtcclxuICAgIHJldHVybiBjdXJyZW50IDwgYWNjdW11bGF0b3IgPyBjdXJyZW50IDogYWNjdW11bGF0b3I7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IEZpbHRlciB9IGZyb20gXCJyZWFjdC10YWJsZVwiO1xyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBmdW5jdGlvbiBmb3Igc2VsZWN0LWJhc2VkIGZpbHRlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSBvbkNoYW5nZSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgdmFsdWUgYW5kIHJldHVybnMgdm9pZFxyXG4gKiBAcmV0dXJucyBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYSBSZWFjdC5DaGFuZ2VFdmVudCBhbmQgcmV0dXJucyB0aGUgb25DaGFuZ2VcclxuICogZnVuY3Rpb24gcGFzc2VkIGluIGdpdmVuIGEgdmFsdWUgZnJvbSB0aGUgZXZlbnQuXHJcbiAqL1xyXG5mdW5jdGlvbiBoYW5kbGVTZWxlY3RDaGFuZ2Uob25DaGFuZ2U6ICh2YWx1ZTogYW55KSA9PiB2b2lkKSB7XHJcbiAgICByZXR1cm4gKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MU2VsZWN0RWxlbWVudD4pID0+IHtcclxuICAgICAgICBvbkNoYW5nZShldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGEgcmVhY3QtdGFibGUgRmlsdGVyIHdpdGggY3VzdG9tIG9wdGlvbi5cclxuICogQHBhcmFtIG9wdGlvbnMgb3B0aW9ucyB0byBnZW5lcmF0ZSBhIEZpbHRlciBmcm9tXHJcbiAqIEByZXR1cm5zIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhIGZpbHRlciBhbmQgYW4gb25DaGFuZ2UgdGhhdCByZXR1cm5zIGEgSlNYLkVsZW1lbnRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RGaWx0ZXJXaXRoT3B0aW9ucyhvcHRpb25zOiB7IHZhbHVlOiBzdHJpbmc7IHRpdGxlOiBzdHJpbmcgfVtdKSB7XHJcbiAgICByZXR1cm4gKHsgZmlsdGVyLCBvbkNoYW5nZSB9OiB7IGZpbHRlcjogYW55OyBvbkNoYW5nZTogKHZhbHVlPzogYW55KSA9PiB2b2lkIH0pID0+IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbGVjdCBpcy1mdWxsd2lkdGhcIj5cclxuICAgICAgICAgICAgICAgIDxzZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJpcy1wcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17ZmlsdGVyID8gZmlsdGVyLnZhbHVlIDogb3B0aW9uc1swXS52YWx1ZX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlU2VsZWN0Q2hhbmdlKG9uQ2hhbmdlKX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7b3B0aW9ucy5tYXAoKG9wdGlvbikgPT4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGtleT17b3B0aW9uLnZhbHVlfSB2YWx1ZT17b3B0aW9uLnZhbHVlfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtvcHRpb24udGl0bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWxsR3JlYXRlclRoYW5FcXVhbHNNZXRob2QoZmlsdGVyOiBGaWx0ZXIsIHJvd3M6IGFueSkge1xyXG4gICAgaWYgKGZpbHRlci52YWx1ZSA9PT0gXCJhbGxcIikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKGZpbHRlci52YWx1ZSA9PT0gXCJ0cnVlXCIpIHtcclxuICAgICAgICByZXR1cm4gcm93c1tmaWx0ZXIuaWRdID4gMDtcclxuICAgIH1cclxuICAgIGlmIChmaWx0ZXIudmFsdWUgPT09IFwiZmFsc2VcIikge1xyXG4gICAgICAgIHJldHVybiByb3dzW2ZpbHRlci5pZF0gPT09IDA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBmaWx0ZXJNZXRob2QgdGhhdCBmb3IgYW4gXCJhbGwtdHJ1ZS1mYWxzZVwiIG9wdGlvbiBzZXQgdGhhdCBldmFsdWF0ZXMgcm93c1xyXG4gKiB0aGF0IGFyZSBlaXRoZXIgemVybyBvciBub3QgemVybyAob3IgdGhlIGZpbHRlciBpcyBkaXNhYmxlZCB3aXRoIFwiYWxsXCIpLlxyXG4gKlxyXG4gKiBAcGFyYW0gZmlsdGVyIGNvbnRhaW5zIHRoZSBpZCBvZiB0aGUgY29sdW1uIGFuZCB2YWx1ZSBmcm9tIHRoZSBzZWxlY3QgZmlsdGVyLlxyXG4gKiBAcGFyYW0gcm93cyBob2xkcyB0aGUgZGF0YSBvZiBhbGwgdGhlIHJvd3MuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gemVyb05vdFplcm9GaWx0ZXJNZXRob2QoZmlsdGVyOiBGaWx0ZXIsIHJvd3M6IGFueSkge1xyXG4gICAgaWYgKGZpbHRlci52YWx1ZSA9PT0gXCJhbGxcIikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKGZpbHRlci52YWx1ZSA9PT0gXCJ0cnVlXCIpIHtcclxuICAgICAgICByZXR1cm4gcm93c1tmaWx0ZXIuaWRdICE9PSAwO1xyXG4gICAgfVxyXG4gICAgaWYgKGZpbHRlci52YWx1ZSA9PT0gXCJmYWxzZVwiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJvd3NbZmlsdGVyLmlkXSA9PT0gMDtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIGZpbHRlck1ldGhvZCBmb3IgY29tcGFyaW5nIHZhbHVlcyB0byBhbiBpbmNsdXNpdmUgdGhyZXNob2xkLlxyXG4gKlxyXG4gKiBAcGFyYW0gdGhyZXNob2xkIHRocmVzaG9sZCB0byBjb21wYXJlIHRoZSByb3cgdG8uXHJcbiAqIEByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB1c2VzIHRoZSB0aHJlc2hvbGQgYXMgYSBcImdyZWF0ZXIgdGhhbiBvciBlcXVhbHNcIixcclxuICogb3IgXCJsZXNzIHRoYW5cIiBjb21wYXJpc29uLlxyXG4gKiBAZXhhbXBsZSB0aHJlc2hvbGRGaWx0ZXJNZXRob2QoNSkgPT4gKGZpbHRlcjogRmlsdGVyLCByb3c6IGFueSkgPT4ge1xyXG4gKiBpZiAoZmlsdGVyLnZhbHVlID09PSBcImFsbFwiKSB7XHJcbiAqICAgICByZXR1cm4gdHJ1ZTtcclxuICogfVxyXG4gKiBpZiAoZmlsdGVyLnZhbHVlID09PSBcImd0ZXFcIikge1xyXG4gKiAgICAgcmV0dXJuIHJvd1tmaWx0ZXIuaWRdID49IDVcclxuICogfVxyXG4gKiBpZiAoZmlsdGVyLnZhbHVlID09PSBcImx0XCIpIHtcclxuICogICAgIHJldHVybiByb3dbZmlsdGVyLmlkXSA8IDVcclxuICogfVxyXG4gKiByZXR1cm4gZmFsc2U7XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdGhyZXNob2xkRmlsdGVyTWV0aG9kKHRocmVzaG9sZDogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gKGZpbHRlcjogRmlsdGVyLCByb3dzOiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoZmlsdGVyLnZhbHVlID09PSBcImFsbFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmlsdGVyLnZhbHVlID09PSBcImd0ZXFcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcm93c1tmaWx0ZXIuaWRdID49IHRocmVzaG9sZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZpbHRlci52YWx1ZSA9PT0gXCJsdFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByb3dzW2ZpbHRlci5pZF0gPCB0aHJlc2hvbGQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBmaWx0ZXJNZXRob2QgdGhhdCB3cmFwcyB0aGUgdGhyZXNob2xkRmlsdGVyTWV0aG9kIGFuZCBwYXNzZXMgMC4gSW4gb3RoZXJcclxuICogd29yZHMgaXQgZmlsdGVycyBvbiBndGVxIChncmVhdGVyIHRoYW4gb3IgZXF1YWxzKSAwIG9yIGx0IChsZXNzIHRoYW4pIDAuXHJcbiAqXHJcbiAqIEBwYXJhbSBmaWx0ZXIgY29udGFpbnMgdGhlIGlkIG9mIHRoZSBjb2x1bW4gYW5kIHZhbHVlIGZyb20gdGhlIHNlbGVjdCBmaWx0ZXJcclxuICogQHBhcmFtIHJvd3MgaG9sZHMgdGhlIGRhdGEgb2YgYWxsIHRoZSByb3dzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcG9zaXRpdmVPck5lZ2F0aXZlRmlsdGVyTWV0aG9kKCkge1xyXG4gICAgcmV0dXJuIHRocmVzaG9sZEZpbHRlck1ldGhvZCgwKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIGZpbHRlck1ldGhvZCB0aGF0IHNsaWdodGx5IG1vZGlmaWVzIHRoZSBkZWZhdWx0IHRvIGJlIGNhc2UgaW5zZW5zaXRpdmUuXHJcbiAqXHJcbiAqIEBwYXJhbSBmaWx0ZXIgY29udGFpbnMgdGhlIGlkIG9mIHRoZSBjb2x1bW4gYW5kIHZhbHVlIGZyb20gdGhlIHNlbGVjdCBmaWx0ZXJcclxuICogQHBhcmFtIHJvd3MgaG9sZHMgdGhlIGRhdGEgb2YgYWxsIHRoZSByb3dzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2FzZUluc2Vuc2l0aXZlRmlsdGVyTWV0aG9kKGZpbHRlcjogRmlsdGVyLCByb3dzOiBhbnkpIHtcclxuICAgIGNvbnN0IGlkID0gZmlsdGVyLnBpdm90SWQgfHwgZmlsdGVyLmlkO1xyXG4gICAgY29uc3QgdmFsdWU6IHN0cmluZyA9IGZpbHRlci52YWx1ZTtcclxuICAgIGNvbnN0IGxvd2VyQ2FzZUlucHV0ID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgIHJldHVybiB0eXBlb2Ygcm93c1tpZF0gPT09IFwidW5kZWZpbmVkXCIgPyBTdHJpbmcocm93c1tpZF0pLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChsb3dlckNhc2VJbnB1dCkgOiB0cnVlO1xyXG59XHJcblxyXG4vKipcclxuICogQ29udGFpbnMgYWxsIHRoZSB0cmFuc2xhdGVhYmxlIGZpZWxkcyBmb3IgYSBSZWFjdFRhYmxlIGNvbXBvbmVudC5cclxuICovXHJcbmludGVyZmFjZSBSZWFjdFRhYmxlVHJhbnNsYXRpb24ge1xyXG4gICAgcGFnZVRleHQ6IHN0cmluZztcclxuICAgIG9mVGV4dDogc3RyaW5nO1xyXG4gICAgbmV4dFRleHQ6IHN0cmluZztcclxuICAgIHByZXZpb3VzVGV4dDogc3RyaW5nO1xyXG4gICAgbG9hZGluZ1RleHQ6IHN0cmluZztcclxuICAgIG5vRGF0YVRleHQ6IHN0cmluZztcclxuICAgIHJvd3NUZXh0OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBOb3J3ZWdpYW4gaW1wbGVtZW50YXRpb24gb2YgUmVhY3RUYWJsZVRyYW5zbGF0aW9uXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgbm9yd2VnaWFuOiBSZWFjdFRhYmxlVHJhbnNsYXRpb24gPSB7XHJcbiAgICBwYWdlVGV4dDogXCJTaWRlXCIsXHJcbiAgICBsb2FkaW5nVGV4dDogXCJMYXN0ZXIgaW5uLi4uXCIsXHJcbiAgICBuZXh0VGV4dDogXCJOZXN0ZVwiLFxyXG4gICAgcHJldmlvdXNUZXh0OiBcIkZvcnJpZ2VcIixcclxuICAgIG5vRGF0YVRleHQ6IFwiSW5nZW4gZGF0YVwiLFxyXG4gICAgb2ZUZXh0OiBcImF2XCIsXHJcbiAgICByb3dzVGV4dDogXCJyYWRlclwiLFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIE5vcndlZ2lhbiBpbXBsZW1lbnRhdGlvbiBvZiBSZWFjdFRhYmxlVHJhbnNsYXRpb24gZm9yIHRoZSBMZXZlbGluZ3NlYXQgb3ZlcnZpZXdcclxuICovXHJcbmV4cG9ydCBjb25zdCBub3J3ZWdpYW5MZXZlbGluZzogUmVhY3RUYWJsZVRyYW5zbGF0aW9uID0ge1xyXG4gICAgcGFnZVRleHQ6IFwiU2lkZVwiLFxyXG4gICAgbG9hZGluZ1RleHQ6IFwiTGFzdGVyIGlubi4uLlwiLFxyXG4gICAgbmV4dFRleHQ6IFwiTmVzdGVcIixcclxuICAgIHByZXZpb3VzVGV4dDogXCJGb3JyaWdlXCIsXHJcbiAgICBub0RhdGFUZXh0OiBcIkluZ2VuIHV0amV2bmluZ3NtYW5kYXRlclwiLFxyXG4gICAgb2ZUZXh0OiBcImF2XCIsXHJcbiAgICByb3dzVGV4dDogXCJyYWRlclwiLFxyXG59O1xyXG4iLCIvKipcclxuICogVXRpbGl0eSB0byBoZWxwIHdpdGggZXhoYXVzdGl2ZSBjaGVja2luZyBvZiBpZi1lbHNlIGlmLWVsc2UgYW5kIHN3aXRjaGVzLFxyXG4gKiBlc3BlY2lhbGx5IHVzZWZ1bCBmb3IgcmVkdWNlcnMgYW5kIGNvbXBvbmVudHMuXHJcbiAqXHJcbiAqIEBwYXJhbSB0eXBlIC0gdHlwZSB0byBlbnN1cmUgaXMgZXhoYXVzdGl2ZWx5IGNoZWNrZWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja0V4aGF1c3RpdmVseSh0eXBlOiBuZXZlcikge1xyXG4gICAgcmV0dXJuIHR5cGU7XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIHJvdW5kTnVtYmVyKHZhbHVlOiBudW1iZXIsIGRlY2ltYWxzOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IHJvdW5kZXIgPSBNYXRoLnBvdygxMCwgZGVjaW1hbHMpO1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiByb3VuZGVyKSAvIHJvdW5kZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVQZXJjZW50KHZhbHVlOiBudW1iZXIsIHRvdGFsOiBudW1iZXIpIHtcclxuICAgIHJldHVybiAodmFsdWUgLyB0b3RhbCkgKiAxMDA7XHJcbn1cclxuIiwiaW1wb3J0IHsgQ2xlYXJTdGF0ZSB9IGZyb20gXCIuLi9yZWR1Y2Vycy9nbG9iYWwtYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25EYXRhIH0gZnJvbSBcIi4vTm90aWZpY2F0aW9uc1wiO1xyXG5cclxuZXhwb3J0IGVudW0gVWlBY3Rpb25UeXBlIHtcclxuICAgIFRPR0dMRV9IQU1CVVJHRVJfRVhQQU5ERUQgPSBcIlRPR0dMRV9IQU1CVVJHRVJfRVhQQU5ERURcIixcclxuICAgIEhJREVfVFVUT1JJQUwgPSBcIkhJREVfVFVUT1JJQUxcIixcclxuICAgIEFERF9OT1RJRklDQVRJT04gPSBcIkFERF9OT1RJRklDQVRJT05cIixcclxuICAgIFJFTU9WRV9OT1RJRklDQVRJT04gPSBcIlJFTU9WRV9OT1RJRklDQVRJT05cIixcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVWlBY3Rpb24gPSBUb2dnbGVIYW1idXJnZXIgfCBIaWRlVHV0b3JpYWwgfCBBZGROb3RpZmljYXRpb25BY3Rpb24gfCBSZW1vdmVOb3RpZmljYXRpb25BY3Rpb24gfCBDbGVhclN0YXRlO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUb2dnbGVIYW1idXJnZXIge1xyXG4gICAgdHlwZTogVWlBY3Rpb25UeXBlLlRPR0dMRV9IQU1CVVJHRVJfRVhQQU5ERUQ7XHJcbiAgICBoYW1idXJnZXJFeHBhbmRlZDogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZUhhbWJ1cmdlcihoYW1idXJnZXJFeHBhbmRlZDogYm9vbGVhbikge1xyXG4gICAgY29uc3QgYWN0aW9uOiBUb2dnbGVIYW1idXJnZXIgPSB7XHJcbiAgICAgICAgdHlwZTogVWlBY3Rpb25UeXBlLlRPR0dMRV9IQU1CVVJHRVJfRVhQQU5ERUQsXHJcbiAgICAgICAgaGFtYnVyZ2VyRXhwYW5kZWQ6ICFoYW1idXJnZXJFeHBhbmRlZCxcclxuICAgIH07XHJcbiAgICByZXR1cm4gYWN0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGlkZVR1dG9yaWFsKCkge1xyXG4gICAgY29uc3QgYWN0aW9uOiBIaWRlVHV0b3JpYWwgID0ge1xyXG4gICAgICAgIHR5cGU6IFVpQWN0aW9uVHlwZS5ISURFX1RVVE9SSUFMLFxyXG4gICAgfTtcclxuICAgIHJldHVybiBhY3Rpb247XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGlkZVR1dG9yaWFsIHtcclxuICAgIHR5cGU6IFVpQWN0aW9uVHlwZS5ISURFX1RVVE9SSUFMO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFkZE5vdGlmaWNhdGlvbkFjdGlvbiB7XHJcbiAgICB0eXBlOiBVaUFjdGlvblR5cGUuQUREX05PVElGSUNBVElPTjtcclxuICAgIG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uRGF0YTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb246IE5vdGlmaWNhdGlvbkRhdGEpIHtcclxuICAgIGNvbnN0IGFjdGlvbjogQWRkTm90aWZpY2F0aW9uQWN0aW9uID0ge1xyXG4gICAgICAgIHR5cGU6IFVpQWN0aW9uVHlwZS5BRERfTk9USUZJQ0FUSU9OLFxyXG4gICAgICAgIG5vdGlmaWNhdGlvbixcclxuICAgIH07XHJcbiAgICByZXR1cm4gYWN0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlbW92ZU5vdGlmaWNhdGlvbkFjdGlvbiB7XHJcbiAgICB0eXBlOiBVaUFjdGlvblR5cGUuUkVNT1ZFX05PVElGSUNBVElPTjtcclxuICAgIGlkOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVOb3RpZmljYXRpb24oaWQ6IG51bWJlcikge1xyXG4gICAgY29uc3QgYWN0aW9uOiBSZW1vdmVOb3RpZmljYXRpb25BY3Rpb24gPSB7XHJcbiAgICAgICAgdHlwZTogVWlBY3Rpb25UeXBlLlJFTU9WRV9OT1RJRklDQVRJT04sXHJcbiAgICAgICAgaWQsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbjtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gICAgQWxnb3JpdGhtVHlwZSxcclxuICAgIFNlYXRSZXN1bHQsXHJcbiAgICBQYXJ0eVJlc3VsdCxcclxuICAgIERpc3RyaWJ1dGlvblJlc3VsdCxcclxuICAgIERpc3RyaWN0UmVzdWx0LFxyXG4gICAgTGV2ZWxpbmdTZWF0LFxyXG4gICAgRGlzdHJpY3RRdW90aWVudHMsXHJcbn0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCB7IFNlYXRQYXJ0eVJlc3VsdCB9IGZyb20gXCIuLy4uLy4uL2NvbXB1dGF0aW9uL2NvbXB1dGF0aW9uLW1vZGVsc1wiO1xyXG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcclxuaW1wb3J0IHsgbGFyZ2VzdEZyYWN0aW9uIH0gZnJvbSBcIi4vZGlzdHJpYnV0aW9uXCI7XHJcbmltcG9ydCB7IGNoZWNrRXhoYXVzdGl2ZWx5IH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllc1wiO1xyXG5pbXBvcnQgeyBWb3RlcyB9IGZyb20gXCIuLi8uLi9yZXF1ZXN0ZWQtZGF0YS9yZXF1ZXN0ZWQtZGF0YS1tb2RlbHNcIjtcclxuaW1wb3J0IHsgY2FsY3VsYXRlUGVyY2VudCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvbnVtYmVyXCI7XHJcblxyXG5jb25zdCBpbGxlZ2FsUGFydHlDb2RlcyA9IG5ldyBTZXQoW1wiQkxBTktFXCJdKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb25zdHJ1Y3REaXN0cmljdFJlc3VsdHMoXHJcbiAgICBkaXN0cmljdFNlYXRzOiBfLkRpY3Rpb25hcnk8bnVtYmVyPixcclxuICAgIGRpc3RyaWN0Vm90ZXM6IF8uRGljdGlvbmFyeTxudW1iZXI+LFxyXG4gICAgdG90YWxWb3RlczogbnVtYmVyXHJcbik6IF8uRGljdGlvbmFyeTxEaXN0cmljdFJlc3VsdD4ge1xyXG4gICAgY29uc3QgZGlzdHJpY3RSZXN1bHRzOiBfLkRpY3Rpb25hcnk8RGlzdHJpY3RSZXN1bHQ+ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGRpc3RyaWN0IGluIGRpc3RyaWN0U2VhdHMpIHtcclxuICAgICAgICBpZiAoZGlzdHJpY3RTZWF0cy5oYXNPd25Qcm9wZXJ0eShkaXN0cmljdCkpIHtcclxuICAgICAgICAgICAgZGlzdHJpY3RSZXN1bHRzW2Rpc3RyaWN0XSA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGRpc3RyaWN0LFxyXG4gICAgICAgICAgICAgICAgZGlzdHJpY3RTZWF0czogZGlzdHJpY3RTZWF0c1tkaXN0cmljdF0sXHJcbiAgICAgICAgICAgICAgICBsZXZlbGluZ1NlYXRzOiAwLFxyXG4gICAgICAgICAgICAgICAgdG90YWxTZWF0czogMCxcclxuICAgICAgICAgICAgICAgIHZvdGVzOiBkaXN0cmljdFZvdGVzW2Rpc3RyaWN0XSxcclxuICAgICAgICAgICAgICAgIHBlcmNlbnRWb3RlczogY2FsY3VsYXRlUGVyY2VudChkaXN0cmljdFZvdGVzW2Rpc3RyaWN0XSwgdG90YWxWb3RlcyksXHJcbiAgICAgICAgICAgICAgICB2b3Rlc1BlclNlYXQ6IDAsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFNlYXRSZXN1bHQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgcGFydHlSZXN1bHRzOiBbXSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRpc3RyaWN0UmVzdWx0cztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN0cnVjdFBhcnR5UmVzdWx0cyhcclxuICAgIHZvdGVzOiBWb3Rlc1tdLFxyXG4gICAgdG90YWxWb3RlczogbnVtYmVyLFxyXG4gICAgcGFydHlNYXA6IF8uRGljdGlvbmFyeTxzdHJpbmc+XHJcbik6IF8uRGljdGlvbmFyeTxQYXJ0eVJlc3VsdD4ge1xyXG4gICAgY29uc3QgcGFydHlSZXN1bHRzOiBfLkRpY3Rpb25hcnk8UGFydHlSZXN1bHQ+ID0ge307XHJcblxyXG4gICAgZm9yIChjb25zdCB2b3RlIG9mIHZvdGVzKSB7XHJcbiAgICAgICAgaWYgKHZvdGUucGFydHkgaW4gcGFydHlSZXN1bHRzKSB7XHJcbiAgICAgICAgICAgIHBhcnR5UmVzdWx0c1t2b3RlLnBhcnR5XS52b3RlcyArPSB2b3RlLnZvdGVzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhcnR5UmVzdWx0c1t2b3RlLnBhcnR5XSA9IHtcclxuICAgICAgICAgICAgICAgIHBhcnR5Q29kZTogdm90ZS5wYXJ0eSxcclxuICAgICAgICAgICAgICAgIHBhcnR5TmFtZTogcGFydHlNYXBbdm90ZS5wYXJ0eV0sXHJcbiAgICAgICAgICAgICAgICB2b3Rlczogdm90ZS52b3RlcyxcclxuICAgICAgICAgICAgICAgIHBlcmNlbnRWb3RlczogMCxcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0U2VhdHM6IDAsXHJcbiAgICAgICAgICAgICAgICBsZXZlbGluZ1NlYXRzOiAwLFxyXG4gICAgICAgICAgICAgICAgdG90YWxTZWF0czogMCxcclxuICAgICAgICAgICAgICAgIHByb3BvcnRpb25hbGl0eTogMCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCBwYXJ0eUNvZGUgaW4gcGFydHlSZXN1bHRzKSB7XHJcbiAgICAgICAgaWYgKHBhcnR5UmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShwYXJ0eUNvZGUpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZvdGVzID0gcGFydHlSZXN1bHRzW3BhcnR5Q29kZV0udm90ZXM7XHJcbiAgICAgICAgICAgIHBhcnR5UmVzdWx0c1twYXJ0eUNvZGVdLnBlcmNlbnRWb3RlcyA9IGNhbGN1bGF0ZVBlcmNlbnQodm90ZXMsIHRvdGFsVm90ZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcGFydHlSZXN1bHRzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29uc3RydWN0RGlzdHJpY3RQYXJ0eVJlc3VsdHMoXHJcbiAgICB2b3RlczogVm90ZXNbXSxcclxuICAgIGRpc3RyaWN0Vm90ZXM6IF8uRGljdGlvbmFyeTxudW1iZXI+LFxyXG4gICAgcGFydHlNYXA6IF8uRGljdGlvbmFyeTxzdHJpbmc+XHJcbik6IF8uRGljdGlvbmFyeTxfLkRpY3Rpb25hcnk8UGFydHlSZXN1bHQ+PiB7XHJcbiAgICBjb25zdCBkaXN0cmljdFBhcnR5UmVzdWx0czogXy5EaWN0aW9uYXJ5PF8uRGljdGlvbmFyeTxQYXJ0eVJlc3VsdD4+ID0ge307XHJcblxyXG4gICAgZm9yIChjb25zdCB2b3RlIG9mIHZvdGVzKSB7XHJcbiAgICAgICAgaWYgKCFkaXN0cmljdFBhcnR5UmVzdWx0c1t2b3RlLmRpc3RyaWN0XSkge1xyXG4gICAgICAgICAgICBkaXN0cmljdFBhcnR5UmVzdWx0c1t2b3RlLmRpc3RyaWN0XSA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBkaXN0cmljdFBhcnR5UmVzdWx0c1t2b3RlLmRpc3RyaWN0XVt2b3RlLnBhcnR5XSA9IHtcclxuICAgICAgICAgICAgcGFydHlDb2RlOiB2b3RlLnBhcnR5LFxyXG4gICAgICAgICAgICBwYXJ0eU5hbWU6IHBhcnR5TWFwW3ZvdGUucGFydHldLFxyXG4gICAgICAgICAgICB2b3Rlczogdm90ZS52b3RlcyxcclxuICAgICAgICAgICAgcGVyY2VudFZvdGVzOiBjYWxjdWxhdGVQZXJjZW50KHZvdGUudm90ZXMsIGRpc3RyaWN0Vm90ZXNbdm90ZS5kaXN0cmljdF0pLFxyXG4gICAgICAgICAgICBkaXN0cmljdFNlYXRzOiAwLFxyXG4gICAgICAgICAgICBsZXZlbGluZ1NlYXRzOiAwLFxyXG4gICAgICAgICAgICB0b3RhbFNlYXRzOiAwLFxyXG4gICAgICAgICAgICBwcm9wb3J0aW9uYWxpdHk6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBkaXN0cmljdFBhcnR5UmVzdWx0cztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFZvdGVzUGVyRGlzdHJpY3Qodm90ZXM6IFZvdGVzW10pOiBfLkRpY3Rpb25hcnk8bnVtYmVyPiB7XHJcbiAgICBjb25zdCB2b3RlQ291bnQ6IF8uRGljdGlvbmFyeTxudW1iZXI+ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IHZvdGUgb2Ygdm90ZXMpIHtcclxuICAgICAgICBpZiAodm90ZS5kaXN0cmljdCBpbiB2b3RlQ291bnQpIHtcclxuICAgICAgICAgICAgdm90ZUNvdW50W3ZvdGUuZGlzdHJpY3RdICs9IHZvdGUudm90ZXM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdm90ZUNvdW50W3ZvdGUuZGlzdHJpY3RdID0gdm90ZS52b3RlcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZvdGVDb3VudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIERpc3RyaWJ1dGVzIGEgbnVtYmVyIG9mIHBhcnR5UmVzdWx0cyBvbiBhIHNldCBvZiBwYXJ0aWVzLCBiYXNlZCBvbiB0aGVpciBudW1iZXIgb2Ygdm90ZXMsXHJcbiAqIGhvdyBtYW55IHBhcnR5UmVzdWx0cyB0aGV5IGFscmVhZHkgcmVjZWl2ZWQgKGlmIGFwcGxpY2FibGUpIGFuZCBhIHNwZWNpZmljIGFsZ29yaXRobS5cclxuICpcclxuICogQHBhcmFtIGFsZ29yaXRobSBUaGUgdHlwZSBvZiBhbGdvcml0aG0gaW4gdXNlXHJcbiAqIEBwYXJhbSBmaXJzdERpdmlzb3IgVGhlIGZpcnN0IGRpdmlzb3IgdG8gdXNlXHJcbiAqIEBwYXJhbSBudW1TZWF0cyBOdW1iZXIgb2YgcGFydHlSZXN1bHRzIHRvIGRpc3RyaWJ1dGVcclxuICogQHBhcmFtIHJlc3VsdHMgQSBsaXN0IG9mIGhvdyBtYW55IHZvdGVzIGVhY2ggcGFydHkgcmVjZWl2ZWRcclxuICogQHBhcmFtIHBhcnR5UmVzdWx0cyBbb3B0aW9uYWxdIElmIGEgbnVtYmVyIG9mIHBhcnR5UmVzdWx0cyBoYXZlIGJlZW4gZGlzdHJpYnV0ZWQsIHRoaXMgcGFyYW1ldGVyIGNhbiBiZSBzcGVjaWZpZWQgdG8gY29udGludWUgZnJvbSB0aGUgZXhpc3RpbmcgZGlzdHJpYnV0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGlzdHJpYnV0ZVNlYXRzKFxyXG4gICAgYWxnb3JpdGhtOiBBbGdvcml0aG1UeXBlLFxyXG4gICAgZmlyc3REaXZpc29yOiBudW1iZXIsXHJcbiAgICBkaXN0cmljdFRocmVzaG9sZDogbnVtYmVyLFxyXG4gICAgbnVtU2VhdHM6IG51bWJlcixcclxuICAgIHRvdGFsVm90ZXM6IG51bWJlcixcclxuICAgIHJlc3VsdHM6IF8uRGljdGlvbmFyeTxQYXJ0eVJlc3VsdD4sXHJcbiAgICBhdmVyYWdlVm90ZXNQZXJTZWF0PzogbnVtYmVyLFxyXG4gICAgcGFydHlSZXN1bHRzPzogXy5EaWN0aW9uYXJ5PFBhcnR5UmVzdWx0PlxyXG4pOiBEaXN0cmlidXRpb25SZXN1bHQge1xyXG4gICAgaWYgKGlzTGFyZ2VzdEZyYWN0aW9uQWxnb3JpdGhtKGFsZ29yaXRobSkpIHtcclxuICAgICAgICBjb25zdCBlbGVjdGlvbk51bWJlciA9IGdldEVsZWN0aW9uTnVtYmVyKGFsZ29yaXRobSwgdG90YWxWb3RlcywgbnVtU2VhdHMpO1xyXG4gICAgICAgIGNvbnN0IHBhcnR5Vm90ZXMgPSByZXN1bHRBcnJheVRvRGljdGlvbmFyeShyZXN1bHRzKTtcclxuICAgICAgICByZXR1cm4gbGFyZ2VzdEZyYWN0aW9uKG51bVNlYXRzLCBwYXJ0eVZvdGVzLCBlbGVjdGlvbk51bWJlcik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc2VhdHNXb246IF8uRGljdGlvbmFyeTxudW1iZXI+ID0ge307XHJcbiAgICBjb25zdCBjdXJyZW50U2VhdHNXb246IF8uRGljdGlvbmFyeTxudW1iZXI+ID0ge307XHJcbiAgICBjb25zdCBzZWF0UmVzdWx0czogU2VhdFJlc3VsdFtdID0gW107XHJcblxyXG4gICAgaWYgKHBhcnR5UmVzdWx0cyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0eUNvZGUgaW4gcmVzdWx0cykge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShwYXJ0eUNvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2b3RlID0gcmVzdWx0c1twYXJ0eUNvZGVdO1xyXG4gICAgICAgICAgICAgICAgc2VhdHNXb25bdm90ZS5wYXJ0eUNvZGVdID0gMDtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTZWF0c1dvblt2b3RlLnBhcnR5Q29kZV0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHBhcnR5Q29kZSBpbiBwYXJ0eVJlc3VsdHMpIHtcclxuICAgICAgICAgICAgaWYgKHBhcnR5UmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShwYXJ0eUNvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBwYXJ0eVJlc3VsdHNbcGFydHlDb2RlXTtcclxuICAgICAgICAgICAgICAgIHNlYXRzV29uW3BhcnR5Q29kZV0gPSByZXN1bHQuZGlzdHJpY3RTZWF0cztcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTZWF0c1dvbltwYXJ0eUNvZGVdID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVNlYXRzOyBpKyspIHtcclxuICAgICAgICBjb25zdCBzZWF0UmVzdWx0OiBTZWF0UmVzdWx0ID0ge1xyXG4gICAgICAgICAgICBzZWF0SW5kZXg6IGksXHJcbiAgICAgICAgICAgIHdpbm5lcjogXCJcIixcclxuICAgICAgICAgICAgcGFydHlSZXN1bHRzOiBbXSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsZXQgdGllZFNlYXRXaW5uZXJzID0gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0eUNvZGU6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBxdW90aWVudDogLTEsXHJcbiAgICAgICAgICAgICAgICBkZW5vbWluYXRvcjogLTEsXHJcbiAgICAgICAgICAgICAgICB2b3RlczogLTEsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0eUNvZGUgaW4gcmVzdWx0cykge1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdHMsIHBhcnR5Q29kZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3VsdHNbcGFydHlDb2RlXTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50RGVub21pbmF0b3IgPSBnZXREZW5vbWluYXRvcihcclxuICAgICAgICAgICAgICAgICAgICBhbGdvcml0aG0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2VhdHNXb25bcGFydHlDb2RlXSxcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdERpdmlzb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgbnVtU2VhdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgdG90YWxWb3Rlc1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRRdW90aWVudCA9XHJcbiAgICAgICAgICAgICAgICAgICAgYXZlcmFnZVZvdGVzUGVyU2VhdCAhPSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY2FsY3VsYXRlQWRqdXN0ZWRRdW90aWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWF0c1dvbltwYXJ0eUNvZGVdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmVyYWdlVm90ZXNQZXJTZWF0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQudm90ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0RGl2aXNvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtU2VhdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsVm90ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogY2FsY3VsYXRlUXVvdGllbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhdHNXb25bcGFydHlDb2RlXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnZvdGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdERpdmlzb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bVNlYXRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFZvdGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQYXJ0eVJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0eUNvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcXVvdGllbnQ6IGN1cnJlbnRRdW90aWVudCxcclxuICAgICAgICAgICAgICAgICAgICBkZW5vbWluYXRvcjogY3VycmVudERlbm9taW5hdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIHZvdGVzOiByZXN1bHQudm90ZXMsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgc2VhdFJlc3VsdC5wYXJ0eVJlc3VsdHMucHVzaChjdXJyZW50UGFydHlSZXN1bHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghaWxsZWdhbFBhcnR5Q29kZXMuaGFzKHBhcnR5Q29kZSkgJiYgcmVzdWx0LnBlcmNlbnRWb3RlcyA+IGRpc3RyaWN0VGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGllZFNlYXRXaW5uZXJzID0gdXBkYXRlV2lubmVycyh0aWVkU2VhdFdpbm5lcnMsIGN1cnJlbnRQYXJ0eVJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHdpbm5lciA9IF8uc2FtcGxlKHRpZWRTZWF0V2lubmVycyk7XHJcbiAgICAgICAgc2VhdHNXb25bd2lubmVyIS5wYXJ0eUNvZGVdICs9IDE7XHJcbiAgICAgICAgY3VycmVudFNlYXRzV29uW3dpbm5lciEucGFydHlDb2RlXSArPSAxO1xyXG5cclxuICAgICAgICBzZWF0UmVzdWx0Lndpbm5lciA9IHdpbm5lciEucGFydHlDb2RlO1xyXG4gICAgICAgIHNlYXRSZXN1bHRzLnB1c2goc2VhdFJlc3VsdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZWF0c1dvbjogY3VycmVudFNlYXRzV29uLFxyXG4gICAgICAgIHNlYXRSZXN1bHRzLFxyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlV2lubmVycyh3aW5uZXJzOiBTZWF0UGFydHlSZXN1bHRbXSwgY3VycmVudFBhcnR5OiBTZWF0UGFydHlSZXN1bHQpOiBTZWF0UGFydHlSZXN1bHRbXSB7XHJcbiAgICBpZiAoY3VycmVudFBhcnR5LnF1b3RpZW50ID4gd2lubmVyc1swXS5xdW90aWVudCkge1xyXG4gICAgICAgIHJldHVybiBbY3VycmVudFBhcnR5XTtcclxuICAgIH0gZWxzZSBpZiAoY3VycmVudFBhcnR5LnF1b3RpZW50ID09PSB3aW5uZXJzWzBdLnF1b3RpZW50KSB7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRQYXJ0eS52b3RlcyA+IHdpbm5lcnNbMF0udm90ZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtjdXJyZW50UGFydHldO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFBhcnR5LnZvdGVzID09PSB3aW5uZXJzWzBdLnZvdGVzKSB7XHJcbiAgICAgICAgICAgIHdpbm5lcnMucHVzaChjdXJyZW50UGFydHkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB3aW5uZXJzO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGRlbm9taW5hdG9yIGJhc2VkIG9uIGFuIGFsZ29yaXRobSwgdGhlIG51bWJlciBvZiBwYXJ0eVJlc3VsdHMgdGhlIHBhcnR5IGhhc1xyXG4gKiBhbmQgYSBmaXJzdCBkaXZpc29yXHJcbiAqXHJcbiAqIEBwYXJhbSBhbGdvcml0aG0gVGhlIGFsZ29yaXRobSB0byBnZXQgdGhlIGRlbm9taW5hdG9yIGZvclxyXG4gKiBAcGFyYW0gbnVtYmVyT2ZTZWF0c0Fzc2lnbmVkIFRoZSBudW1iZXIgb2YgcGFydHlSZXN1bHRzIGFzc2lnbmVkIHRvIHRoZSBwYXJ0eSBpbiBxdWVzdGlvblxyXG4gKiBAcGFyYW0gZmlyc3REaXZpc29yIFRoZSBmaXJzdCBkaXZpc29yIHRvIHVzZSBpZiB0aGUgcGFydHkgaGFzIDAgcGFydHlSZXN1bHRzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVub21pbmF0b3IoXHJcbiAgICBhbGdvcml0aG06IEFsZ29yaXRobVR5cGUsXHJcbiAgICBudW1iZXJPZlNlYXRzQXNzaWduZWQ6IG51bWJlcixcclxuICAgIGZpcnN0RGl2aXNvcjogbnVtYmVyLFxyXG4gICAgdG90YWxTZWF0czogbnVtYmVyLFxyXG4gICAgdG90YWxWb3RlczogbnVtYmVyXHJcbikge1xyXG4gICAgc3dpdGNoIChhbGdvcml0aG0pIHtcclxuICAgICAgICBjYXNlIEFsZ29yaXRobVR5cGUuU0FJTlRFX0xBR1VFOlxyXG4gICAgICAgICAgICBpZiAobnVtYmVyT2ZTZWF0c0Fzc2lnbmVkID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3REaXZpc29yO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDIgKiBudW1iZXJPZlNlYXRzQXNzaWduZWQgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBBbGdvcml0aG1UeXBlLkRfSE9ORFQ6XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJPZlNlYXRzQXNzaWduZWQgKyAxO1xyXG4gICAgICAgIGNhc2UgQWxnb3JpdGhtVHlwZS5MQVJHRVNUX0ZSQUNUSU9OX0hBUkU6XHJcbiAgICAgICAgY2FzZSBBbGdvcml0aG1UeXBlLkxBUkdFU1RfRlJBQ1RJT05fRFJPT1A6XHJcbiAgICAgICAgY2FzZSBBbGdvcml0aG1UeXBlLkxBUkdFU1RfRlJBQ1RJT05fSEFHRU5CQUNIX0JJU0NIT0ZGOlxyXG4gICAgICAgICAgICByZXR1cm4gZ2V0RWxlY3Rpb25OdW1iZXIoYWxnb3JpdGhtLCB0b3RhbFZvdGVzLCB0b3RhbFNlYXRzKTtcclxuICAgICAgICBjYXNlIEFsZ29yaXRobVR5cGUuVU5ERUZJTkVEOlxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFUlJPUiEgQWxnb3JpdGhtIHR5cGUgc2hvdWxkIG5vdCBiZSB1bmRlZmluZWQhYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUjtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBjaGVja0V4aGF1c3RpdmVseShhbGdvcml0aG0pO1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEVsZWN0aW9uTnVtYmVyKGFsZ29yaXRobTogQWxnb3JpdGhtVHlwZSwgdG90YWxWb3RlczogbnVtYmVyLCB0b3RhbFNlYXRzOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgc3dpdGNoIChhbGdvcml0aG0pIHtcclxuICAgICAgICBjYXNlIEFsZ29yaXRobVR5cGUuTEFSR0VTVF9GUkFDVElPTl9IQVJFOlxyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0b3RhbFZvdGVzIC8gdG90YWxTZWF0cyk7XHJcbiAgICAgICAgY2FzZSBBbGdvcml0aG1UeXBlLkxBUkdFU1RfRlJBQ1RJT05fRFJPT1A6XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRvdGFsVm90ZXMgLyAodG90YWxTZWF0cyArIDEpKSArIDE7XHJcbiAgICAgICAgY2FzZSBBbGdvcml0aG1UeXBlLkxBUkdFU1RfRlJBQ1RJT05fSEFHRU5CQUNIX0JJU0NIT0ZGOlxyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0b3RhbFZvdGVzIC8gKHRvdGFsU2VhdHMgKyAxKSk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRVJST1IhICR7YWxnb3JpdGhtLnRvU3RyaW5nKCl9IGRvZXMgbm90IGhhdmUgYW4gYXNzb2NpYXRlZCBlbGVjdGlvbiBudW1iZXIgYWxnb3JpdGhtIWApO1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBwcm9wb3J0aW9uYWxpdHkgYmV0ZWVuIHRoZSBudW1iZXIgb2Ygdm90ZXMgYW5kIHRoZSBudW1iZXIgb2Ygc2VhdHMgcmVjZWl2ZWQuXHJcbiAqIENhbiBiZSBzdW1tZWQgdXAgYW5kIGRpdmlkZWQgYnkgMiB0byByZXZlYWwgdGhlIHRydWUgTG9vc2Vtb3JlLUhhbmJ5cyBpbmRleCBvZiB0aGUgcmVzdWx0cy5cclxuICpcclxuICogQHBhcmFtIHRvdGFsU2VhdHMgVGhlIHRvdGFsIG51bWJlciBvZiBzZWF0cyB0byBiZSBkaXN0cmlidXRlZCBuYXRpb25hbGx5XHJcbiAqIEBwYXJhbSBwYXJ0eVJlc3VsdHMgVGhlIGN1cnJlbnQgbmF0aW9uYWwgcGFydHkgcmVzdWx0c1xyXG4gKiBAcGFyYW0gZGlzdHJpY3RQYXJ0eVJlc3VsdHMgVGhlIGN1cnJlbnQgZGlzdHJpY3QtbGV2ZWwgcGFydHkgcmVzdWx0c1xyXG4gKiBAcGFyYW0gZGlzdHJpY3RSZXN1bHRzIFRoZSBjdXJyZW50IGRpc3RyaWN0IHJlc3VsdHNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVQcm9wb3J0aW9uYWxpdHkoXHJcbiAgICB0b3RhbFNlYXRzOiBudW1iZXIsXHJcbiAgICBwYXJ0eVJlc3VsdHM6IF8uRGljdGlvbmFyeTxQYXJ0eVJlc3VsdD4sXHJcbiAgICBkaXN0cmljdFBhcnR5UmVzdWx0czogXy5EaWN0aW9uYXJ5PF8uRGljdGlvbmFyeTxQYXJ0eVJlc3VsdD4+LFxyXG4gICAgZGlzdHJpY3RSZXN1bHRzOiBfLkRpY3Rpb25hcnk8RGlzdHJpY3RSZXN1bHQ+XHJcbikge1xyXG4gICAgZm9yIChjb25zdCBwYXJ0eUNvZGUgaW4gcGFydHlSZXN1bHRzKSB7XHJcbiAgICAgICAgaWYgKHBhcnR5UmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShwYXJ0eUNvZGUpICYmICFpbGxlZ2FsUGFydHlDb2Rlcy5oYXMocGFydHlDb2RlKSkge1xyXG4gICAgICAgICAgICBjb25zdCBwZXJjZW50U2VhdHMgPSAocGFydHlSZXN1bHRzW3BhcnR5Q29kZV0udG90YWxTZWF0cyAvIHRvdGFsU2VhdHMpICogMTAwO1xyXG4gICAgICAgICAgICBwYXJ0eVJlc3VsdHNbcGFydHlDb2RlXS5wcm9wb3J0aW9uYWxpdHkgPSBwZXJjZW50U2VhdHMgLSBwYXJ0eVJlc3VsdHNbcGFydHlDb2RlXS5wZXJjZW50Vm90ZXM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgY291bnR5IGluIGRpc3RyaWN0UGFydHlSZXN1bHRzKSB7XHJcbiAgICAgICAgaWYgKGRpc3RyaWN0UGFydHlSZXN1bHRzLmhhc093blByb3BlcnR5KGNvdW50eSkpIHtcclxuICAgICAgICAgICAgY29uc3QgdG90YWxEaXN0cmljdFNlYXRzID0gZGlzdHJpY3RSZXN1bHRzW2NvdW50eV0uZGlzdHJpY3RTZWF0cyArIGRpc3RyaWN0UmVzdWx0c1tjb3VudHldLmxldmVsaW5nU2VhdHM7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFydHlDb2RlIGluIGRpc3RyaWN0UGFydHlSZXN1bHRzW2NvdW50eV0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChkaXN0cmljdFBhcnR5UmVzdWx0c1tjb3VudHldLmhhc093blByb3BlcnR5KHBhcnR5Q29kZSkgJiYgIWlsbGVnYWxQYXJ0eUNvZGVzLmhhcyhwYXJ0eUNvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGVyY2VudFNlYXRzID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKGRpc3RyaWN0UGFydHlSZXN1bHRzW2NvdW50eV1bcGFydHlDb2RlXS50b3RhbFNlYXRzIC8gdG90YWxEaXN0cmljdFNlYXRzKSAqIDEwMDtcclxuICAgICAgICAgICAgICAgICAgICBkaXN0cmljdFBhcnR5UmVzdWx0c1tjb3VudHldW3BhcnR5Q29kZV0ucHJvcG9ydGlvbmFsaXR5ID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudFNlYXRzIC0gZGlzdHJpY3RQYXJ0eVJlc3VsdHNbY291bnR5XVtwYXJ0eUNvZGVdLnBlcmNlbnRWb3RlcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUFkanVzdGVkUXVvdGllbnQoXHJcbiAgICBhbGdvcml0aG06IEFsZ29yaXRobVR5cGUsXHJcbiAgICBzZWF0c1dvbjogbnVtYmVyLFxyXG4gICAgYXZlcmFnZVZvdGVzUGVyU2VhdDogbnVtYmVyLFxyXG4gICAgdm90ZXM6IG51bWJlcixcclxuICAgIGZpcnN0RGl2aXNvcjogbnVtYmVyLFxyXG4gICAgdG90YWxTZWF0czogbnVtYmVyLFxyXG4gICAgdG90YWxWb3RlczogbnVtYmVyXHJcbik6IG51bWJlciB7XHJcbiAgICBjb25zdCBxdW90aWVudCA9IGNhbGN1bGF0ZVF1b3RpZW50KGFsZ29yaXRobSwgc2VhdHNXb24sIHZvdGVzLCBmaXJzdERpdmlzb3IsIHRvdGFsU2VhdHMsIHRvdGFsVm90ZXMpO1xyXG5cclxuICAgIHJldHVybiBxdW90aWVudCAvIGF2ZXJhZ2VWb3Rlc1BlclNlYXQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVRdW90aWVudChcclxuICAgIGFsZ29yaXRobTogQWxnb3JpdGhtVHlwZSxcclxuICAgIHNlYXRzV29uOiBudW1iZXIsXHJcbiAgICB2b3RlczogbnVtYmVyLFxyXG4gICAgZmlyc3REaXZpc29yOiBudW1iZXIsXHJcbiAgICB0b3RhbFNlYXRzOiBudW1iZXIsXHJcbiAgICB0b3RhbFZvdGVzOiBudW1iZXJcclxuKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IGRlbm9taW5hdG9yID0gZ2V0RGVub21pbmF0b3IoXHJcbiAgICAgICAgYWxnb3JpdGhtLFxyXG4gICAgICAgIHNlYXRzV29uLFxyXG4gICAgICAgIGZpcnN0RGl2aXNvciwgLy8gV2hlbiBjb21wdXRpbmcgdGhlIGxldmVsaW5nIHNlYXRzLCB1c2UgdGhlIHVubW9kaWZpZWQgU2FpbnRlIExhZ8O8ZXNcclxuICAgICAgICB0b3RhbFNlYXRzLFxyXG4gICAgICAgIHRvdGFsVm90ZXNcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHZvdGVzIC8gZGVub21pbmF0b3I7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSB0b3RhbCBudW1iZXIgb2Ygc2VhdHMgYW5kIHRoZSBhdmVyYWdlIG51bWJlciBvZiB2b3RlcyBwZXIgc2VhdCBmb3IgZWFjaCBkaXN0cmljdFxyXG4gKiBAcGFyYW0gZGlzdHJpY3RSZXN1bHRzIFRoZSBkaXN0cmljdCByZXN1bHRzIHRvIGZpbmFsaXplXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZmluYWxpemVEaXN0cmljdENhbGN1bGF0aW9ucyhkaXN0cmljdFJlc3VsdHM6IF8uRGljdGlvbmFyeTxEaXN0cmljdFJlc3VsdD4pIHtcclxuICAgIGZvciAoY29uc3QgZGlzdHJpY3QgaW4gZGlzdHJpY3RSZXN1bHRzKSB7XHJcbiAgICAgICAgaWYgKGRpc3RyaWN0UmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShkaXN0cmljdCkpIHtcclxuICAgICAgICAgICAgZGlzdHJpY3RSZXN1bHRzW2Rpc3RyaWN0XS50b3RhbFNlYXRzID1cclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0UmVzdWx0c1tkaXN0cmljdF0uZGlzdHJpY3RTZWF0cyArIGRpc3RyaWN0UmVzdWx0c1tkaXN0cmljdF0ubGV2ZWxpbmdTZWF0cztcclxuICAgICAgICAgICAgZGlzdHJpY3RSZXN1bHRzW2Rpc3RyaWN0XS52b3Rlc1BlclNlYXQgPVxyXG4gICAgICAgICAgICAgICAgZGlzdHJpY3RSZXN1bHRzW2Rpc3RyaWN0XS52b3RlcyAvIGRpc3RyaWN0UmVzdWx0c1tkaXN0cmljdF0udG90YWxTZWF0cztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVGaW5hbFF1b3RpZW50cyhcclxuICAgIGFsZ29yaXRobTogQWxnb3JpdGhtVHlwZSxcclxuICAgIGZpcnN0RGl2aXNvcjogbnVtYmVyLFxyXG4gICAgYWRqdXN0ZWQ6IGJvb2xlYW4sXHJcbiAgICBkaXN0cmljdFJlc3VsdHM6IF8uRGljdGlvbmFyeTxEaXN0cmljdFJlc3VsdD5cclxuKTogRGlzdHJpY3RRdW90aWVudHNbXSB7XHJcbiAgICBjb25zdCBmaW5hbFF1b3RpZW50czogRGlzdHJpY3RRdW90aWVudHNbXSA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBkaXN0cmljdE5hbWUgaW4gZGlzdHJpY3RSZXN1bHRzKSB7XHJcbiAgICAgICAgaWYgKGRpc3RyaWN0UmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShkaXN0cmljdE5hbWUpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3RyaWN0ID0gZGlzdHJpY3RSZXN1bHRzW2Rpc3RyaWN0TmFtZV07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkaXN0cmljdFF1b3RpZW50OiBEaXN0cmljdFF1b3RpZW50cyA9IHtcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0OiBkaXN0cmljdC5uYW1lLFxyXG4gICAgICAgICAgICAgICAgbGV2ZWxsaW5nU2VhdFJvdW5kczogW10sXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBkaXN0cmljdC5wYXJ0eVJlc3VsdHMuZm9yRWFjaCgocGFydHkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHF1b3RpZW50ID0gYWRqdXN0ZWRcclxuICAgICAgICAgICAgICAgICAgICA/IGNhbGN1bGF0ZUFkanVzdGVkUXVvdGllbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnR5LmRpc3RyaWN0U2VhdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzdHJpY3Qudm90ZXMgLyBkaXN0cmljdC5kaXN0cmljdFNlYXRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnR5LnZvdGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0RGl2aXNvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0cmljdC5kaXN0cmljdFNlYXRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RyaWN0LnZvdGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgOiBjYWxjdWxhdGVRdW90aWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBhbGdvcml0aG0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydHkuZGlzdHJpY3RTZWF0cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0eS52b3RlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdERpdmlzb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzdHJpY3QuZGlzdHJpY3RTZWF0cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0cmljdC52b3Rlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFF1b3RpZW50LmxldmVsbGluZ1NlYXRSb3VuZHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFydHlDb2RlOiBwYXJ0eS5wYXJ0eUNvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcXVvdGllbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgd29uTGV2ZWxsaW5nU2VhdDogcGFydHkubGV2ZWxpbmdTZWF0cyA+IDAsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBmaW5hbFF1b3RpZW50cy5wdXNoKGRpc3RyaWN0UXVvdGllbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmluYWxRdW90aWVudHM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTb3J0cyBhIGxpc3Qgb2YgbGV2ZWxpbmcgc2VhdHMgYXMgZGVzY3JpYmVkIGhlcmU6IGh0dHBzOi8vbG92ZGF0YS5uby9OTC9sb3YvMjAwMi0wNi0yOC01Ny/CpzExLTZcclxuICogQHBhcmFtIGxldmVsaW5nU2VhdHMgVGhlIGxpc3Qgb2YgbGV2ZWxpbmcgc2VhdHMgdG8gYmUgc29ydGVkXHJcbiAqIEBwYXJhbSBwYXJ0eVJlc3VsdHMgQSBfLkRpY3Rpb25hcnkgdXNlZCB0byBsb29rIHVwIGhvdyBtYW55IHZvdGVzIHRoZSBwYXJ0aWVzIGdvdFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRMZXZlbGluZ1NlYXRzKGxldmVsaW5nU2VhdHM6IExldmVsaW5nU2VhdFtdLCBwYXJ0eVJlc3VsdHM6IF8uRGljdGlvbmFyeTxQYXJ0eVJlc3VsdD4pIHtcclxuICAgIHJldHVybiBsZXZlbGluZ1NlYXRzLnNvcnQoKHYsIHQpID0+IHtcclxuICAgICAgICBpZiAodC5xdW90aWVudCAhPT0gdi5xdW90aWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5xdW90aWVudCAtIHYucXVvdGllbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFydHlSZXN1bHRzW3QucGFydHlDb2RlXS52b3RlcyAhPT0gcGFydHlSZXN1bHRzW3YucGFydHlDb2RlXS52b3Rlcykge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFydHlSZXN1bHRzW3QucGFydHlDb2RlXS52b3RlcyAtIHBhcnR5UmVzdWx0c1t2LnBhcnR5Q29kZV0udm90ZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAtIDAuNTsgLy8gUmFuZG9tIG51bWJlciBiZXR3ZWVuIC0wLjUgYW5kIDAuNVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUxldmVsaW5nU2VhdEFycmF5KFxyXG4gICAgYWxnb3JpdGhtOiBBbGdvcml0aG1UeXBlLFxyXG4gICAgbGV2ZWxpbmdQYXJ0eUNvZGVzOiBzdHJpbmdbXSxcclxuICAgIHBhcnR5UmVzdWx0czogXy5EaWN0aW9uYXJ5PFBhcnR5UmVzdWx0PixcclxuICAgIGRpc3RyaWN0UmVzdWx0czogXy5EaWN0aW9uYXJ5PERpc3RyaWN0UmVzdWx0PixcclxuICAgIGRpc3RyaWN0UGFydHlSZXN1bHRzOiBfLkRpY3Rpb25hcnk8Xy5EaWN0aW9uYXJ5PFBhcnR5UmVzdWx0Pj4sXHJcbiAgICB1c2VBZGp1c3RlZFF1b3RpZW50OiBib29sZWFuXHJcbik6IExldmVsaW5nU2VhdFtdIHtcclxuICAgIGxldCBsZXZlbGluZ1NlYXRzOiBMZXZlbGluZ1NlYXRbXSA9IFtdO1xyXG5cclxuICAgIGZvciAoY29uc3QgY291bnR5TmFtZSBpbiBkaXN0cmljdFJlc3VsdHMpIHtcclxuICAgICAgICBpZiAoZGlzdHJpY3RQYXJ0eVJlc3VsdHMuaGFzT3duUHJvcGVydHkoY291bnR5TmFtZSkpIHtcclxuICAgICAgICAgICAgY29uc3QgYXZlcmFnZVZvdGVzUGVyU2VhdCA9IGRpc3RyaWN0UmVzdWx0c1tjb3VudHlOYW1lXS52b3RlcyAvIGRpc3RyaWN0UmVzdWx0c1tjb3VudHlOYW1lXS5kaXN0cmljdFNlYXRzO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhcnR5Q29kZSBvZiBsZXZlbGluZ1BhcnR5Q29kZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnR5UmVzdWx0ID0gZGlzdHJpY3RQYXJ0eVJlc3VsdHNbY291bnR5TmFtZV1bcGFydHlDb2RlXTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJ0eVJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRqdXN0ZWRRdW90aWVudCA9IHVzZUFkanVzdGVkUXVvdGllbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBjYWxjdWxhdGVBZGp1c3RlZFF1b3RpZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGdvcml0aG0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnR5UmVzdWx0LmRpc3RyaWN0U2VhdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2VWb3Rlc1BlclNlYXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnR5UmVzdWx0LnZvdGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0cmljdFJlc3VsdHNbY291bnR5TmFtZV0ubGV2ZWxpbmdTZWF0cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzdHJpY3RSZXN1bHRzW2NvdW50eU5hbWVdLnZvdGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGNhbGN1bGF0ZVF1b3RpZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGdvcml0aG0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnR5UmVzdWx0LmRpc3RyaWN0U2VhdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnR5UmVzdWx0LnZvdGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RyaWN0UmVzdWx0c1tjb3VudHlOYW1lXS5sZXZlbGluZ1NlYXRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0cmljdFJlc3VsdHNbY291bnR5TmFtZV0udm90ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlYXQ6IExldmVsaW5nU2VhdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdHJpY3Q6IGNvdW50eU5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnR5Q29kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVvdGllbnQ6IGFkanVzdGVkUXVvdGllbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXROdW1iZXI6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1b3RpZW50TnVtYmVyOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWxpbmdTZWF0cy5wdXNoKHNlYXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV2ZWxpbmdTZWF0cyA9IHNvcnRMZXZlbGluZ1NlYXRzKGxldmVsaW5nU2VhdHMsIHBhcnR5UmVzdWx0cyk7XHJcbiAgICByZXR1cm4gbGV2ZWxpbmdTZWF0cztcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIGFuIGFycmF5IG9mIHJlc3VsdHMgdG8gYSBEaWN0aW9uYXJ5IGZyb20gUGFydHkgQ29kZSB0byBWb3Rlcy5cclxuICpcclxuICogQHBhcmFtIHJlc3VsdHMgQW4gYXJyYXkgb2YgcmVzdWx0c1xyXG4gKi9cclxuZnVuY3Rpb24gcmVzdWx0QXJyYXlUb0RpY3Rpb25hcnkocmVzdWx0czogXy5EaWN0aW9uYXJ5PFBhcnR5UmVzdWx0Pik6IF8uRGljdGlvbmFyeTxudW1iZXI+IHtcclxuICAgIGNvbnN0IHJlc3VsdERpY3Q6IF8uRGljdGlvbmFyeTxudW1iZXI+ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IHBhcnR5Q29kZSBpbiByZXN1bHRzKSB7XHJcbiAgICAgICAgaWYgKHJlc3VsdHMuaGFzT3duUHJvcGVydHkocGFydHlDb2RlKSkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJ0eVZvdGVzID0gcmVzdWx0c1twYXJ0eUNvZGVdO1xyXG4gICAgICAgICAgICByZXN1bHREaWN0W3BhcnR5Vm90ZXMucGFydHlDb2RlXSA9IHBhcnR5Vm90ZXMudm90ZXM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHREaWN0O1xyXG59XHJcblxyXG4vKipcclxuICogQ29udmVydHMgbnVtZXJpY2FsIElEcyBpbnRvIHRoZWlyIG1hdGNoaW5nIGFsZ29yaXRobSB0eXBlc1xyXG4gKlxyXG4gKiBAcGFyYW0gdHlwZSBUaGUgbnVtZXJpY2FsIElEIG9mIHRoZSBhbGdvcml0aG1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGdvcml0aG1UeXBlKHR5cGU6IG51bWJlcikge1xyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICByZXR1cm4gQWxnb3JpdGhtVHlwZS5TQUlOVEVfTEFHVUU7XHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICByZXR1cm4gQWxnb3JpdGhtVHlwZS5EX0hPTkRUO1xyXG4gICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgcmV0dXJuIEFsZ29yaXRobVR5cGUuTEFSR0VTVF9GUkFDVElPTl9IQVJFO1xyXG4gICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgcmV0dXJuIEFsZ29yaXRobVR5cGUuTEFSR0VTVF9GUkFDVElPTl9EUk9PUDtcclxuICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgIHJldHVybiBBbGdvcml0aG1UeXBlLkxBUkdFU1RfRlJBQ1RJT05fSEFHRU5CQUNIX0JJU0NIT0ZGO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBBbGdvcml0aG1UeXBlLlVOREVGSU5FRDtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIG51bWVyaWNhbCBJRHMgaW50byB0aGVpciBtYXRjaGluZyBhbGdvcml0aG0gbmFtZVxyXG4gKlxyXG4gKiBAcGFyYW0gdHlwZSBUaGUgbnVtZXJpY2FsIElEIG9mIHRoZSBhbGdvcml0aG1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGdvcml0aG1OYW1lKHR5cGU6IG51bWJlcikge1xyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJTYWludGUtTGFnw7xlXCI7XHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJkJ0hvbmR0XCI7XHJcbiAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJTdMO4cnN0ZSBicsO4ayAoSGFyZSlcIjtcclxuICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgIHJldHVybiBcIlN0w7hyc3RlIGJyw7hrIChEcm9vcClcIjtcclxuICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgIHJldHVybiBcIlN0w7hyc3RlIGJyw7hrIChIYWdlbmJhY2gtQmlzY2hvZmYpXCI7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIFwiVWRlZmluZXJ0XCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBBbGdvcml0aG1UeXBlcyBpbnRvIHRoZWlyIG1hdGNoaW5nIGFsZ29yaXRobSBuYW1lXHJcbiAqXHJcbiAqIEBwYXJhbSB0eXBlIFRoZSBBbGdvcml0aG1UeXBlIG9mIHRoZSBhbGdvcml0aG1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGdvcml0aG1OYW1lRnJvbVR5cGUodHlwZTogQWxnb3JpdGhtVHlwZSkge1xyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSBBbGdvcml0aG1UeXBlLlNBSU5URV9MQUdVRTpcclxuICAgICAgICAgICAgcmV0dXJuIFwiU2FpbnRlLUxhZ8O8ZVwiO1xyXG4gICAgICAgIGNhc2UgQWxnb3JpdGhtVHlwZS5EX0hPTkRUOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJkJ0hvbmR0XCI7XHJcbiAgICAgICAgY2FzZSBBbGdvcml0aG1UeXBlLkxBUkdFU1RfRlJBQ1RJT05fSEFSRTpcclxuICAgICAgICAgICAgcmV0dXJuIFwiU3TDuHJzdGUgYnLDuGsgKEhhcmUpXCI7XHJcbiAgICAgICAgY2FzZSBBbGdvcml0aG1UeXBlLkxBUkdFU1RfRlJBQ1RJT05fRFJPT1A6XHJcbiAgICAgICAgICAgIHJldHVybiBcIlN0w7hyc3RlIGJyw7hrIChEcm9vcClcIjtcclxuICAgICAgICBjYXNlIEFsZ29yaXRobVR5cGUuTEFSR0VTVF9GUkFDVElPTl9IQUdFTkJBQ0hfQklTQ0hPRkY6XHJcbiAgICAgICAgICAgIHJldHVybiBcIlN0w7hyc3RlIGJyw7hrIChIYWdlbmJhY2gtQmlzY2hvZmYpXCI7XHJcbiAgICAgICAgY2FzZSBBbGdvcml0aG1UeXBlLlVOREVGSU5FRDpcclxuICAgICAgICAgICAgcmV0dXJuIFwiVWRlZmluZXJ0XCI7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgY2hlY2tFeGhhdXN0aXZlbHkodHlwZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ29udmVydHMgc3RyaW5nIElEcyBpbnRvIHRoZWlyIG1hdGNoaW5nIGFsZ29yaXRobSB0eXBlc1xyXG4gKlxyXG4gKiBAcGFyYW0gdHlwZSBUaGUgc3RyaW5nIElEIG9mIHRoZSBhbGdvcml0aG1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGdvcml0aG1UeXBlU3RyaW5nKHR5cGU6IHN0cmluZykge1xyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSBcIlNhaW50ZSBMYWd1w6tzIChtb2RpZmllZClcIjpcclxuICAgICAgICAgICAgcmV0dXJuIEFsZ29yaXRobVR5cGUuU0FJTlRFX0xBR1VFO1xyXG4gICAgICAgIGNhc2UgXCJkJ0hvbmR0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiBBbGdvcml0aG1UeXBlLkRfSE9ORFQ7XHJcbiAgICAgICAgY2FzZSBcIkxhcmdlc3QgZnJhY3Rpb24gKEhhcmUpXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBBbGdvcml0aG1UeXBlLkxBUkdFU1RfRlJBQ1RJT05fSEFSRTtcclxuICAgICAgICBjYXNlIFwiTGFyZ2VzdCBmcmFjdGlvbiAoRHJvb3ApXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBBbGdvcml0aG1UeXBlLkxBUkdFU1RfRlJBQ1RJT05fRFJPT1A7XHJcbiAgICAgICAgY2FzZSBcIkxhcmdlc3QgZnJhY3Rpb24gKEhhZ2VuYmFjaC1CaXNjaG9mZilcIjpcclxuICAgICAgICAgICAgcmV0dXJuIEFsZ29yaXRobVR5cGUuTEFSR0VTVF9GUkFDVElPTl9IQUdFTkJBQ0hfQklTQ0hPRkY7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIEFsZ29yaXRobVR5cGUuVU5ERUZJTkVEO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2tzIHdoZXRoZXIgYW4gYWxnb3JpdGhtIGlzIGEgcXVvdGllbnQgdHlwZSBhbGdvcml0aG0uIChlZy4gU2FpbnRlIExhZ3XDq3Mgb3IgZCdIb25kdClcclxuICpcclxuICogQHBhcmFtIGFsZ29yaXRobSBUaGUgYWxnb3JpdGhtIHRvIGNoZWNrXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNRdW90aWVudEFsZ29yaXRobShhbGdvcml0aG06IEFsZ29yaXRobVR5cGUpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBhbGdvcml0aG0gPT09IEFsZ29yaXRobVR5cGUuU0FJTlRFX0xBR1VFIHx8IGFsZ29yaXRobSA9PT0gQWxnb3JpdGhtVHlwZS5EX0hPTkRUO1xyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2tzIHdoZXRoZXIgYW4gYWxnb3JpdGhtIGlzIGEgbGFyZ2VzdCBmcmFjdGlvbiB0eXBlIGFsZ29yaXRobSAoZWcuIEhhcmUsIERyb29wIG9yIEhhZ2VuYmFjaC1CaXNjaG9mZilcclxuICpcclxuICogQHBhcmFtIGFsZ29yaXRobSBUaGUgYWxnb3JpdGhtIHRvIGNoZWNrXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNMYXJnZXN0RnJhY3Rpb25BbGdvcml0aG0oYWxnb3JpdGhtOiBBbGdvcml0aG1UeXBlKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIGFsZ29yaXRobSA9PT0gQWxnb3JpdGhtVHlwZS5MQVJHRVNUX0ZSQUNUSU9OX0RST09QIHx8XHJcbiAgICAgICAgYWxnb3JpdGhtID09PSBBbGdvcml0aG1UeXBlLkxBUkdFU1RfRlJBQ1RJT05fSEFSRSB8fFxyXG4gICAgICAgIGFsZ29yaXRobSA9PT0gQWxnb3JpdGhtVHlwZS5MQVJHRVNUX0ZSQUNUSU9OX0hBR0VOQkFDSF9CSVNDSE9GRlxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZEFwcGx5MjAwNVJlZm9ybSh5ZWFyOiBudW1iZXIpIHtcclxuICAgIHJldHVybiB5ZWFyID49IDIwMDU7XHJcbn1cclxuIiwiZXhwb3J0IGVudW0gR2xvYmFsQWN0aW9uVHlwZSB7XHJcbiAgICBDTEVBUl9TVEFURSA9IFwiQ0xFQVJfU1RBVEVcIixcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyU3RhdGUoKSB7XHJcbiAgICBjb25zdCBhY3Rpb246IENsZWFyU3RhdGUgPSB7XHJcbiAgICAgICAgdHlwZTogR2xvYmFsQWN0aW9uVHlwZS5DTEVBUl9TVEFURSxcclxuICAgIH07XHJcbiAgICByZXR1cm4gYWN0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENsZWFyU3RhdGUge1xyXG4gICAgdHlwZTogR2xvYmFsQWN0aW9uVHlwZS5DTEVBUl9TVEFURTtcclxufSIsImV4cG9ydCBpbnRlcmZhY2UgUmF3RGljdGlvbmFyeUVudHJ5IHtcclxuICAgIGlkOiBudW1iZXI7XHJcbiAgICBrZXk6IHN0cmluZztcclxuICAgIHZhbHVlOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3B5RGljdGlvbmFyeTxUPihkaWN0aW9uYXJ5OiBfLkRpY3Rpb25hcnk8VD4pOiBfLkRpY3Rpb25hcnk8VD4ge1xyXG4gICAgY29uc3QgY29weTogXy5EaWN0aW9uYXJ5PFQ+ID0ge307XHJcblxyXG4gICAgZm9yIChjb25zdCBlbnRyeSBpbiBkaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgaWYgKGRpY3Rpb25hcnkuaGFzT3duUHJvcGVydHkoZW50cnkpKSB7XHJcbiAgICAgICAgICAgIGNvcHlbZW50cnldID0gZGljdGlvbmFyeVtlbnRyeV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjb3B5O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGljdGlvbmFyeVRvQXJyYXk8VD4oZGljdGlvbmFyeTogXy5EaWN0aW9uYXJ5PFQ+KTogVFtdIHtcclxuICAgIGNvbnN0IGFycmF5OiBUW10gPSBbXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBkaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgaWYgKGRpY3Rpb25hcnkuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICBhcnJheS5wdXNoKGRpY3Rpb25hcnlba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhcnJheTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJhd0RpY3Rpb25hcnlUb0RpY3Rpb25hcnkocmF3RGljdGlvbmFyeTogQXJyYXk8UmF3RGljdGlvbmFyeUVudHJ5Pik6IF8uRGljdGlvbmFyeTxudW1iZXI+IHtcclxuICAgIGNvbnN0IGRpY3Q6IF8uRGljdGlvbmFyeTxudW1iZXI+ID0ge307XHJcblxyXG4gICAgcmF3RGljdGlvbmFyeS5mb3JFYWNoKChlbnRyeSkgPT4gKGRpY3RbZW50cnkua2V5XSA9IGVudHJ5LnZhbHVlKSk7XHJcblxyXG4gICAgcmV0dXJuIGRpY3Q7XHJcbn1cclxuIiwiaW1wb3J0IHsgUGFydHlSZXN1bHQsIERpc3RyaWN0UmVzdWx0LCBMZXZlbGluZ1NlYXQsIFBhcnR5UmVzdFF1b3RpZW50cyB9IGZyb20gXCIuLi8uLi9jb21wdXRhdGlvblwiO1xyXG5pbXBvcnQgeyByb3VuZE51bWJlciB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvbnVtYmVyXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFydHlUYWJsZURhdGEoXHJcbiAgICBwYXJ0eVJlc3VsdHM6IFBhcnR5UmVzdWx0W10sXHJcbiAgICBzaG93UGFydGllc1dpdGhvdXRTZWF0czogYm9vbGVhbixcclxuICAgIG51bWJlck9mRGVjaW1hbHM6IG51bWJlclxyXG4pOiBQYXJ0eVJlc3VsdFtdIHtcclxuICAgIGxldCBmaWx0ZXJlZFJlc3VsdHMgPSBbLi4ucGFydHlSZXN1bHRzXTtcclxuXHJcbiAgICBpZiAoIXNob3dQYXJ0aWVzV2l0aG91dFNlYXRzKSB7XHJcbiAgICAgICAgZmlsdGVyZWRSZXN1bHRzID0gZmlsdGVyZWRSZXN1bHRzLmZpbHRlcigocGFydHkpID0+IHBhcnR5LnRvdGFsU2VhdHMgPiAwKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByb3VuZGVkUmVzdWx0czogUGFydHlSZXN1bHRbXSA9IFtdO1xyXG5cclxuICAgIGZvciAoY29uc3QgcGFydHlSZXN1bHQgb2YgZmlsdGVyZWRSZXN1bHRzKSB7XHJcbiAgICAgICAgcm91bmRlZFJlc3VsdHMucHVzaCh7XHJcbiAgICAgICAgICAgIHBhcnR5Q29kZTogcGFydHlSZXN1bHQucGFydHlDb2RlLFxyXG4gICAgICAgICAgICBwYXJ0eU5hbWU6IHBhcnR5UmVzdWx0LnBhcnR5TmFtZSxcclxuICAgICAgICAgICAgdm90ZXM6IHBhcnR5UmVzdWx0LnZvdGVzLFxyXG4gICAgICAgICAgICBwZXJjZW50Vm90ZXM6IHJvdW5kTnVtYmVyKHBhcnR5UmVzdWx0LnBlcmNlbnRWb3RlcywgbnVtYmVyT2ZEZWNpbWFscyksXHJcbiAgICAgICAgICAgIGRpc3RyaWN0U2VhdHM6IHBhcnR5UmVzdWx0LmRpc3RyaWN0U2VhdHMsXHJcbiAgICAgICAgICAgIGxldmVsaW5nU2VhdHM6IHBhcnR5UmVzdWx0LmxldmVsaW5nU2VhdHMsXHJcbiAgICAgICAgICAgIHRvdGFsU2VhdHM6IHBhcnR5UmVzdWx0LnRvdGFsU2VhdHMsXHJcbiAgICAgICAgICAgIHByb3BvcnRpb25hbGl0eTogcm91bmROdW1iZXIocGFydHlSZXN1bHQucHJvcG9ydGlvbmFsaXR5LCBudW1iZXJPZkRlY2ltYWxzKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcm91bmRlZFJlc3VsdHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREaXN0cmljdFRhYmxlRGF0YShkaXN0cmljdFJlc3VsdHM6IERpc3RyaWN0UmVzdWx0W10sIG51bWJlck9mRGVjaW1hbHM6IG51bWJlcik6IERpc3RyaWN0UmVzdWx0W10ge1xyXG4gICAgY29uc3Qgcm91bmRlZFJlc3VsdHM6IERpc3RyaWN0UmVzdWx0W10gPSBbXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGRpc3RyaWN0UmVzdWx0IG9mIGRpc3RyaWN0UmVzdWx0cykge1xyXG4gICAgICAgIHJvdW5kZWRSZXN1bHRzLnB1c2goe1xyXG4gICAgICAgICAgICBuYW1lOiBkaXN0cmljdFJlc3VsdC5uYW1lLFxyXG4gICAgICAgICAgICB2b3RlczogZGlzdHJpY3RSZXN1bHQudm90ZXMsXHJcbiAgICAgICAgICAgIHBlcmNlbnRWb3Rlczogcm91bmROdW1iZXIoZGlzdHJpY3RSZXN1bHQucGVyY2VudFZvdGVzLCBudW1iZXJPZkRlY2ltYWxzKSxcclxuICAgICAgICAgICAgZGlzdHJpY3RTZWF0czogZGlzdHJpY3RSZXN1bHQuZGlzdHJpY3RTZWF0cyxcclxuICAgICAgICAgICAgbGV2ZWxpbmdTZWF0czogZGlzdHJpY3RSZXN1bHQubGV2ZWxpbmdTZWF0cyxcclxuICAgICAgICAgICAgdG90YWxTZWF0czogZGlzdHJpY3RSZXN1bHQudG90YWxTZWF0cyxcclxuICAgICAgICAgICAgdm90ZXNQZXJTZWF0OiByb3VuZE51bWJlcihkaXN0cmljdFJlc3VsdC52b3Rlc1BlclNlYXQsIG51bWJlck9mRGVjaW1hbHMpLFxyXG4gICAgICAgICAgICBkaXN0cmljdFNlYXRSZXN1bHQ6IGRpc3RyaWN0UmVzdWx0LmRpc3RyaWN0U2VhdFJlc3VsdCxcclxuICAgICAgICAgICAgcGFydHlSZXN1bHRzOiBkaXN0cmljdFJlc3VsdC5wYXJ0eVJlc3VsdHMsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJvdW5kZWRSZXN1bHRzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VhdERpc3RyaWJ1dGlvbkRhdGEoXHJcbiAgICBkaXN0cmljdFJlc3VsdHM6IERpc3RyaWN0UmVzdWx0W10sXHJcbiAgICBwYXJ0eVJlc3VsdHM6IFBhcnR5UmVzdWx0W10sXHJcbiAgICBzaG93UGFydGllc1dpdGhvdXRTZWF0czogYm9vbGVhblxyXG4pIHtcclxuICAgIGlmIChzaG93UGFydGllc1dpdGhvdXRTZWF0cykge1xyXG4gICAgICAgIHJldHVybiBkaXN0cmljdFJlc3VsdHM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHBhcnR5U2VhdHM6IF8uRGljdGlvbmFyeTxudW1iZXI+ID0ge307XHJcbiAgICAgICAgY29uc3QgbmV3RGlzdHJpY3RSZXN1bHRzOiBEaXN0cmljdFJlc3VsdFtdID0gW107XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgcGFydHkgb2YgcGFydHlSZXN1bHRzKSB7XHJcbiAgICAgICAgICAgIHBhcnR5U2VhdHNbcGFydHkucGFydHlDb2RlXSA9IHBhcnR5LnRvdGFsU2VhdHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGRpc3RyaWN0IG9mIGRpc3RyaWN0UmVzdWx0cykge1xyXG4gICAgICAgICAgICBuZXdEaXN0cmljdFJlc3VsdHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBkaXN0cmljdC5uYW1lLFxyXG4gICAgICAgICAgICAgICAgdm90ZXM6IGRpc3RyaWN0LnZvdGVzLFxyXG4gICAgICAgICAgICAgICAgcGVyY2VudFZvdGVzOiBkaXN0cmljdC5wZXJjZW50Vm90ZXMsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFNlYXRzOiBkaXN0cmljdC5kaXN0cmljdFNlYXRzLFxyXG4gICAgICAgICAgICAgICAgbGV2ZWxpbmdTZWF0czogZGlzdHJpY3QubGV2ZWxpbmdTZWF0cyxcclxuICAgICAgICAgICAgICAgIHRvdGFsU2VhdHM6IGRpc3RyaWN0LnRvdGFsU2VhdHMsXHJcbiAgICAgICAgICAgICAgICB2b3Rlc1BlclNlYXQ6IGRpc3RyaWN0LnZvdGVzUGVyU2VhdCxcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0U2VhdFJlc3VsdDogZGlzdHJpY3QuZGlzdHJpY3RTZWF0UmVzdWx0LFxyXG4gICAgICAgICAgICAgICAgcGFydHlSZXN1bHRzOiBkaXN0cmljdC5wYXJ0eVJlc3VsdHMuZmlsdGVyKChwYXJ0eSkgPT4gcGFydHlTZWF0c1twYXJ0eS5wYXJ0eUNvZGVdID4gMCksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ld0Rpc3RyaWN0UmVzdWx0cztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2FsU2VhdERpc3RyaWJ1dGlvbihkaXN0cmljdFJlc3VsdHM6IERpc3RyaWN0UmVzdWx0W10sIHNob3dQYXJ0aWVzV2l0aG91dFNlYXRzOiBib29sZWFuKSB7XHJcbiAgICBpZiAoc2hvd1BhcnRpZXNXaXRob3V0U2VhdHMpIHtcclxuICAgICAgICByZXR1cm4gZGlzdHJpY3RSZXN1bHRzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBuZXdEaXN0cmljdFJlc3VsdHM6IERpc3RyaWN0UmVzdWx0W10gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBkaXN0cmljdCBvZiBkaXN0cmljdFJlc3VsdHMpIHtcclxuICAgICAgICAgICAgbmV3RGlzdHJpY3RSZXN1bHRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogZGlzdHJpY3QubmFtZSxcclxuICAgICAgICAgICAgICAgIHZvdGVzOiBkaXN0cmljdC52b3RlcyxcclxuICAgICAgICAgICAgICAgIHBlcmNlbnRWb3RlczogZGlzdHJpY3QucGVyY2VudFZvdGVzLFxyXG4gICAgICAgICAgICAgICAgZGlzdHJpY3RTZWF0czogZGlzdHJpY3QuZGlzdHJpY3RTZWF0cyxcclxuICAgICAgICAgICAgICAgIGxldmVsaW5nU2VhdHM6IGRpc3RyaWN0LmxldmVsaW5nU2VhdHMsXHJcbiAgICAgICAgICAgICAgICB0b3RhbFNlYXRzOiBkaXN0cmljdC50b3RhbFNlYXRzLFxyXG4gICAgICAgICAgICAgICAgdm90ZXNQZXJTZWF0OiBkaXN0cmljdC52b3Rlc1BlclNlYXQsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFNlYXRSZXN1bHQ6IGRpc3RyaWN0LmRpc3RyaWN0U2VhdFJlc3VsdCxcclxuICAgICAgICAgICAgICAgIHBhcnR5UmVzdWx0czogZGlzdHJpY3QucGFydHlSZXN1bHRzLmZpbHRlcigocGFydHkpID0+IHBhcnR5LnRvdGFsU2VhdHMgPiAwKSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3RGlzdHJpY3RSZXN1bHRzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VhdHNQZXJQYXJ0eURhdGEocGFydHlSZXN1bHRzOiBQYXJ0eVJlc3VsdFtdLCBzaG93UGFydGllc1dpdGhvdXRTZWF0czogYm9vbGVhbik6IFBhcnR5UmVzdWx0W10ge1xyXG4gICAgaWYgKHNob3dQYXJ0aWVzV2l0aG91dFNlYXRzKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnR5UmVzdWx0cztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnR5UmVzdWx0cy5maWx0ZXIoKHBhcnR5KSA9PiBwYXJ0eS50b3RhbFNlYXRzID4gMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3VuZFBhcnR5UmVzdWx0cyhwYXJ0eVJlc3VsdHM6IFBhcnR5UmVzdWx0W10sIG51bWJlck9mRGVjaW1hbHM6IG51bWJlcik6IFBhcnR5UmVzdWx0W10ge1xyXG4gICAgY29uc3Qgcm91bmRlZFJlc3VsdHM6IFBhcnR5UmVzdWx0W10gPSBbXTtcclxuICAgIHBhcnR5UmVzdWx0cy5mb3JFYWNoKChyZXN1bHQpID0+IHtcclxuICAgICAgICByb3VuZGVkUmVzdWx0cy5wdXNoKHtcclxuICAgICAgICAgICAgLi4ucmVzdWx0LFxyXG4gICAgICAgICAgICBwZXJjZW50Vm90ZXM6IHJvdW5kTnVtYmVyKHJlc3VsdC5wZXJjZW50Vm90ZXMsIG51bWJlck9mRGVjaW1hbHMpLFxyXG4gICAgICAgICAgICBwcm9wb3J0aW9uYWxpdHk6IHJvdW5kTnVtYmVyKHJlc3VsdC5wcm9wb3J0aW9uYWxpdHksIG51bWJlck9mRGVjaW1hbHMpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcm91bmRlZFJlc3VsdHM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIHNob3VsZCB1bmRlciBubyBjaXJjdW1zdGFuY2VzIGJlIHVzZWQgYW55d2hlcmUgZWxzZSB0aGFuIGluXHJcbiAqIGdldExldmVsbGluZ1NlYXRzKC4uLikgaW4gUHJlc2VudGF0aW9uQ29tcG9uZW50IC0tIGl0IGlzIHJlcXVpcmVkIG9ubHlcclxuICogYmVjYXVzZSBvZiB0aGUgd2F5IHRoZSBkYXRhIGlzIHN0b3JlZCwgYW5kIHdpbGwgdW5xdWVzdGlvbmFibHkgYmFja2ZpcmUgaWZcclxuICogdXNlZCBvbiBhbiBhcmJpdHJhcnksIHVucHJvY2Vzc2VkIGFycmF5IG9mIHRoZXNlIHNlYXRzLlxyXG4gKlxyXG4gKiBAcGFyYW0gc2VhdHMgc2VhdHMgdGhhdCBjYW4gaGF2ZSBkdXBsaWNhdGVzIGRlcGVuZGluZyBvbiBob3cgdGhlIGZpbmFsIHJvdW5kXHJcbiAqIGlzIGNhbGN1bGF0ZWRcclxuICogQHJldHVybnMgYXJyYXkgb2Ygc2VhdHMgdGhhdCBoYXZlIHVuaXF1ZSBkaXN0cmljdCAtIHNlYXQgbnVtYmVyIGNvbWJpbmF0aW9ucy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVTZWF0RHVwbGljYXRlcyhzZWF0czogTGV2ZWxpbmdTZWF0W10pOiBMZXZlbGluZ1NlYXRbXSB7XHJcbiAgICBjb25zdCBleGlzdGluZ1NlYXRzU2V0OiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcclxuICAgIGNvbnN0IHVuaXF1ZVNlYXRzOiBMZXZlbGluZ1NlYXRbXSA9IFtdO1xyXG4gICAgc2VhdHMuZm9yRWFjaCgoc2VhdCkgPT4ge1xyXG4gICAgICAgIGlmICghZXhpc3RpbmdTZWF0c1NldC5oYXMoc2VhdC5kaXN0cmljdCArIHNlYXQuc2VhdE51bWJlcikpIHtcclxuICAgICAgICAgICAgdW5pcXVlU2VhdHMucHVzaChzZWF0KTtcclxuICAgICAgICAgICAgZXhpc3RpbmdTZWF0c1NldC5hZGQoc2VhdC5kaXN0cmljdCArIHNlYXQuc2VhdE51bWJlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdW5pcXVlU2VhdHM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTaW1wbGUgaGVscGVyIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIGxldmVsbGluZyBzZWF0cyBvdXQgb2YgYW4gYXJyYXkgb2ZcclxuICogcGFydHkgcmVzdCBxdW90aWVudHMgIGFuZCBwdXRzIHRoZW0gaW50byBpdHMgb3duIGFycmF5XHJcbiAqXHJcbiAqIEBwYXJhbSBwcnFzXHJcbiAqIEByZXR1cm5zIGFuIGFycmF5IG9mIGxldmVsbGluZyBzZWF0c1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW5QYXJ0eVJlc3RRdW90aWVudHMocHJxczogUGFydHlSZXN0UXVvdGllbnRzW10pOiBMZXZlbGluZ1NlYXRbXSB7XHJcbiAgICBjb25zdCBsZXZlbGxpbmdTZWF0czogTGV2ZWxpbmdTZWF0W10gPSBbXTtcclxuICAgIHBycXMuZm9yRWFjaCgocHJxKSA9PiB7XHJcbiAgICAgICAgcHJxLmxldmVsaW5nU2VhdHMuZm9yRWFjaCgoc2VhdCkgPT4ge1xyXG4gICAgICAgICAgICBsZXZlbGxpbmdTZWF0cy5wdXNoKHNlYXQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbGV2ZWxsaW5nU2VhdHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuQW55KGFycjogYW55LCByZXN1bHQ6IGFueVtdID0gW10pIHtcclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBhcnIubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGFycltpXTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgZmxhdHRlbkFueSh2YWx1ZSwgcmVzdWx0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IHNvcnRzIHNlYXRzIGJ5IG51bWJlci5cclxuICpcclxuICogQHBhcmFtIHNlYXRzIGxldmVsbGluZyBzZWF0c1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRTZWF0c0J5TnVtYmVyKHNlYXRzOiBMZXZlbGluZ1NlYXRbXSk6IExldmVsaW5nU2VhdFtdIHtcclxuICAgIGNvbnN0IHNvcnRlZFNlYXRzOiBMZXZlbGluZ1NlYXRbXSA9IHNlYXRzO1xyXG4gICAgc29ydGVkU2VhdHMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgIGlmIChhLnNlYXROdW1iZXIgPCBiLnNlYXROdW1iZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYS5zZWF0TnVtYmVyID4gYi5zZWF0TnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHNvcnRlZFNlYXRzO1xyXG59XHJcblxyXG4vKipcclxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBhcnJheSBvZiByb3VuZHMgd2hlcmUgc2VhdHMgd2VyZSBhc3NpZ25lZFxyXG4gKlxyXG4gKiBAcGFyYW0gcm91bmRzIGEgcm91bmQgdGhhdCBtYXkgb3IgbWF5IG5vdCBoYXZlIGJlZW4gZ2l2ZW4gYSBzZWF0XHJcbiAqIEByZXR1cm5zIHJvdW5kcyBpbiB0aGUgZm9ybSBvZiBhY3R1YWwgbGV2ZWxsaW5nIHNlYXRzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um91bmRzQXNzaWduZWRTZWF0cyhyb3VuZHM6IExldmVsaW5nU2VhdFtdKSB7XHJcbiAgICBjb25zdCBzZWF0czogTGV2ZWxpbmdTZWF0W10gPSBbXTtcclxuICAgIHJvdW5kcy5mb3JFYWNoKChyb3VuZCkgPT4ge1xyXG4gICAgICAgIGlmIChyb3VuZC5zZWF0TnVtYmVyID4gMCkge1xyXG4gICAgICAgICAgICBzZWF0cy5wdXNoKHJvdW5kKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBzZWF0cztcclxufVxyXG4iLCJpbXBvcnQgeyBWb3RlcywgTWV0cmljcywgUGFyYW1ldGVycyB9IGZyb20gXCIuL3JlcXVlc3RlZC1kYXRhLW1vZGVsc1wiO1xyXG5pbXBvcnQgeyBDbGVhclN0YXRlIH0gZnJvbSBcIi4uL3JlZHVjZXJzL2dsb2JhbC1hY3Rpb25zXCI7XHJcblxyXG4vKipcclxuICogRW51bSBjb250YWluaW5nIGFsbCBwb3NzaWJsZSBSZXF1ZXN0ZWREYXRhQWN0aW9uIHR5cGVzLlxyXG4gKi9cclxuZXhwb3J0IGVudW0gUmVxdWVzdGVkRGF0YUFjdGlvblR5cGUge1xyXG4gICAgSU5JVElBTElaRV9SRVFVRVNURURfVk9URVMgPSBcIklOSVRJQUxJWkVfUkVRVUVTVEVEX1ZPVEVTXCIsXHJcbiAgICBJTklUSUFMSVpFX1JFUVVFU1RFRF9NRVRSSUNTID0gXCJJTklUSUFMSVpFX1JFUVVFU1RFRF9NRVRSSUNTXCIsXHJcbiAgICBJTklUSUFMSVpFX1JFUVVFU1RFRF9QQVJBTUVURVJTID0gXCJJTklUSUFMSVpFX1JFUVVFU1RFRF9QQVJBTUVURVJTXCIsXHJcbiAgICBJTklUSUFMSVpFX1JFUVVFU1RFRF9QQVJUWV9NQVAgPSBcIklOSVRJQUxJWkVfUkVRVUVTVEVEX1BBUlRZX01BUFwiLFxyXG59XHJcblxyXG4vKipcclxuICogVHlwZSBjb250YWluaW5nIGFsbCBwb3NzaWJsZSBSZXF1ZXN0ZWREYXRhQWN0aW9ucy5cclxuICovXHJcbmV4cG9ydCB0eXBlIFJlcXVlc3RlZERhdGFBY3Rpb24gPVxyXG4gICAgfCBJbml0aWFsaXplUmVxdWVzdGVkVm90ZXNcclxuICAgIHwgSW5pdGlhbGl6ZVJlcXVlc3RlZE1ldHJpY3NcclxuICAgIHwgSW5pdGlhbGl6ZVJlcXVlc3RlZFBhcmFtZXRlcnNcclxuICAgIHwgSW5pdGlhbGl6ZVJlcXVlc3RlZFBhcnR5TWFwXHJcbiAgICB8IENsZWFyU3RhdGU7XHJcblxyXG4vKipcclxuICogQWN0aW9uIGZvciBpbml0aWFsaXppbmcgcmVxdWVzdGVkIHZvdGVzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJbml0aWFsaXplUmVxdWVzdGVkVm90ZXMge1xyXG4gICAgdHlwZTogUmVxdWVzdGVkRGF0YUFjdGlvblR5cGUuSU5JVElBTElaRV9SRVFVRVNURURfVk9URVM7XHJcbiAgICB2b3RlczogVm90ZXNbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBmb3IgaW5pdGlhbGl6aW5nIHJlcXVlc3RlZCBtZXRyaWNzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJbml0aWFsaXplUmVxdWVzdGVkTWV0cmljcyB7XHJcbiAgICB0eXBlOiBSZXF1ZXN0ZWREYXRhQWN0aW9uVHlwZS5JTklUSUFMSVpFX1JFUVVFU1RFRF9NRVRSSUNTO1xyXG4gICAgbWV0cmljczogTWV0cmljc1tdO1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGZvciBpbml0aWFsaXppbmcgcmVxdWVzdGVkIHBhcmFtZXRlcnMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEluaXRpYWxpemVSZXF1ZXN0ZWRQYXJhbWV0ZXJzIHtcclxuICAgIHR5cGU6IFJlcXVlc3RlZERhdGFBY3Rpb25UeXBlLklOSVRJQUxJWkVfUkVRVUVTVEVEX1BBUkFNRVRFUlM7XHJcbiAgICBwYXJhbWV0ZXJzOiBQYXJhbWV0ZXJzW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gZm9yIGluaXRpYWxpemluZyByZXF1ZXN0ZWQgcGFydHkgbWFwLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJbml0aWFsaXplUmVxdWVzdGVkUGFydHlNYXAge1xyXG4gICAgdHlwZTogUmVxdWVzdGVkRGF0YUFjdGlvblR5cGUuSU5JVElBTElaRV9SRVFVRVNURURfUEFSVFlfTUFQO1xyXG4gICAgcGFydHlNYXA6IF8uRGljdGlvbmFyeTxzdHJpbmc+O1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGNyZWF0b3IgZm9yIGluaXRpYWxpemluZyByZXF1ZXN0ZWQgdm90ZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB2b3RlcyAtIFZvdGVzIGZldGNoZWQgZnJvbSB0aGUgQVBJLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVSZXF1ZXN0ZWRWb3Rlcyh2b3RlczogVm90ZXNbXSkge1xyXG4gICAgY29uc3QgYWN0aW9uOiBJbml0aWFsaXplUmVxdWVzdGVkVm90ZXMgPSB7XHJcbiAgICAgICAgdHlwZTogUmVxdWVzdGVkRGF0YUFjdGlvblR5cGUuSU5JVElBTElaRV9SRVFVRVNURURfVk9URVMsXHJcbiAgICAgICAgdm90ZXMsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBjcmVhdG9yIGZvciBpbml0aWFsaXppbmcgcmVxdWVzdGVkIG1ldHJpY3MuXHJcbiAqXHJcbiAqIEBwYXJhbSBtZXRyaWNzIC0gTWV0cmljcyBmZXRjaGVkIGZyb20gdGhlIEFQSS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplUmVxdWVzdGVkTWV0cmljcyhtZXRyaWNzOiBNZXRyaWNzW10pIHtcclxuICAgIGNvbnN0IGFjdGlvbjogSW5pdGlhbGl6ZVJlcXVlc3RlZE1ldHJpY3MgPSB7XHJcbiAgICAgICAgdHlwZTogUmVxdWVzdGVkRGF0YUFjdGlvblR5cGUuSU5JVElBTElaRV9SRVFVRVNURURfTUVUUklDUyxcclxuICAgICAgICBtZXRyaWNzLFxyXG4gICAgfTtcclxuICAgIHJldHVybiBhY3Rpb247XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gY3JlYXRvciBmb3IgaW5pdGlhbGl6aW5nIHJlcXVlc3RlZCBwYXJhbWV0ZXJzLlxyXG4gKlxyXG4gKiBAcGFyYW0gcGFyYW1ldGVycyAtIFBhcmFtZXRlcnMgZmV0Y2hlZCBmcm9tIHRoZSBBUEkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZVJlcXVlc3RlZFBhcmFtZXRlcnMocGFyYW1ldGVyczogUGFyYW1ldGVyc1tdKSB7XHJcbiAgICBjb25zdCBhY3Rpb246IEluaXRpYWxpemVSZXF1ZXN0ZWRQYXJhbWV0ZXJzID0ge1xyXG4gICAgICAgIHR5cGU6IFJlcXVlc3RlZERhdGFBY3Rpb25UeXBlLklOSVRJQUxJWkVfUkVRVUVTVEVEX1BBUkFNRVRFUlMsXHJcbiAgICAgICAgcGFyYW1ldGVycyxcclxuICAgIH07XHJcbiAgICByZXR1cm4gYWN0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGNyZWF0b3IgZm9yIGluaXRpYWxpemluZyByZXF1ZXN0ZWQgUGFydHlNYXAuXHJcbiAqXHJcbiAqIEBwYXJhbSBwYXJ0eU1hcCAtIFBhcnR5TWFwIGZldGNoZWQgZnJvbSB0aGUgQVBJLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVSZXF1ZXN0ZWRQYXJ0eU1hcChwYXJ0eU1hcDogXy5EaWN0aW9uYXJ5PHN0cmluZz4pIHtcclxuICAgIGNvbnN0IGFjdGlvbjogSW5pdGlhbGl6ZVJlcXVlc3RlZFBhcnR5TWFwID0ge1xyXG4gICAgICAgIHR5cGU6IFJlcXVlc3RlZERhdGFBY3Rpb25UeXBlLklOSVRJQUxJWkVfUkVRVUVTVEVEX1BBUlRZX01BUCxcclxuICAgICAgICBwYXJ0eU1hcCxcclxuICAgIH07XHJcbiAgICByZXR1cm4gYWN0aW9uO1xyXG59XHJcbiIsImltcG9ydCB7IFZvdGVzLCBNZXRyaWNzIH0gZnJvbSBcIi4uLy4uL3JlcXVlc3RlZC1kYXRhL3JlcXVlc3RlZC1kYXRhLW1vZGVsc1wiO1xyXG5pbXBvcnQgeyBtYXBBZGQgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL21hcFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRpc3RyaWN0TWFwOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oW1xyXG4gICAgW1wiTm9yZC1UcsO4bmRlbGFnXCIsIFwiVHLDuG5kZWxhZ1wiXSxcclxuICAgIFtcIlPDuHItVHLDuG5kZWxhZ1wiLCBcIlRyw7huZGVsYWdcIl0sXHJcbiAgICBbXCJIb3JkYWxhbmRcIiwgXCJWZXN0bGFuZFwiXSxcclxuICAgIFtcIlNvZ24gb2cgRmpvcmRhbmVcIiwgXCJWZXN0bGFuZFwiXSxcclxuICAgIFtcIkF1c3QtQWdkZXJcIiwgXCJBZ2RlclwiXSxcclxuICAgIFtcIlZlc3QtQWdkZXJcIiwgXCJBZ2RlclwiXSxcclxuICAgIFtcIlZlc3Rmb2xkXCIsIFwiVmVzdGZvbGQgb2cgVGVsZW1hcmtcIl0sXHJcbiAgICBbXCJUZWxlbWFya1wiLCBcIlZlc3Rmb2xkIG9nIFRlbGVtYXJrXCJdLFxyXG4gICAgW1wiT3BwbGFuZFwiLCBcIklubmxhbmRldFwiXSxcclxuICAgIFtcIkhlZG1hcmtcIiwgXCJJbm5sYW5kZXRcIl0sXHJcbiAgICBbXCJCdXNrZXJ1ZFwiLCBcIlZpa2VuXCJdLFxyXG4gICAgW1wiQWtlcnNodXNcIiwgXCJWaWtlblwiXSxcclxuICAgIFtcIsOYc3Rmb2xkXCIsIFwiVmlrZW5cIl0sXHJcbiAgICBbXCJUcm9tc1wiLCBcIlRyb21zIG9nIEZpbm5tYXJrXCJdLFxyXG4gICAgW1wiRmlubm1hcmtcIiwgXCJUcm9tcyBvZyBGaW5ubWFya1wiXSxcclxuXSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VWb3RlRGlzdHJpY3RzKHZvdGVzOiBWb3Rlc1tdLCBkaXN0cmljdE1hcDogTWFwPHN0cmluZywgc3RyaW5nPik6IFZvdGVzW10ge1xyXG4gICAgY29uc3QgeyBmaW5pc2hlZFZvdGVzLCBncm91cGVkVm90ZXMgfSA9IGdyb3VwVm90ZXModm90ZXMsIGRpc3RyaWN0TWFwKTtcclxuICAgIGNvbnN0IG1lcmdlZFZvdGVzID0gbWVyZ2VWb3Rlcyhncm91cGVkVm90ZXMpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gZmluaXNoZWRWb3Rlcy5jb25jYXQobWVyZ2VkVm90ZXMpO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdyb3VwVm90ZXMoXHJcbiAgICB2b3RlczogVm90ZXNbXSxcclxuICAgIGRpc3RyaWN0TWFwOiBNYXA8c3RyaW5nLCBzdHJpbmc+XHJcbik6IHsgZmluaXNoZWRWb3RlczogVm90ZXNbXTsgZ3JvdXBlZFZvdGVzOiBNYXA8c3RyaW5nLCBNYXA8c3RyaW5nLCBWb3Rlc1tdPj4gfSB7XHJcbiAgICBjb25zdCBmaW5pc2hlZFZvdGVzOiBWb3Rlc1tdID0gW107XHJcbiAgICBjb25zdCBncm91cGVkVm90ZXMgPSBuZXcgTWFwPHN0cmluZywgTWFwPHN0cmluZywgVm90ZXNbXT4+KCk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDAsIG4gPSB2b3Rlcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50Vm90ZSA9IHsgLi4udm90ZXNbaV0gfTtcclxuICAgICAgICBjb25zdCBuZXdOYW1lID0gZGlzdHJpY3RNYXAuZ2V0KGN1cnJlbnRWb3RlLmRpc3RyaWN0KTtcclxuXHJcbiAgICAgICAgaWYgKG5ld05hbWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBmaW5pc2hlZFZvdGVzLnB1c2goY3VycmVudFZvdGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICghZ3JvdXBlZFZvdGVzLmhhcyhuZXdOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgZ3JvdXBlZFZvdGVzLnNldChuZXdOYW1lLCBuZXcgTWFwPHN0cmluZywgVm90ZXNbXT4oKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHZvdGVNYXAgPSBncm91cGVkVm90ZXMuZ2V0KG5ld05hbWUpO1xyXG4gICAgICAgICAgICBpZiAodm90ZU1hcCkge1xyXG4gICAgICAgICAgICAgICAgdm90ZU1hcCA9IG1hcEFkZCh2b3RlTWFwLCBjdXJyZW50Vm90ZS5wYXJ0eSwgY3VycmVudFZvdGUpO1xyXG4gICAgICAgICAgICAgICAgZ3JvdXBlZFZvdGVzLnNldChuZXdOYW1lLCB2b3RlTWFwISk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBmaW5pc2hlZFZvdGVzLFxyXG4gICAgICAgIGdyb3VwZWRWb3RlcyxcclxuICAgIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1lcmdlVm90ZXMoZ3JvdXBlZFZvdGVzOiBNYXA8c3RyaW5nLCBNYXA8c3RyaW5nLCBWb3Rlc1tdPj4pOiBWb3Rlc1tdIHtcclxuICAgIGNvbnN0IHZvdGVzOiBWb3Rlc1tdID0gW107XHJcblxyXG4gICAgZ3JvdXBlZFZvdGVzLmZvckVhY2goKGRpc3RyaWN0Vm90ZXMsIGRpc3RyaWN0TmFtZSkgPT4ge1xyXG4gICAgICAgIGRpc3RyaWN0Vm90ZXMuZm9yRWFjaCgocGFydHlWb3RlcywgXykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtZXJnZWRQYXJ0eVJlc3VsdHMgPSBwYXJ0eVZvdGVzLnJlZHVjZSh2b3Rlc1JlZHVjZXIpO1xyXG4gICAgICAgICAgICBtZXJnZWRQYXJ0eVJlc3VsdHMuZGlzdHJpY3QgPSBkaXN0cmljdE5hbWU7XHJcbiAgICAgICAgICAgIHZvdGVzLnB1c2gobWVyZ2VkUGFydHlSZXN1bHRzKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB2b3RlcztcclxufVxyXG5cclxuZnVuY3Rpb24gdm90ZXNSZWR1Y2VyKHJlc3VsdDogVm90ZXMsIGN1cnJlbnQ6IFZvdGVzKTogVm90ZXMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkaXN0cmljdDogXCJQTEFDRUhPTERFUlwiLFxyXG4gICAgICAgIGVsZWN0aW9uVHlwZTogY3VycmVudC5lbGVjdGlvblR5cGUsXHJcbiAgICAgICAgZWxlY3Rpb25ZZWFyOiBjdXJyZW50LmVsZWN0aW9uWWVhcixcclxuICAgICAgICBwYXJ0eTogY3VycmVudC5wYXJ0eSxcclxuICAgICAgICB2b3RlczogcmVzdWx0LnZvdGVzICsgY3VycmVudC52b3RlcyxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1ldHJpY0Rpc3RyaWN0cyhtZXRyaWNzOiBNZXRyaWNzW10sIGRpc3RyaWN0TWFwOiBNYXA8c3RyaW5nLCBzdHJpbmc+KTogTWV0cmljc1tdIHtcclxuICAgIGNvbnN0IHsgZmluaXNoZWRNZXRyaWNzLCBncm91cGVkTWV0cmljcyB9ID0gZ3JvdXBNZXRyaWNzKG1ldHJpY3MsIGRpc3RyaWN0TWFwKTtcclxuICAgIGNvbnN0IG1lcmdlZE1ldHJpY3MgPSBtZXJnZU1ldHJpY3MoZ3JvdXBlZE1ldHJpY3MpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gZmluaXNoZWRNZXRyaWNzLmNvbmNhdChtZXJnZWRNZXRyaWNzKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBncm91cE1ldHJpY3MoXHJcbiAgICBtZXRyaWNzOiBNZXRyaWNzW10sXHJcbiAgICBkaXN0cmljdE1hcDogTWFwPHN0cmluZywgc3RyaW5nPlxyXG4pOiB7IGZpbmlzaGVkTWV0cmljczogTWV0cmljc1tdOyBncm91cGVkTWV0cmljczogTWFwPHN0cmluZywgTWV0cmljc1tdPiB9IHtcclxuICAgIGNvbnN0IGZpbmlzaGVkTWV0cmljczogTWV0cmljc1tdID0gW107XHJcbiAgICBsZXQgZ3JvdXBlZE1ldHJpY3MgPSBuZXcgTWFwPHN0cmluZywgTWV0cmljc1tdPigpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwLCBuID0gbWV0cmljcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50TWV0cmljID0gbWV0cmljc1tpXTtcclxuICAgICAgICBjb25zdCBuZXdOYW1lID0gZGlzdHJpY3RNYXAuZ2V0KGN1cnJlbnRNZXRyaWMuZGlzdHJpY3QpO1xyXG5cclxuICAgICAgICBpZiAobmV3TmFtZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGZpbmlzaGVkTWV0cmljcy5wdXNoKGN1cnJlbnRNZXRyaWMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGdyb3VwZWRNZXRyaWNzID0gbWFwQWRkKGdyb3VwZWRNZXRyaWNzLCBuZXdOYW1lLCBjdXJyZW50TWV0cmljKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBmaW5pc2hlZE1ldHJpY3MsXHJcbiAgICAgICAgZ3JvdXBlZE1ldHJpY3MsXHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBtZXJnZU1ldHJpY3MoZ3JvdXBlZE1ldHJpY3M6IE1hcDxzdHJpbmcsIE1ldHJpY3NbXT4pOiBNZXRyaWNzW10ge1xyXG4gICAgY29uc3QgbWV0cmljczogTWV0cmljc1tdID0gW107XHJcblxyXG4gICAgZ3JvdXBlZE1ldHJpY3MuZm9yRWFjaCgoZGlzdHJpY3RNZXRyaWNzLCBkaXN0cmljdE5hbWUpID0+IHtcclxuICAgICAgICBjb25zdCBtZXJnZWRNZXRyaWNzID0gZGlzdHJpY3RNZXRyaWNzLnJlZHVjZShtZXRyaWNSZWR1Y2VyKTtcclxuICAgICAgICBtZXJnZWRNZXRyaWNzLmRpc3RyaWN0ID0gZGlzdHJpY3ROYW1lO1xyXG4gICAgICAgIG1ldHJpY3MucHVzaChtZXJnZWRNZXRyaWNzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBtZXRyaWNzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtZXRyaWNSZWR1Y2VyKHJlc3VsdDogTWV0cmljcywgY3VycmVudDogTWV0cmljcyk6IE1ldHJpY3Mge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhcmVhOiByZXN1bHQuYXJlYSArIGN1cnJlbnQuYXJlYSxcclxuICAgICAgICBkaXN0cmljdDogY3VycmVudC5kaXN0cmljdCxcclxuICAgICAgICBlbGVjdGlvblllYXI6IGN1cnJlbnQuZWxlY3Rpb25ZZWFyLFxyXG4gICAgICAgIHBvcHVsYXRpb246IHJlc3VsdC5wb3B1bGF0aW9uICsgY3VycmVudC5wb3B1bGF0aW9uLFxyXG4gICAgICAgIHNlYXRzOiByZXN1bHQuc2VhdHMgKyBjdXJyZW50LnNlYXRzLFxyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBjb3B5RGljdGlvbmFyeSB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZGljdGlvbmFyeVwiO1xyXG5pbXBvcnQge1xyXG4gICAgRGlzdHJpY3RSZXN1bHR2MixcclxuICAgIFBhcnR5UmVzdWx0djIsXHJcbiAgICBOYXRpb25hbFBhcnR5UmVzdWx0LFxyXG4gICAgQ29tcHV0YXRpb25QYXlsb2FkLFxyXG4gICAgTGV2ZWxpbmdTZWF0LFxyXG4gICAgUGFydHlSZXN0UXVvdGllbnRzLFxyXG4gICAgUGFydHlSZXN1bHQsXHJcbiAgICBEaXN0cmljdFJlc3VsdCxcclxufSBmcm9tIFwiLi5cIjtcclxuaW1wb3J0IHsgTWV0cmljcyB9IGZyb20gXCIuLi8uLi9yZXF1ZXN0ZWQtZGF0YS9yZXF1ZXN0ZWQtZGF0YS1tb2RlbHNcIjtcclxuaW1wb3J0IHsgc2FpbnRlTGFndWVzLCBkaXN0cmlidXRpb25CeVF1b3RpZW50IH0gZnJvbSBcIi4vZGlzdHJpYnV0aW9uXCI7XHJcbmltcG9ydCB7IGdlbmVyYXRlTGV2ZWxpbmdTZWF0QXJyYXkgfSBmcm9tIFwiLlwiO1xyXG5pbXBvcnQgeyBLZXlWYWx1ZVBhaXIgfSBmcm9tIFwiLi9zb3J0ZWQtcmV2ZXJzZS1kaWN0XCI7XHJcbmltcG9ydCB7IEFsZ29yaXRobVR5cGUgfSBmcm9tIFwiLi4vY29tcHV0YXRpb24tbW9kZWxzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYnVpbGREaXN0cmljdFJlc3VsdHMobWV0cmljczogTWV0cmljc1tdKTogXy5EaWN0aW9uYXJ5PERpc3RyaWN0UmVzdWx0djI+IHtcclxuICAgIGNvbnN0IGRpc3RyaWN0UmVzdWx0czogXy5EaWN0aW9uYXJ5PERpc3RyaWN0UmVzdWx0djI+ID0ge307XHJcblxyXG4gICAgLy8gQ3JlYXRlIGFuIG9iamVjdCBmb3IgZWFjaCBkaXN0cmljdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkaXN0cmljdCB3aWRlIHJlc3VsdHNcclxuICAgIG1ldHJpY3MubWFwKFxyXG4gICAgICAgIChtZXRyaWMpID0+XHJcbiAgICAgICAgICAgIChkaXN0cmljdFJlc3VsdHNbbWV0cmljLmRpc3RyaWN0XSA9IHtcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0U2VhdHM6IG1ldHJpYy5zZWF0cyxcclxuICAgICAgICAgICAgICAgIGxldmVsaW5nU2VhdHM6IDAsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBtZXRyaWMuZGlzdHJpY3QsXHJcbiAgICAgICAgICAgICAgICBwZXJjZW50Vm90ZXM6IDAsXHJcbiAgICAgICAgICAgICAgICB0b3RhbFNlYXRzOiBtZXRyaWMuc2VhdHMsXHJcbiAgICAgICAgICAgICAgICB2b3RlczogMCxcclxuICAgICAgICAgICAgICAgIHZvdGVzUGVyU2VhdDogMCxcclxuICAgICAgICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIGRpc3RyaWN0UmVzdWx0cztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN1bUFsbFZvdGVzKFxyXG4gICAgcGF5bG9hZDogQ29tcHV0YXRpb25QYXlsb2FkLFxyXG4gICAgZGlzdHJpY3RSZXN1bHRzOiBfLkRpY3Rpb25hcnk8RGlzdHJpY3RSZXN1bHR2Mj4sXHJcbiAgICBwYXJ0eVJlc3VsdHM6IF8uRGljdGlvbmFyeTxfLkRpY3Rpb25hcnk8UGFydHlSZXN1bHR2Mj4+LFxyXG4gICAgbmF0aW9uYWxQYXJ0eVJlc3VsdHM6IF8uRGljdGlvbmFyeTxOYXRpb25hbFBhcnR5UmVzdWx0PlxyXG4pIHtcclxuICAgIC8vIENyZWF0ZSBhbiBvYmplY3QgZm9yIGVhY2ggcGFydHkgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCBpdCdzIHJlc3VsdHMgYnkgZGlzdHJpY3RcclxuICAgIHBheWxvYWQudm90ZXMuZm9yRWFjaCgodm90ZSkgPT4ge1xyXG4gICAgICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIHRvdGFsIG51bWJlciBvZiB2b3RlcyBjYXN0IGluIGVhY2ggZGlzdHJpY3RcclxuICAgICAgICBkaXN0cmljdFJlc3VsdHNbdm90ZS5kaXN0cmljdF0udm90ZXMgKz0gdm90ZS52b3RlcztcclxuXHJcbiAgICAgICAgaWYgKHZvdGUucGFydHkhIGluIHBhcnR5UmVzdWx0cykge1xyXG4gICAgICAgICAgICBwYXJ0eVJlc3VsdHNbdm90ZS5wYXJ0eV0gPSB7fTtcclxuICAgICAgICAgICAgbmF0aW9uYWxQYXJ0eVJlc3VsdHNbdm90ZS5wYXJ0eV0gPSB7XHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFNlYXRzOiAwLFxyXG4gICAgICAgICAgICAgICAgbGV2ZWxpbmdTZWF0czogMCxcclxuICAgICAgICAgICAgICAgIHBhcnR5Q29kZTogdm90ZS5wYXJ0eSxcclxuICAgICAgICAgICAgICAgIHBhcnR5TmFtZTogdm90ZS5wYXJ0eSxcclxuICAgICAgICAgICAgICAgIHBlcmNlbnRWb3RlczogMCxcclxuICAgICAgICAgICAgICAgIHByb3BvcnRpb25hbGl0eTogMCxcclxuICAgICAgICAgICAgICAgIHRvdGFsU2VhdHM6IDAsXHJcbiAgICAgICAgICAgICAgICB2b3Rlczogdm90ZS52b3RlcyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBLZWVwIHRyYWNrIG9mIGhvdyBtYW55IHZvdGVzIGVhY2ggcGFydHkgcmVjZWl2ZWQgb24gYSBuYXRpb25hbCBsZXZlbFxyXG4gICAgICAgICAgICBuYXRpb25hbFBhcnR5UmVzdWx0c1t2b3RlLnBhcnR5XS52b3RlcyArPSB2b3RlLnZvdGVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcGFydHlSZXN1bHRzW3ZvdGUucGFydHldW3ZvdGUuZGlzdHJpY3RdID0ge1xyXG4gICAgICAgICAgICBkaXN0cmljdDogdm90ZS5kaXN0cmljdCxcclxuICAgICAgICAgICAgZGlzdHJpY3RTZWF0czogMCxcclxuICAgICAgICAgICAgbGV2ZWxpbmdTZWF0czogMCxcclxuICAgICAgICAgICAgcGFydHlDb2RlOiB2b3RlLnBhcnR5LFxyXG4gICAgICAgICAgICBwYXJ0eU5hbWU6IHZvdGUucGFydHksXHJcbiAgICAgICAgICAgIHBlcmNlbnRWb3RlczogMCxcclxuICAgICAgICAgICAgcHJvcG9ydGlvbmFsaXR5OiAwLFxyXG4gICAgICAgICAgICB0b3RhbFNlYXRzOiAwLFxyXG4gICAgICAgICAgICB2b3Rlczogdm90ZS52b3RlcyxcclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVQZXJjZW50YWdlcyhcclxuICAgIHRvdGFsVm90ZXM6IG51bWJlcixcclxuICAgIGRpc3RyaWN0UmVzdWx0czogXy5EaWN0aW9uYXJ5PERpc3RyaWN0UmVzdWx0djI+LFxyXG4gICAgcGFydHlSZXN1bHRzOiBfLkRpY3Rpb25hcnk8Xy5EaWN0aW9uYXJ5PFBhcnR5UmVzdWx0djI+PixcclxuICAgIG5hdGlvbmFsUGFydHlSZXN1bHRzOiBfLkRpY3Rpb25hcnk8TmF0aW9uYWxQYXJ0eVJlc3VsdD5cclxuKSB7XHJcbiAgICAvLyBJdGVyYXRlIG92ZXIgYWxsIHBhcnRpZXNcclxuICAgIGZvciAoY29uc3QgcGFydHkgaW4gcGFydHlSZXN1bHRzKSB7XHJcbiAgICAgICAgaWYgKHBhcnR5UmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShwYXJ0eSkpIHtcclxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBuYXRpb25hbCB2b3RlcyB0aGUgcGFydHkgcmVjZWl2ZWRcclxuICAgICAgICAgICAgbmF0aW9uYWxQYXJ0eVJlc3VsdHNbcGFydHldLnBlcmNlbnRWb3RlcyA9IChuYXRpb25hbFBhcnR5UmVzdWx0c1twYXJ0eV0udm90ZXMgLyB0b3RhbFZvdGVzKSAqIDEwMDtcclxuXHJcbiAgICAgICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBhbGwgZGlzdHJpY3RzXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGlzdHJpY3QgaW4gcGFydHlSZXN1bHRzW3BhcnR5XSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnR5UmVzdWx0c1twYXJ0eV0uaGFzT3duUHJvcGVydHkoZGlzdHJpY3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBkaXN0cmljdCB2b3RlcyB0aGUgcGFydHkgcmVjZWl2ZWRcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0eVJlc3VsdHNbcGFydHldW2Rpc3RyaWN0XS5wZXJjZW50Vm90ZXMgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocGFydHlSZXN1bHRzW3BhcnR5XVtkaXN0cmljdF0udm90ZXMgLyBkaXN0cmljdFJlc3VsdHNbZGlzdHJpY3RdLnZvdGVzKSAqIDEwMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RyaWN0UmVzdWx0c1tkaXN0cmljdF0ucGVyY2VudFZvdGVzID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcGVyY2VudGFnZSBvZiB0aGUgdG90YWwgbmF0aW9uYWwgdm90ZXMgd2FzIGNhc3QgaW4gZWFjaCBkaXN0cmljdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXN0cmljdFJlc3VsdHNbZGlzdHJpY3RdLnBlcmNlbnRWb3RlcyA9IChkaXN0cmljdFJlc3VsdHNbZGlzdHJpY3RdLnZvdGVzIC8gdG90YWxWb3RlcykgKiAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRGlzdHJpYnV0ZXMgdGhlIGRpc3RyaWN0IHNlYXRzIG92ZXIgdGhlIGRpc3RyaWN0cyBhcyBwZXI6XHJcbiAqIGh0dHBzOi8vbG92ZGF0YS5uby9sb3YvMjAwMi0wNi0yOC01Ny/CpzExLTNcclxuICpcclxuICogQHBhcmFtIGFyZWFGYWN0b3IgVGhlIGFyZWEgZmFjdG9yIHRoZSBhcmVhIHNob3VsZCBiZSBtdWx0aXBsaWVkIHdpdGggd2hlbiBjYWxjdWxhdGluZyB0aGUgbnVtZXJhdG9yIGZvciB0aGUgcXVvdGllbnRcclxuICogQHBhcmFtIG51bURpc3RyaWN0U2VhdHMgVGhlIG51bWJlciBvZiBkaXN0cmljdCBzZWF0cyB0aGF0IHNob3VsZCBiZSBkaXN0cmlidXRlZFxyXG4gKiBAcGFyYW0gbWV0cmljcyBBIGxpc3Qgb2YgYWxsIHRoZSBkaXN0cmljdHMgd2l0aCB0aGVpciBtZXRyaWNzIHJlbGV2YW50IGZvciB0aGlzIGRpc3RyaWJ1dGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RyaWJ1dGVEaXN0cmljdFNlYXRzT25EaXN0cmljdHMoXHJcbiAgICBhcmVhRmFjdG9yOiBudW1iZXIsXHJcbiAgICBsZXZlbGluZ1NlYXRzOiBudW1iZXIsXHJcbiAgICBudW1EaXN0cmljdFNlYXRzOiBudW1iZXIsXHJcbiAgICBtZXRyaWNzOiBNZXRyaWNzW11cclxuKTogXy5EaWN0aW9uYXJ5PG51bWJlcj4ge1xyXG4gICAgY29uc3QgYmFzZVZhbHVlczogXy5EaWN0aW9uYXJ5PG51bWJlcj4gPSB7fTtcclxuXHJcbiAgICAvLyBXcmFwIFNhaW50ZSBMYWd1ZXMgc28gaXQgb25seSB0YWtlcyBvbmUgYXJndW1lbnRcclxuICAgIGZ1bmN0aW9uIGRlbm9taW5hdG9yRnVuY3Rpb24oc2VhdHNXb246IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHNhaW50ZUxhZ3VlcyhzZWF0c1dvbiwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFyZWFGYWN0b3IgPT09IC0xKSB7XHJcbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhbiBhcmVhIGZhY3RvciwganVzdCByZXR1cm4gdGhlIHByZWRldGVybWluZWQgdmFsdWVzXHJcbiAgICAgICAgY29uc3QgZGlzdHJpY3RTZWF0czogXy5EaWN0aW9uYXJ5PG51bWJlcj4gPSB7fTtcclxuICAgICAgICBtZXRyaWNzLmZvckVhY2goKG1ldHJpYykgPT4gKGRpc3RyaWN0U2VhdHNbbWV0cmljLmRpc3RyaWN0XSA9IG1ldHJpYy5zZWF0cykpO1xyXG4gICAgICAgIHJldHVybiBkaXN0cmljdFNlYXRzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBkaXN0cmljdFNlYXRzOiBfLkRpY3Rpb25hcnk8bnVtYmVyPiA9IHt9O1xyXG4gICAgICAgIG1ldHJpY3MuZm9yRWFjaCgobWV0cmljKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEZpbGwgZGlzdHJpY3RTZWF0cyB3aXRoIGFsbCB0aGUgZGlzdHJpY3RzLCB3aXRoIG5vIHdpbnMgeWV0XHJcbiAgICAgICAgICAgIGRpc3RyaWN0U2VhdHNbbWV0cmljLmRpc3RyaWN0XSA9IDA7XHJcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZGlzdHJpYnV0aW9uIG51bWJlcnMgZm9yIGVhY2ggZGlzdHJpY3QgdG8gYmUgdXNlZCBhcyBudW1lcmF0b3JzIGluIHRoZSBxdW90aWVudHNcclxuICAgICAgICAgICAgYmFzZVZhbHVlc1ttZXRyaWMuZGlzdHJpY3RdID0gbWV0cmljLnBvcHVsYXRpb24gKyBtZXRyaWMuYXJlYSAqIGFyZWFGYWN0b3I7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRpc3RyaWJ1dGVkRGlzdHJpY3RTZWF0c0FuZExldmVsaW5nU2VhdHMgPSBkaXN0cmlidXRpb25CeVF1b3RpZW50KFxyXG4gICAgICAgICAgICBudW1EaXN0cmljdFNlYXRzICsgbWV0cmljcy5sZW5ndGgsXHJcbiAgICAgICAgICAgIGRpc3RyaWN0U2VhdHMsXHJcbiAgICAgICAgICAgIGJhc2VWYWx1ZXMsXHJcbiAgICAgICAgICAgIGRlbm9taW5hdG9yRnVuY3Rpb25cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBkaXN0cmljdFNlYXRzTm9MZXZlbGluZ1NlYXRzID0gc3VidHJhY3RMZXZlbGluZ1NlYXRzKGRpc3RyaWJ1dGVkRGlzdHJpY3RTZWF0c0FuZExldmVsaW5nU2VhdHMpO1xyXG5cclxuICAgICAgICByZXR1cm4gYW55TmVnYXRpdmVTZWF0cyhkaXN0cmljdFNlYXRzTm9MZXZlbGluZ1NlYXRzKVxyXG4gICAgICAgICAgICA/IGRpc3RyaWJ1dGlvbkJ5UXVvdGllbnQobnVtRGlzdHJpY3RTZWF0cywgZGlzdHJpY3RTZWF0cywgYmFzZVZhbHVlcywgZGVub21pbmF0b3JGdW5jdGlvbilcclxuICAgICAgICAgICAgOiBkaXN0cmljdFNlYXRzTm9MZXZlbGluZ1NlYXRzO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogU3VidHJhY3RzIHRoZSBsZXZlbGluZyBzZWF0cyBmcm9tIHRoZSBzZWF0IG1hcHBpbmcuXHJcbiAqXHJcbiAqIEBwYXJhbSBzZWF0TWFwcGluZyBUaGUgbWFwcGluZyBiZXR3ZWVuIGRpc3RyaWN0IGFuZCBudW1iZXIgb2Ygc2VhdHMgdG8gc3VidHJhY3QgZnJvbVxyXG4gKi9cclxuZnVuY3Rpb24gc3VidHJhY3RMZXZlbGluZ1NlYXRzKHNlYXRNYXBwaW5nOiBfLkRpY3Rpb25hcnk8bnVtYmVyPik6IF8uRGljdGlvbmFyeTxudW1iZXI+IHtcclxuICAgIGNvbnN0IGNvcHlNYXBwaW5nID0gY29weURpY3Rpb25hcnkoc2VhdE1hcHBpbmcpO1xyXG5cclxuICAgIGZvciAoY29uc3QgbmFtZSBpbiBjb3B5TWFwcGluZykge1xyXG4gICAgICAgIGlmIChjb3B5TWFwcGluZy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgICAgICBjb3B5TWFwcGluZ1tuYW1lXS0tO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29weU1hcHBpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkaXN0cmlidXRlTGV2ZWxpbmdTZWF0c09uRGlzdHJpY3RzKFxyXG4gICAgcGF5bG9hZDogQ29tcHV0YXRpb25QYXlsb2FkLFxyXG4gICAgbGV2ZWxpbmdQYXJ0eUNvZGVzOiBzdHJpbmdbXSxcclxuICAgIHBhcnR5UmVzdWx0czogXy5EaWN0aW9uYXJ5PFBhcnR5UmVzdWx0PixcclxuICAgIGRpc3RyaWN0UGFydHlSZXN1bHRzOiBfLkRpY3Rpb25hcnk8Xy5EaWN0aW9uYXJ5PFBhcnR5UmVzdWx0Pj4sXHJcbiAgICBkaXN0cmljdFJlc3VsdHM6IF8uRGljdGlvbmFyeTxEaXN0cmljdFJlc3VsdD5cclxuKTogXy5EaWN0aW9uYXJ5PFBhcnR5UmVzdFF1b3RpZW50cz4ge1xyXG4gICAgbGV0IGZpbmlzaGVkRGlzdHJpY3RzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgbGV0IGxldmVsaW5nU2VhdHM6IExldmVsaW5nU2VhdFtdID0gW107XHJcbiAgICBjb25zdCBwYXJ0eVJlc3RRdW90aWVudHM6IF8uRGljdGlvbmFyeTxQYXJ0eVJlc3RRdW90aWVudHM+ID0ge307XHJcblxyXG4gICAgY29uc3QgcGFydHlTZWF0czogXy5EaWN0aW9uYXJ5PG51bWJlcj4gPSB7fTtcclxuICAgIGxldCBzZWF0SW5kZXggPSAxO1xyXG4gICAgbGV0IHF1b3RpZW50SW5kZXggPSAxO1xyXG4gICAgd2hpbGUgKHNlYXRJbmRleCA8PSBwYXlsb2FkLmxldmVsaW5nU2VhdHMpIHtcclxuICAgICAgICBpZiAobGV2ZWxpbmdTZWF0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgZmluaXNoZWREaXN0cmljdHMgPSBbXTtcclxuICAgICAgICAgICAgbGV2ZWxpbmdTZWF0cyA9IGdlbmVyYXRlTGV2ZWxpbmdTZWF0QXJyYXkoXHJcbiAgICAgICAgICAgICAgICBBbGdvcml0aG1UeXBlLlNBSU5URV9MQUdVRSxcclxuICAgICAgICAgICAgICAgIGxldmVsaW5nUGFydHlDb2RlcyxcclxuICAgICAgICAgICAgICAgIHBhcnR5UmVzdWx0cyxcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0UmVzdWx0cyxcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0UGFydHlSZXN1bHRzLFxyXG4gICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzZWF0ID0gbGV2ZWxpbmdTZWF0c1swXTtcclxuICAgICAgICBzZWF0LnF1b3RpZW50TnVtYmVyID0gcXVvdGllbnRJbmRleCsrO1xyXG4gICAgICAgIGxldCBudW1iZXJPZlNlYXRzID0gcGFydHlTZWF0c1tzZWF0LnBhcnR5Q29kZV07XHJcbiAgICAgICAgaWYgKG51bWJlck9mU2VhdHMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBudW1iZXJPZlNlYXRzID0gMDtcclxuICAgICAgICAgICAgcGFydHlTZWF0c1tzZWF0LnBhcnR5Q29kZV0gPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG51bWJlck9mU2VhdHMgPCBwYXJ0eVJlc3VsdHNbc2VhdC5wYXJ0eUNvZGVdLmxldmVsaW5nU2VhdHMgJiYgIWZpbmlzaGVkRGlzdHJpY3RzLmluY2x1ZGVzKHNlYXQuZGlzdHJpY3QpKSB7XHJcbiAgICAgICAgICAgIHNlYXQuc2VhdE51bWJlciA9IHNlYXRJbmRleCsrO1xyXG5cclxuICAgICAgICAgICAgcGFydHlTZWF0c1tzZWF0LnBhcnR5Q29kZV0rKztcclxuICAgICAgICAgICAgZGlzdHJpY3RSZXN1bHRzW3NlYXQuZGlzdHJpY3RdLmxldmVsaW5nU2VhdHMrKztcclxuICAgICAgICAgICAgZGlzdHJpY3RQYXJ0eVJlc3VsdHNbc2VhdC5kaXN0cmljdF1bc2VhdC5wYXJ0eUNvZGVdLmxldmVsaW5nU2VhdHMrKztcclxuICAgICAgICAgICAgZGlzdHJpY3RQYXJ0eVJlc3VsdHNbc2VhdC5kaXN0cmljdF1bc2VhdC5wYXJ0eUNvZGVdLnRvdGFsU2VhdHMrKztcclxuXHJcbiAgICAgICAgICAgIGZpbmlzaGVkRGlzdHJpY3RzLnB1c2goc2VhdC5kaXN0cmljdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFydHlSZXN0UXVvdGllbnRzW3NlYXQucGFydHlDb2RlXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHBhcnR5UmVzdFF1b3RpZW50c1tzZWF0LnBhcnR5Q29kZV0gPSB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0eUNvZGU6IHNlYXQucGFydHlDb2RlLFxyXG4gICAgICAgICAgICAgICAgbGV2ZWxpbmdTZWF0czogW3NlYXRdLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhcnR5UmVzdFF1b3RpZW50c1tzZWF0LnBhcnR5Q29kZV0ubGV2ZWxpbmdTZWF0cy5wdXNoKHNlYXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV2ZWxpbmdTZWF0cy5zaGlmdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwYXJ0eVJlc3RRdW90aWVudHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkaXN0cmlidXRlTGV2ZWxpbmdTZWF0c09uRGlzdHJpY3RzUHJlMjAwNShcclxuICAgIHBheWxvYWQ6IENvbXB1dGF0aW9uUGF5bG9hZCxcclxuICAgIGxldmVsaW5nUGFydHlDb2Rlczogc3RyaW5nW10sXHJcbiAgICBwYXJ0eVJlc3VsdHM6IF8uRGljdGlvbmFyeTxQYXJ0eVJlc3VsdD4sXHJcbiAgICBkaXN0cmljdFBhcnR5UmVzdWx0czogXy5EaWN0aW9uYXJ5PF8uRGljdGlvbmFyeTxQYXJ0eVJlc3VsdD4+LFxyXG4gICAgZGlzdHJpY3RSZXN1bHRzOiBfLkRpY3Rpb25hcnk8RGlzdHJpY3RSZXN1bHQ+XHJcbik6IF8uRGljdGlvbmFyeTxQYXJ0eVJlc3RRdW90aWVudHM+IHtcclxuICAgIGxldCBsZXZlbGluZ1NlYXRzOiBMZXZlbGluZ1NlYXRbXSA9IFtdO1xyXG4gICAgY29uc3QgcGFydHlSZXN0UXVvdGllbnRzOiBfLkRpY3Rpb25hcnk8UGFydHlSZXN0UXVvdGllbnRzPiA9IHt9O1xyXG5cclxuICAgIGNvbnN0IHBhcnR5U2VhdHM6IF8uRGljdGlvbmFyeTxudW1iZXI+ID0ge307XHJcbiAgICBsZXQgc2VhdEluZGV4ID0gMTtcclxuICAgIGxldCBxdW90aWVudEluZGV4ID0gMTtcclxuICAgIHdoaWxlIChzZWF0SW5kZXggPD0gcGF5bG9hZC5sZXZlbGluZ1NlYXRzKSB7XHJcbiAgICAgICAgaWYgKGxldmVsaW5nU2VhdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGxldmVsaW5nU2VhdHMgPSBnZW5lcmF0ZUxldmVsaW5nU2VhdEFycmF5KFxyXG4gICAgICAgICAgICAgICAgQWxnb3JpdGhtVHlwZS5TQUlOVEVfTEFHVUUsXHJcbiAgICAgICAgICAgICAgICBsZXZlbGluZ1BhcnR5Q29kZXMsXHJcbiAgICAgICAgICAgICAgICBwYXJ0eVJlc3VsdHMsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFJlc3VsdHMsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFBhcnR5UmVzdWx0cyxcclxuICAgICAgICAgICAgICAgIGZhbHNlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNlYXQgPSBsZXZlbGluZ1NlYXRzWzBdO1xyXG4gICAgICAgIHNlYXQucXVvdGllbnROdW1iZXIgPSBxdW90aWVudEluZGV4Kys7XHJcbiAgICAgICAgbGV0IG51bWJlck9mU2VhdHMgPSBwYXJ0eVNlYXRzW3NlYXQucGFydHlDb2RlXTtcclxuICAgICAgICBpZiAobnVtYmVyT2ZTZWF0cyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG51bWJlck9mU2VhdHMgPSAwO1xyXG4gICAgICAgICAgICBwYXJ0eVNlYXRzW3NlYXQucGFydHlDb2RlXSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobnVtYmVyT2ZTZWF0cyA8IHBhcnR5UmVzdWx0c1tzZWF0LnBhcnR5Q29kZV0ubGV2ZWxpbmdTZWF0cykge1xyXG4gICAgICAgICAgICBzZWF0LnNlYXROdW1iZXIgPSBzZWF0SW5kZXgrKztcclxuXHJcbiAgICAgICAgICAgIHBhcnR5U2VhdHNbc2VhdC5wYXJ0eUNvZGVdKys7XHJcbiAgICAgICAgICAgIGRpc3RyaWN0UmVzdWx0c1tzZWF0LmRpc3RyaWN0XS5sZXZlbGluZ1NlYXRzKys7XHJcbiAgICAgICAgICAgIGRpc3RyaWN0UGFydHlSZXN1bHRzW3NlYXQuZGlzdHJpY3RdW3NlYXQucGFydHlDb2RlXS5sZXZlbGluZ1NlYXRzKys7XHJcbiAgICAgICAgICAgIGRpc3RyaWN0UGFydHlSZXN1bHRzW3NlYXQuZGlzdHJpY3RdW3NlYXQucGFydHlDb2RlXS50b3RhbFNlYXRzKys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFydHlSZXN0UXVvdGllbnRzW3NlYXQucGFydHlDb2RlXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHBhcnR5UmVzdFF1b3RpZW50c1tzZWF0LnBhcnR5Q29kZV0gPSB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0eUNvZGU6IHNlYXQucGFydHlDb2RlLFxyXG4gICAgICAgICAgICAgICAgbGV2ZWxpbmdTZWF0czogW3NlYXRdLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhcnR5UmVzdFF1b3RpZW50c1tzZWF0LnBhcnR5Q29kZV0ubGV2ZWxpbmdTZWF0cy5wdXNoKHNlYXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV2ZWxpbmdTZWF0cy5zaGlmdCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhcnR5UmVzdFF1b3RpZW50cztcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyB3aGV0aGVyIGFueSBkaXN0cmljdHMgZW5kZWQgdXAgd2l0aCBhIG5lZ2F0aXZlIG51bWJlciBvZiBkaXN0cmljdCBzZWF0cy5cclxuICpcclxuICogQHBhcmFtIGRpc3RyaWN0U2VhdHMgVGhlIGRpc3RyaWJ1dGlvbiBvZiBkaXN0cmljdCBzZWF0cyB0byBjaGVja1xyXG4gKi9cclxuZnVuY3Rpb24gYW55TmVnYXRpdmVTZWF0cyhkaXN0cmljdFNlYXRzOiBfLkRpY3Rpb25hcnk8bnVtYmVyPik6IGJvb2xlYW4ge1xyXG4gICAgZm9yIChjb25zdCBkaXN0cmljdE5hbWUgaW4gZGlzdHJpY3RTZWF0cykge1xyXG4gICAgICAgIGlmIChkaXN0cmljdFNlYXRzLmhhc093blByb3BlcnR5KGRpc3RyaWN0TmFtZSkpIHtcclxuICAgICAgICAgICAgaWYgKGRpc3RyaWN0U2VhdHNbZGlzdHJpY3ROYW1lXSA8IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG4vKipcclxuICogQnJlYWtzIHRpZXMgaW4gdGhlIGRpc3RyaWJ1dGlvbiBvZiBpdGVtcyBvbiBuYW1lc1xyXG4gKlxyXG4gKiBAcGFyYW0gd2lubmVycyBUaGUgbGlzdCBvZiBtdWx0aXBsZSB3aW5uZXJzIGZyb20gdGhlIGRpc3RyaWJ1dGlvbiBzdGFnZVxyXG4gKiBAcGFyYW0gYmFzZVZhbHVlIFRoZSBfLkRpY3Rpb25hcnkgZnJvbSB3aW5uZXJzIHRvIHRoZWlyIHJlc3BlY3RpdmUgbnVtZXJhdG9yc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGJyZWFrVGllcyh3aW5uZXJzOiBLZXlWYWx1ZVBhaXJbXSwgYmFzZVZhbHVlOiBfLkRpY3Rpb25hcnk8bnVtYmVyPik6IEtleVZhbHVlUGFpciB7XHJcbiAgICBjb25zdCB3aW5uZXJzQ29weSA9IFsuLi53aW5uZXJzXTtcclxuXHJcbiAgICAvLyBGaW5kIHRoZSBoaWdoZXN0IG51bWVyYXRvciBvZiB0aGUgd2lubmVyc1xyXG4gICAgY29uc3QgbnVtZXJhdG9ycyA9IHdpbm5lcnMubWFwKChlbnRyeSkgPT4gYmFzZVZhbHVlW2VudHJ5LmtleV0pO1xyXG4gICAgY29uc3QgbWF4TnVtZXJhdG9yID0gTWF0aC5tYXgoLi4ubnVtZXJhdG9ycyk7XHJcblxyXG4gICAgLy8gRmlsdGVyIG91dCBhbGwgd2lubmVycyB0aGF0IGRpZCBub3QgaGF2ZSB0aGUgaGlnaGVzdCBudW1lcmF0b3JcclxuICAgIHdpbm5lcnNDb3B5LmZpbHRlcigoaXRlbSkgPT4gYmFzZVZhbHVlW2l0ZW0ua2V5XSA9PT0gbWF4TnVtZXJhdG9yKTtcclxuXHJcbiAgICAvLyBXZSB3aWxsIGFsd2F5cyBkbyB0aGUgY29pbiBmbGlwLCBiZWNhdXNlIGlmIHRoZXJlIGlzIG9ubHkgMSBpdGVtIHRoZXJlIGlzIDEwMCUgY2hhbmNlIG9mIGl0IGJlaW5nIHNlbGVjdGVkLlxyXG4gICAgLy8gQW5kIHRoZSBjb2luZmxpcCBzaG91bGQgYmUgcGVyZm9ybWVkIGlmIHRoZXJlIGFyZSBtb3JlIHRoYW4gMSBpdGVtIHJlbWFpbmluZyBhdCB0aGlzIHN0YWdlXHJcbiAgICByZXR1cm4gd2lubmVyc0NvcHlbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogd2lubmVyc0NvcHkubGVuZ3RoKV07XHJcbn1cclxuIiwiaW1wb3J0IHsgVm90ZXMsIE1ldHJpY3MsIFBhcmFtZXRlcnMgfSBmcm9tIFwiLi4vcmVxdWVzdGVkLWRhdGEvcmVxdWVzdGVkLWRhdGEtbW9kZWxzXCI7XHJcblxyXG5leHBvcnQgZW51bSBBbGdvcml0aG1UeXBlIHtcclxuICAgIFNBSU5URV9MQUdVRSA9IFwiU0FJTlRFX0xBR1VFXCIsXHJcbiAgICBEX0hPTkRUID0gXCJEX0hPTkRUXCIsXHJcbiAgICBMQVJHRVNUX0ZSQUNUSU9OX0hBUkUgPSBcIkxBUkdFU1RfRlJBQ1RJT05fSEFSRVwiLFxyXG4gICAgTEFSR0VTVF9GUkFDVElPTl9EUk9PUCA9IFwiTEFSR0VTVF9GUkFDVElPTl9EUk9PUFwiLFxyXG4gICAgTEFSR0VTVF9GUkFDVElPTl9IQUdFTkJBQ0hfQklTQ0hPRkYgPSBcIkxBUkdFU1RfRlJBQ1RJT05fSEFHRU5CQUNIX0JJU0NIT0ZGXCIsXHJcbiAgICBVTkRFRklORUQgPSBcIlVOREVGSU5FRFwiLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXB1dGF0aW9uUGF5bG9hZCB7XHJcbiAgICBhbGdvcml0aG06IEFsZ29yaXRobVR5cGU7XHJcbiAgICBmaXJzdERpdmlzb3I6IG51bWJlcjtcclxuICAgIGRpc3RyaWN0VGhyZXNob2xkOiBudW1iZXI7XHJcbiAgICBlbGVjdGlvblRocmVzaG9sZDogbnVtYmVyO1xyXG4gICAgZGlzdHJpY3RTZWF0czogbnVtYmVyO1xyXG4gICAgbGV2ZWxpbmdTZWF0czogbnVtYmVyO1xyXG4gICAgYXJlYUZhY3RvcjogbnVtYmVyO1xyXG4gICAgdm90ZXM6IFZvdGVzW107XHJcbiAgICBtZXRyaWNzOiBNZXRyaWNzW107XHJcbiAgICBwYXJhbWV0ZXJzOiBQYXJhbWV0ZXJzO1xyXG4gICAgcGFydHlNYXA6IF8uRGljdGlvbmFyeTxzdHJpbmc+O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERpc3RyaWN0UmVzdWx0IHtcclxuICAgIC8qKiBOYW1lIG9mIHRoZSBkaXN0cmljdCAqL1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgLyoqIE51bWJlciBvZiBkaXN0cmljdCBzZWF0cyBhdmFpbGFibGUgKi9cclxuICAgIGRpc3RyaWN0U2VhdHM6IG51bWJlcjtcclxuICAgIC8qKiBOdW1iZXIgb2YgbGV2ZWxpbmcgc2VhdHMgcmVjZWl2ZWQgKi9cclxuICAgIGxldmVsaW5nU2VhdHM6IG51bWJlcjtcclxuICAgIHRvdGFsU2VhdHM6IG51bWJlcjtcclxuICAgIC8qKiBUb3RhbCBudW1iZXIgb2Ygdm90ZXMgY2FzdCBpbiB0aGUgZGlzdHJpY3QgKi9cclxuICAgIHZvdGVzOiBudW1iZXI7XHJcbiAgICAvKiogSG93IG1hbnkgcGVyY2VudCBvZiBhbGwgdm90ZXMgd2VyZSBjYXN0IGluIHRoaXMgZGlzdHJpY3QgKi9cclxuICAgIHBlcmNlbnRWb3RlczogbnVtYmVyO1xyXG4gICAgLyoqIEF2ZXJhZ2UgbnVtYmVyIG9mIHZvdGVzIHBlciBzZWF0ICovXHJcbiAgICB2b3Rlc1BlclNlYXQ6IG51bWJlcjtcclxuICAgIC8qKiBPdmVydmlldyBvZiBkZXRhaWxzIHJlZ2FyZGluZyBxdW90aWVudHMgcGVyIHBhcnR5IGFuZCB3aW5uZXIgZm9yIGVhY2ggZGlzdHJpY3Qgc2VhdCAqL1xyXG4gICAgZGlzdHJpY3RTZWF0UmVzdWx0OiBTZWF0UmVzdWx0W107XHJcbiAgICAvKiogT3ZlcnZpZXcgb2YgaG93IG1hbnkgdm90ZXMsIHBlcmNlbnQgb2Ygdm90ZXMgYW5kIHNlYXRzIGVhY2ggcGFydHkgZ290ICovXHJcbiAgICBwYXJ0eVJlc3VsdHM6IFBhcnR5UmVzdWx0W107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGlzdHJpY3RSZXN1bHR2MiB7XHJcbiAgICAvKiogTmFtZSBvZiB0aGUgZGlzdHJpY3QgKi9cclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIC8qKiBOdW1iZXIgb2YgZGlzdHJpY3Qgc2VhdHMgYXZhaWxhYmxlICovXHJcbiAgICBkaXN0cmljdFNlYXRzOiBudW1iZXI7XHJcbiAgICAvKiogTnVtYmVyIG9mIGxldmVsaW5nIHNlYXRzIHJlY2VpdmVkICovXHJcbiAgICBsZXZlbGluZ1NlYXRzOiBudW1iZXI7XHJcbiAgICAvKiogVG90YWwgbnVtYmVyIG9mIHNlYXRzIHJlY2VpdmVkICovXHJcbiAgICB0b3RhbFNlYXRzOiBudW1iZXI7XHJcbiAgICAvKiogVG90YWwgbnVtYmVyIG9mIHZvdGVzIGNhc3QgaW4gdGhlIGRpc3RyaWN0ICovXHJcbiAgICB2b3RlczogbnVtYmVyO1xyXG4gICAgLyoqIEhvdyBtYW55IHBlcmNlbnQgb2YgYWxsIHZvdGVzIHdlcmUgY2FzdCBpbiB0aGlzIGRpc3RyaWN0ICovXHJcbiAgICBwZXJjZW50Vm90ZXM6IG51bWJlcjtcclxuICAgIC8qKiBBdmVyYWdlIG51bWJlciBvZiB2b3RlcyBwZXIgc2VhdCAqL1xyXG4gICAgdm90ZXNQZXJTZWF0OiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdG9yZXMgdGhlIHF1b3RpZW50cyBmb3IgYWxsIHRoZSBwYXJ0aWVzIGluIGEgZGlzdHJpY3RcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGlzdHJpY3RRdW90aWVudHMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZGlzdHJpY3QsIHRoZSBrZXkgb2YgdGhlIHJvd1xyXG4gICAgICovXHJcbiAgICBkaXN0cmljdDogc3RyaW5nO1xyXG4gICAgbGV2ZWxsaW5nU2VhdFJvdW5kczogUGFydHlRdW90aWVudFtdO1xyXG59XHJcblxyXG4vKipcclxuICogU3RvcmVzIHRoZSBxdW90aWVudCBvZiBhIHBhcnR5IGFuZCB3aGV0aGVyIGl0IHdvbiBhIGxldmVsaW5nIHNlYXQgaW4gYSBzcGVjaWZpYyBkaXN0cmljdFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQYXJ0eVF1b3RpZW50IHtcclxuICAgIHBhcnR5Q29kZTogc3RyaW5nO1xyXG4gICAgcXVvdGllbnQ6IG51bWJlcjtcclxuICAgIHdvbkxldmVsbGluZ1NlYXQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGlzdHJpYnV0aW9uUmVzdWx0IHtcclxuICAgIC8qKiBBIGRpY3Rpb25hcnkgdGFraW5nIHBhcnR5Q29kZXMgYW5kIHJldHVybmluZyB0aGUgbWF0Y2hpbmcgbnVtYmVyIG9mIHNlYXRzIHdvbiBpbiB0aGlzIGRpc3RyaWJ1dGlvbiAqL1xyXG4gICAgc2VhdHNXb246IF8uRGljdGlvbmFyeTxudW1iZXI+O1xyXG4gICAgLyoqIExpc3Qgb2YgaW5mb3JtYXRpb24gcmVnYXJkaW5nIHRoZSBkaXN0cmlidXRpb24gb2YgdGhlIGluZGl2aWR1YWwgc2VhdHMgKi9cclxuICAgIHNlYXRSZXN1bHRzOiBTZWF0UmVzdWx0W107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmF0aW9uYWxEaXN0cmlidXRpb25SZXN1bHQge1xyXG4gICAgLyoqIEEgRGlzdHJpYnV0aW9uUmVzdWx0IHdpdGggaW5mb3JtYXRpb24gYWJvdXQgaG93IG1hbnkgc2VhdHMgZWFjaCBwYXJ0eSB3b24gYW5kIHdoYXQgdGhlIHJlc3VsdHMgd2VyZSBvZiBlYWNoIHJvdW5kIG9mIHRoZSBkaXN0cmlidXRpb24gKi9cclxuICAgIG5hdGlvbmFsRGlzdHJpYnV0aW9uOiBEaXN0cmlidXRpb25SZXN1bHQ7XHJcbiAgICAvKiogQXJyYXkgb2Ygc3RyaW5ncyBsaXN0aW5nIHRoZSBwYXJ0eSBjb2RlcyBvZiBhbGwgdGhlIHBhcnRpZXMgdGhhdCBnYWluZWQgbW9yZSBzZWF0cyBpbiB0aGUgbmF0aW9uYWwgZGlzdHJpYnV0aW9uIHRoYW4gdGhlIGRpc3RyaWN0IGRpc3RyaWJ1dGlvbiAqL1xyXG4gICAgbGV2ZWxpbmdQYXJ0eUNvZGVzOiBzdHJpbmdbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMYWd1ZURob250UmVzdWx0IHtcclxuICAgIC8qKiBBIGxpc3Qgb2YgcGFydHkgcmVzdWx0cywgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCBuYXRpb25hbCByZXN1bHRzICovXHJcbiAgICBwYXJ0eVJlc3VsdHM6IFBhcnR5UmVzdWx0W107XHJcbiAgICAvKiogQSBsaXN0IG9mIGRpc3RyaWN0IHJlc3VsdHMsIHdpdGggaW5mb3JtYXRpb24gYWJvdXQgZGlzdHJpY3QtbGV2ZWwgcmVzdWx0cyAqL1xyXG4gICAgZGlzdHJpY3RSZXN1bHRzOiBEaXN0cmljdFJlc3VsdFtdO1xyXG4gICAgLyoqIEEgbGlzdCBvZiBpbmZvcm1hdGlvbiByZWdhcmRpbmcgdGhlIGRpc3RyaWJ1dGlvbiBvZiB0aGUgbGV2ZWxpbmcgc2VhdHMgKi9cclxuICAgIGxldmVsaW5nU2VhdERpc3RyaWJ1dGlvbjogUGFydHlSZXN0UXVvdGllbnRzW107XHJcbiAgICAvKiogQSBsaXN0IG9mIHdoYXQgdGhlIGZpbmFsIHF1b3RpZW50cyB3ZXJlIGZvciBlYWNoIHBhcnR5IGluIGVhY2ggZGlzdHJpY3QgKi9cclxuICAgIGZpbmFsUXVvdGllbnRzOiBEaXN0cmljdFF1b3RpZW50c1tdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExldmVsaW5nU2VhdCB7XHJcbiAgICAvKiogVGhlIG51bWJlciBvZiB3aGVuIHRoaXMgc2VhdCB3YXMgc2VsZWN0ZWQsIDAgaWYgaXQgd2FzIG5ldmVyIHNlbGVjdGVkLiAqL1xyXG4gICAgc2VhdE51bWJlcjogbnVtYmVyO1xyXG4gICAgLyoqIFRoZSBudW1iZXIgdGhpcyBxdW90aWVudCBoYWQgaW4gdGhlIHRvdGFsIHF1b3RpZW50IGxpc3QuICovXHJcbiAgICBxdW90aWVudE51bWJlcjogbnVtYmVyO1xyXG4gICAgLyoqIFRoZSBkaXN0cmljdCB0aGUgc2VhdCBiZWxvbmdzIHRvICovXHJcbiAgICBkaXN0cmljdDogc3RyaW5nO1xyXG4gICAgLyoqIFRoZSBwYXJ0eSB0aGUgc2VhdCBiZWxvbmdzIHRvICovXHJcbiAgICBwYXJ0eUNvZGU6IHN0cmluZztcclxuICAgIC8qKiBUaGUgcmVzdC1xdW90aWVudCBjb21wdXRlZCBmb3IgdGhpcyBzZWF0ICovXHJcbiAgICBxdW90aWVudDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBhcnR5UmVzdFF1b3RpZW50cyB7XHJcbiAgICBwYXJ0eUNvZGU6IHN0cmluZztcclxuICAgIGxldmVsaW5nU2VhdHM6IExldmVsaW5nU2VhdFtdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBhcnR5UmVzdWx0IHtcclxuICAgIC8qKiBUaGUgcGFydHlDb2RlIGFzc29jaWF0ZWQgd2l0aCB0aGUgcGFydHkgKi9cclxuICAgIHBhcnR5Q29kZTogc3RyaW5nO1xyXG4gICAgLyoqIFRoZSBwYXJ0eSBuYW1lIG9mIHRoZSBwYXJ0eSAqL1xyXG4gICAgcGFydHlOYW1lOiBzdHJpbmc7XHJcbiAgICAvKiogVGhlIG51bWJlciBvZiB2b3RlcyB0aGUgcGFydHkgcmVjZWl2ZWQsIGVpdGhlciBuYXRpb25hbGx5IG9yIHdpdGhpbiB0aGUgZGlzdHJpY3QgKi9cclxuICAgIHZvdGVzOiBudW1iZXI7XHJcbiAgICAvKiogVGhlIHBlcmNlbnQgb2Ygdm90ZXMgdGhlIHBhcnR5IHJlY2VpdmVkLCBlaXRoZXIgbmF0aW9uYWxseSBvciB3aXRoaW4gdGhlIGRpc3RyaWN0ICovXHJcbiAgICBwZXJjZW50Vm90ZXM6IG51bWJlcjtcclxuICAgIC8qKiBUaGUgbnVtYmVyIG9mIHNlYXRzIHRoZSBwYXJ0eSByZWNlaXZlZCwgZWl0aGVyIG5hdGlvbmFsbHkgb3Igd2l0aGluIHRoZSBkaXN0cmljdCAqL1xyXG4gICAgZGlzdHJpY3RTZWF0czogbnVtYmVyO1xyXG4gICAgLyoqIFRoZSBudW1iZXIgb2YgbGV2ZWxpbmcgc2VhdHMgdGhlIHBhcnR5IHJlY2VpdmVkLCBlaXRoZXIgbmF0aW9uYWxseSBvciB3aXRoaW4gdGhlIGRpc3RyaWN0ICovXHJcbiAgICBsZXZlbGluZ1NlYXRzOiBudW1iZXI7XHJcbiAgICAvKiogVGhlIHRvdGFsIG51bWJlciBvZiBzZWF0cyB0aGUgcGFydHkgcmVjZWl2ZWQsIGVpdGhlciBuYXRpb25hbGx5IG9yIHdpdGhpbiB0aGUgZGlzdHJpY3QgKi9cclxuICAgIHRvdGFsU2VhdHM6IG51bWJlcjtcclxuICAgIC8qKiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBwYXJ0eXMgbnVtYmVyIG9mIHZvdGVzIGFuZCBzZWF0cywgZWl0aGVyIG5hdGlvbmFsbHkgb3Igd2l0aGluIHRoZSBkaXN0cmljdCAqL1xyXG4gICAgcHJvcG9ydGlvbmFsaXR5OiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBOYXRpb25hbFBhcnR5UmVzdWx0IHtcclxuICAgIC8qKiBUaGUgcGFydHlDb2RlIGFzc29jaWF0ZWQgd2l0aCB0aGUgcGFydHkgKi9cclxuICAgIHBhcnR5Q29kZTogc3RyaW5nO1xyXG4gICAgLyoqIFRoZSBwYXJ0eSBuYW1lIG9mIHRoZSBwYXJ0eSAqL1xyXG4gICAgcGFydHlOYW1lOiBzdHJpbmc7XHJcbiAgICAvKiogVGhlIG51bWJlciBvZiB2b3RlcyB0aGUgcGFydHkgcmVjZWl2ZWQsIG5hdGlvbmFsbHkgb3Igd2l0aGluIHRoZSBkaXN0cmljdCAqL1xyXG4gICAgdm90ZXM6IG51bWJlcjtcclxuICAgIC8qKiBUaGUgcGVyY2VudCBvZiB2b3RlcyB0aGUgcGFydHkgcmVjZWl2ZWQsIG5hdGlvbmFsbHkgb3Igd2l0aGluIHRoZSBkaXN0cmljdCAqL1xyXG4gICAgcGVyY2VudFZvdGVzOiBudW1iZXI7XHJcbiAgICAvKiogVGhlIG51bWJlciBvZiBzZWF0cyB0aGUgcGFydHkgcmVjZWl2ZWQsIG5hdGlvbmFsbHkgb3Igd2l0aGluIHRoZSBkaXN0cmljdCAqL1xyXG4gICAgZGlzdHJpY3RTZWF0czogbnVtYmVyO1xyXG4gICAgLyoqIFRoZSBudW1iZXIgb2YgbGV2ZWxpbmcgc2VhdHMgdGhlIHBhcnR5IHJlY2VpdmVkLCBuYXRpb25hbGx5IG9yIHdpdGhpbiB0aGUgZGlzdHJpY3QgKi9cclxuICAgIGxldmVsaW5nU2VhdHM6IG51bWJlcjtcclxuICAgIC8qKiBUaGUgdG90YWwgbnVtYmVyIG9mIHNlYXRzIHRoZSBwYXJ0eSByZWNlaXZlZCB3aXRoaW4sIG5hdGlvbmFsbHkgb3IgdGhlIGRpc3RyaWN0ICovXHJcbiAgICB0b3RhbFNlYXRzOiBudW1iZXI7XHJcbiAgICAvKiogVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgcGFydHlzIG51bWJlciBvZiB2b3RlcyBhbmQgc2VhdHMsIG5hdGlvbmFsbHkgb3Igd2l0aGluIHRoZSBkaXN0cmljdCAqL1xyXG4gICAgcHJvcG9ydGlvbmFsaXR5OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGFydHlSZXN1bHR2MiBleHRlbmRzIE5hdGlvbmFsUGFydHlSZXN1bHQge1xyXG4gICAgLyoqIFRoZSBkaXN0cmljdCB3aGljaCB0aGUgcmVzdWx0cyBhcmUgZnJvbSAqL1xyXG4gICAgZGlzdHJpY3Q6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTZWF0UGFydHlSZXN1bHQge1xyXG4gICAgLyoqIFRoZSBwYXJ0eUNvZGUgb2YgdGhlIHBhcnRpY2lwYXRpbmcgcGFydHkgKi9cclxuICAgIHBhcnR5Q29kZTogc3RyaW5nO1xyXG4gICAgLyoqIFRoZSBxdW90aWVudCB0aGUgcGFydHkgZ290IGluIHRoZSBkaXN0cmlidXRpb24gKi9cclxuICAgIHF1b3RpZW50OiBudW1iZXI7XHJcbiAgICAvKiogVGhlIGRlbm9taW5hdG9yIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSByZXN1bHQgKi9cclxuICAgIGRlbm9taW5hdG9yOiBudW1iZXI7XHJcbiAgICAvKiogVGhlIG51bWJlciBvZiB2b3RlcyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgcmVzdWx0ICovXHJcbiAgICB2b3RlczogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNlYXRSZXN1bHQge1xyXG4gICAgLyoqIFdoaWNoIG51bWJlciB0aGlzIHNlYXQgaGFzIGluIHRoZSBkaXN0cmlidXRpb24gKGZpcnN0IHNlYXQgPSAwKSAqL1xyXG4gICAgc2VhdEluZGV4OiBudW1iZXI7XHJcbiAgICAvKiogVGhlIHBhcnR5Q29kZSBvZiB0aGUgcGFydHkgdGhhdCB3b24gdGhlIHNlYXQgKi9cclxuICAgIHdpbm5lcjogc3RyaW5nO1xyXG4gICAgLyoqIEEgbGlzdCB3aXRoIGluZm9ybWF0aW9uIHJlZ2FyZGluZyB0aGUgcGFydGllcyBjb21wZWF0aW5nIGZvciB0aGUgc2VhdCAqL1xyXG4gICAgcGFydHlSZXN1bHRzOiBTZWF0UGFydHlSZXN1bHRbXTtcclxufVxyXG4iLCJpbXBvcnQgeyBDb21wdXRhdGlvblBheWxvYWQsIExhZ3VlRGhvbnRSZXN1bHQgfSBmcm9tIFwiLi9jb21wdXRhdGlvbi1tb2RlbHNcIjtcclxuaW1wb3J0IHsgVm90ZXMsIE1ldHJpY3MsIFBhcmFtZXRlcnMsIEZpcnN0RGl2aXNvciB9IGZyb20gXCIuLi9yZXF1ZXN0ZWQtZGF0YS9yZXF1ZXN0ZWQtZGF0YS1tb2RlbHNcIjtcclxuaW1wb3J0IHsgbGFndWVEaG9udCB9IGZyb20gXCIuL2xvZ2ljXCI7XHJcbmltcG9ydCB7IHVubG9hZGVkUGFyYW1ldGVycyB9IGZyb20gXCIuL2NvbXB1dGF0aW9uLXN0YXRlXCI7XHJcbmltcG9ydCB7IENsZWFyU3RhdGUgfSBmcm9tIFwiLi4vcmVkdWNlcnMvZ2xvYmFsLWFjdGlvbnNcIjtcclxuXHJcbi8qKlxyXG4gKiBFbnVtIGNvbnRhaW5pbmcgYWxsIHBvc3NpYmxlIENvbXB1dGF0aW9uQWN0aW9uIHR5cGVzLlxyXG4gKi9cclxuZXhwb3J0IGVudW0gQ29tcHV0YXRpb25BY3Rpb25UeXBlIHtcclxuICAgIElOSVRJQUxJWkVfQ09NUFVUQVRJT04gPSBcIklOSVRJQUxJWkVfQ09NUFVUQVRJT05cIixcclxuICAgIFVQREFURV9DT01QVVRBVElPTiA9IFwiVVBEQVRFX0NBTENVTEFUSU9OXCIsXHJcbiAgICBTQVZFX0NPTVBVVEFUSU9OID0gXCJTQVZFX0NPTVBVVEFUSU9OXCIsXHJcbiAgICBSRVNFVF9TQVZFRF9DT01QVVRBVElPTiA9IFwiUkVTRVRfU0FWRURfQ09NUFVUQVRJT05cIixcclxuICAgIFVQREFURV9ISVNUT1JJQ0FMID0gXCJVUERBVEVfSElTVE9SSUNBTFwiLFxyXG59XHJcblxyXG4vKipcclxuICogVHlwZSBjb250YWluaW5nIGFsbCBwb3NzaWJsZSBDb21wdXRhdGlvbkFjdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb21wdXRhdGlvbkFjdGlvbiA9XHJcbiAgICB8IEluaXRpYWxpemVDb21wdXRhdGlvblxyXG4gICAgfCBVcGRhdGVDb21wdXRhdGlvblxyXG4gICAgfCBTYXZlQ29tcHV0YXRpb25cclxuICAgIHwgUmVzZXRTYXZlZENvbXB1dGF0aW9uXHJcbiAgICB8IFVwZGF0ZUhpc3RvcmljYWxcclxuICAgIHwgQ2xlYXJTdGF0ZTtcclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gZm9yIGluaXRpYWxpemluZyB0aGUgY29tcHV0YXRpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEluaXRpYWxpemVDb21wdXRhdGlvbiBleHRlbmRzIENvbXB1dGF0aW9uUGF5bG9hZCB7XHJcbiAgICB0eXBlOiBDb21wdXRhdGlvbkFjdGlvblR5cGUuSU5JVElBTElaRV9DT01QVVRBVElPTjtcclxuICAgIHJlc3VsdHM6IExhZ3VlRGhvbnRSZXN1bHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gY3JlYXRvciBmb3IgaW5pdGlhbGl6aW5nIHRoZSBjb21wdXRhdGlvbi5cclxuICpcclxuICogQHBhcmFtIGVsZWN0aW9uVHlwZSAtIGVsZWN0aW9uIGRhdGEgZmV0Y2hlZCBmcm9tIHRoZSBBUEkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUNvbXB1dGF0aW9uKFxyXG4gICAgeWVhcjogbnVtYmVyLFxyXG4gICAgdm90ZXM6IFZvdGVzW10sXHJcbiAgICBtZXRyaWNzOiBNZXRyaWNzW10sXHJcbiAgICBwYXJhbWV0ZXJzOiBQYXJhbWV0ZXJzW10sXHJcbiAgICBwYXJ0eU1hcDogXy5EaWN0aW9uYXJ5PHN0cmluZz5cclxuKSB7XHJcbiAgICBjb25zdCBmaWx0ZXJWb3RlczogVm90ZXNbXSA9IHZvdGVzLmZpbHRlcigodm90ZSkgPT4gdm90ZS5lbGVjdGlvblllYXIgPT09IHllYXIpO1xyXG4gICAgY29uc3QgZmlsdGVyTWV0cmljczogTWV0cmljc1tdID0gbWV0cmljcy5maWx0ZXIoKG1ldHJpYykgPT4gbWV0cmljLmVsZWN0aW9uWWVhciA9PT0geWVhcik7XHJcbiAgICBjb25zdCBmaWx0ZXJQYXJhbWV0ZXJzOiBQYXJhbWV0ZXJzID1cclxuICAgICAgICBwYXJhbWV0ZXJzLmZpbmQoKHBhcmFtZXRlcikgPT4gcGFyYW1ldGVyLmVsZWN0aW9uWWVhciA9PT0geWVhcikgfHwgdW5sb2FkZWRQYXJhbWV0ZXJzO1xyXG5cclxuICAgIGNvbnN0IHBheWxvYWQ6IENvbXB1dGF0aW9uUGF5bG9hZCA9IHtcclxuICAgICAgICBhbGdvcml0aG06IGZpbHRlclBhcmFtZXRlcnMuYWxnb3JpdGhtLmFsZ29yaXRobSxcclxuICAgICAgICBmaXJzdERpdmlzb3I6IGZpbHRlclBhcmFtZXRlcnMuYWxnb3JpdGhtLnBhcmFtZXRlcnNbRmlyc3REaXZpc29yXSxcclxuICAgICAgICBlbGVjdGlvblRocmVzaG9sZDogZmlsdGVyUGFyYW1ldGVycy50aHJlc2hvbGQsXHJcbiAgICAgICAgZGlzdHJpY3RUaHJlc2hvbGQ6IDAsXHJcbiAgICAgICAgZGlzdHJpY3RTZWF0czogZmlsdGVyUGFyYW1ldGVycy5kaXN0cmljdFNlYXRzLFxyXG4gICAgICAgIGxldmVsaW5nU2VhdHM6IGZpbHRlclBhcmFtZXRlcnMubGV2ZWxpbmdTZWF0cyxcclxuICAgICAgICBhcmVhRmFjdG9yOiBmaWx0ZXJQYXJhbWV0ZXJzLmFyZWFGYWN0b3IsXHJcbiAgICAgICAgdm90ZXM6IGZpbHRlclZvdGVzLFxyXG4gICAgICAgIG1ldHJpY3M6IGZpbHRlck1ldHJpY3MsXHJcbiAgICAgICAgcGFyYW1ldGVyczogZmlsdGVyUGFyYW1ldGVycyxcclxuICAgICAgICBwYXJ0eU1hcCxcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmVzdWx0cyA9IGxhZ3VlRGhvbnQocGF5bG9hZCk7XHJcbiAgICBjb25zdCBpbml0aWFsaXplQWN0aW9uOiBJbml0aWFsaXplQ29tcHV0YXRpb24gPSB7XHJcbiAgICAgICAgdHlwZTogQ29tcHV0YXRpb25BY3Rpb25UeXBlLklOSVRJQUxJWkVfQ09NUFVUQVRJT04sXHJcbiAgICAgICAgLi4ucGF5bG9hZCxcclxuICAgICAgICByZXN1bHRzLFxyXG4gICAgfTtcclxuICAgIHJldHVybiBpbml0aWFsaXplQWN0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGZvciB1cGRhdGluZyB0aGUgY29tcHV0YXRpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFVwZGF0ZUNvbXB1dGF0aW9uIGV4dGVuZHMgQ29tcHV0YXRpb25QYXlsb2FkIHtcclxuICAgIHR5cGU6IENvbXB1dGF0aW9uQWN0aW9uVHlwZS5VUERBVEVfQ09NUFVUQVRJT047XHJcbiAgICByZXN1bHRzOiBMYWd1ZURob250UmVzdWx0O1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGNyZWF0b3IgZm9yIHVwZGF0aW5nIHRoZSBjb21wdXRhdGlvbi5cclxuICpcclxuICogQHBhcmFtIHBheWxvYWQgLSBvYmplY3QgY29udGFpbmluZyBwYXJhbWV0ZXJzIGZvciBnZW5lcmF0aW5nIHJlc3VsdHMgYW5kXHJcbiAqIHVwZGF0aW5nIHN0YXRlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNvbXB1dGF0aW9uKHBheWxvYWQ6IENvbXB1dGF0aW9uUGF5bG9hZCkge1xyXG4gICAgY29uc3QgcmVzdWx0cyA9IGxhZ3VlRGhvbnQocGF5bG9hZCk7XHJcblxyXG4gICAgY29uc3QgdXBkYXRlQ2FsY3VsYXRpb25BY3Rpb246IFVwZGF0ZUNvbXB1dGF0aW9uID0ge1xyXG4gICAgICAgIC4uLnBheWxvYWQsXHJcbiAgICAgICAgdHlwZTogQ29tcHV0YXRpb25BY3Rpb25UeXBlLlVQREFURV9DT01QVVRBVElPTixcclxuICAgICAgICByZXN1bHRzLFxyXG4gICAgfTtcclxuICAgIHJldHVybiB1cGRhdGVDYWxjdWxhdGlvbkFjdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBmb3Igc2F2aW5nIHRoZSBjb21wdXRhdGlvbiBmb3IgY29tcGFyaXNvbnMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFNhdmVDb21wdXRhdGlvbiB7XHJcbiAgICB0eXBlOiBDb21wdXRhdGlvbkFjdGlvblR5cGUuU0FWRV9DT01QVVRBVElPTjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBjcmVhdG9yIGZvciBzYXZpbmcgdGhlIGNvbXB1dGF0aW9uIGZvciBjb21wYXJpc29ucy5cclxuICpcclxuICogQHBhcmFtIHllYXIgLSB5ZWFyIGlkZW50aWZpZXMgdGhlIGRhdGEgdGhlIGNvbXB1dGF0aW9uIHdhcyBwZXJmb3JtZWQgb24uXHJcbiAqIEBwYXJhbSByZXN1bHQgLSB0aGUgcmVzdWx0IG9mIHRoZSBjb21wdXRhdGlvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzYXZlQ29tcGFyaXNvbigpIHtcclxuICAgIGNvbnN0IGFjdGlvbjogU2F2ZUNvbXB1dGF0aW9uID0ge1xyXG4gICAgICAgIHR5cGU6IENvbXB1dGF0aW9uQWN0aW9uVHlwZS5TQVZFX0NPTVBVVEFUSU9OLFxyXG4gICAgfTtcclxuICAgIHJldHVybiBhY3Rpb247XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gZm9yIHJlc2V0dGluZyB0aGUgc2F2ZWQgY29tcHV0YXRpb24uIFRoZSBkZWZhdWx0IHNob3VsZCBiZSB0aGUgdmFsdWVzXHJcbiAqIGZyb20gdGhlIGRlZmF1bHQgY29tcHV0YXRpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlc2V0U2F2ZWRDb21wdXRhdGlvbiB7XHJcbiAgICB0eXBlOiBDb21wdXRhdGlvbkFjdGlvblR5cGUuUkVTRVRfU0FWRURfQ09NUFVUQVRJT047XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gY3JlYXRvciBmb3IgcmVzZXR0aW5nIHRoZSBzYXZlZCBjb21wdXRhdGlvbi4gVGhlIGRlZmF1bHQgc2hvdWxkIGJlXHJcbiAqIHRoZSB2YWx1ZXMgZnJvbSB0aGUgZGVmYXVsdCBjb21wdXRhdGlvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNldFNhdmVkQ29tcHV0YXRpb24oKSB7XHJcbiAgICBjb25zdCBhY3Rpb246IFJlc2V0U2F2ZWRDb21wdXRhdGlvbiA9IHtcclxuICAgICAgICB0eXBlOiBDb21wdXRhdGlvbkFjdGlvblR5cGUuUkVTRVRfU0FWRURfQ09NUFVUQVRJT04sXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBmb3IgdXBkYXRpbmcgdGhlIGhpc3RvcmljYWwgcmVmZXJlbmNlIGZvciB0aGUgY29tcHV0YXRpb24uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFVwZGF0ZUhpc3RvcmljYWwge1xyXG4gICAgdHlwZTogQ29tcHV0YXRpb25BY3Rpb25UeXBlLlVQREFURV9ISVNUT1JJQ0FMO1xyXG4gICAgaGlzdG9yaWNhbDogTGFndWVEaG9udFJlc3VsdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBjcmVhdG9yIGZvciB1cGRhdGluZyB0aGUgaGlzdG9yaWNhbCByZWZlcmVuY2UgZm9yIHRoZSBjb21wdXRhdGlvbi5cclxuICpcclxuICogQHBhcmFtIGVsZWN0aW9uIC0gdGhlIGVsZWN0aW9uIHRvIGNhbGN1bGF0ZSBiYXNlZCBvbiBpdHMgZGVmYXVsdCBwYXJhbWV0ZXJzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlSGlzdG9yaWNhbChcclxuICAgIHZvdGVzOiBWb3Rlc1tdLFxyXG4gICAgbWV0cmljczogTWV0cmljc1tdLFxyXG4gICAgcGFyYW1ldGVyczogUGFyYW1ldGVycyxcclxuICAgIHBhcnR5TWFwOiBfLkRpY3Rpb25hcnk8c3RyaW5nPlxyXG4pIHtcclxuICAgIGNvbnN0IHBheWxvYWQ6IENvbXB1dGF0aW9uUGF5bG9hZCA9IHtcclxuICAgICAgICBhbGdvcml0aG06IHBhcmFtZXRlcnMuYWxnb3JpdGhtLmFsZ29yaXRobSxcclxuICAgICAgICBkaXN0cmljdFNlYXRzOiBwYXJhbWV0ZXJzLmRpc3RyaWN0U2VhdHMsXHJcbiAgICAgICAgbGV2ZWxpbmdTZWF0czogcGFyYW1ldGVycy5sZXZlbGluZ1NlYXRzLFxyXG4gICAgICAgIGVsZWN0aW9uVGhyZXNob2xkOiBwYXJhbWV0ZXJzLnRocmVzaG9sZCxcclxuICAgICAgICBkaXN0cmljdFRocmVzaG9sZDogMCxcclxuICAgICAgICBmaXJzdERpdmlzb3I6IHBhcmFtZXRlcnMuYWxnb3JpdGhtLnBhcmFtZXRlcnNbRmlyc3REaXZpc29yXSxcclxuICAgICAgICBhcmVhRmFjdG9yOiBwYXJhbWV0ZXJzLmFyZWFGYWN0b3IsXHJcbiAgICAgICAgdm90ZXMsXHJcbiAgICAgICAgbWV0cmljcyxcclxuICAgICAgICBwYXJhbWV0ZXJzLFxyXG4gICAgICAgIHBhcnR5TWFwLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IGFjdGlvbjogVXBkYXRlSGlzdG9yaWNhbCA9IHtcclxuICAgICAgICB0eXBlOiBDb21wdXRhdGlvbkFjdGlvblR5cGUuVVBEQVRFX0hJU1RPUklDQUwsXHJcbiAgICAgICAgaGlzdG9yaWNhbDogbGFndWVEaG9udChwYXlsb2FkKSxcclxuICAgIH07XHJcbiAgICByZXR1cm4gYWN0aW9uO1xyXG59XHJcbiIsImltcG9ydCB7IFBhcmFtZXRlcnMsIEZpcnN0RGl2aXNvciB9IGZyb20gXCIuLi8uLi9yZXF1ZXN0ZWQtZGF0YS9yZXF1ZXN0ZWQtZGF0YS1tb2RlbHNcIjtcclxuaW1wb3J0IHsgQ29tcHV0YXRpb25NZW51UGF5bG9hZCB9IGZyb20gXCIuL2NvbXB1dGF0aW9uLW1lbnUtbW9kZWxzXCI7XHJcbmltcG9ydCB7IEFsZ29yaXRobVR5cGUgfSBmcm9tIFwiLi4vLi4vY29tcHV0YXRpb25cIjtcclxuaW1wb3J0IHsgQ2xlYXJTdGF0ZSB9IGZyb20gXCIuLi8uLi9yZWR1Y2Vycy9nbG9iYWwtYWN0aW9uc1wiO1xyXG5cclxuLyoqXHJcbiAqIEVudW0gY29udGFpbmluZyBhbGwgcG9zc2libGUgQ29tcHV0YXRpb25NZW51QWN0aW9uIHR5cGVzLlxyXG4gKi9cclxuZXhwb3J0IGVudW0gQ29tcHV0YXRpb25NZW51QWN0aW9uVHlwZSB7XHJcbiAgICBJTklUSUFMSVpFX0NPTVBVVEFUSU9OX01FTlUgPSBcIklOSVRJQUxJWkVfQ09NUFVUQVRJT05fTUVOVVwiLFxyXG4gICAgVVBEQVRFX0NPTVBVVEFUSU9OX01FTlUgPSBcIlVQREFURV9DT01QVVRBVElPTl9NRU5VXCIsXHJcbiAgICBUT0dHTEVfQVVUT19DT01QVVRFID0gXCJUT0dHTEVfQVVUT19DT01QVVRFXCIsXHJcbiAgICBTQVZFX1NFVFRJTkdTID0gXCJTQVZFX1NFVFRJTkdTXCIsXHJcbiAgICBSRVNFVF9TQVZFRF9TRVRUSU5HUyA9IFwiUkVTRVRfU0FWRURfU0VUVElOR1NcIixcclxufVxyXG5cclxuLyoqXHJcbiAqIFR5cGUgY29udGFpbmluZyBhbGwgcG9zc2libGUgQ29tcHV0YXRpb25NZW51QWN0aW9ucy5cclxuICovXHJcbmV4cG9ydCB0eXBlIENvbXB1dGF0aW9uTWVudUFjdGlvbiA9XHJcbiAgICB8IEluaXRpYWxpemVDb21wdXRhdGlvbk1lbnVcclxuICAgIHwgVXBkYXRlQ29tcHV0YXRpb25NZW51XHJcbiAgICB8IFRvZ2dsZUF1dG9Db21wdXRlXHJcbiAgICB8IFNhdmVTZXR0aW5nc1xyXG4gICAgfCBSZXNldFNhdmVkU2V0dGluZ3NcclxuICAgIHwgQ2xlYXJTdGF0ZTtcclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gZm9yIGluaXRpYWxpemluZyB0aGUgY29tcHV0YXRpb24gbWVudS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW5pdGlhbGl6ZUNvbXB1dGF0aW9uTWVudSB7XHJcbiAgICB0eXBlOiBDb21wdXRhdGlvbk1lbnVBY3Rpb25UeXBlLklOSVRJQUxJWkVfQ09NUFVUQVRJT05fTUVOVTtcclxuICAgIGVsZWN0aW9uWWVhcnM6IHN0cmluZ1tdO1xyXG4gICAgeWVhcjogc3RyaW5nO1xyXG4gICAgYWxnb3JpdGhtOiBBbGdvcml0aG1UeXBlO1xyXG4gICAgZmlyc3REaXZpc29yOiBzdHJpbmc7XHJcbiAgICBlbGVjdGlvblRocmVzaG9sZDogc3RyaW5nO1xyXG4gICAgZGlzdHJpY3RUaHJlc2hvbGQ6IHN0cmluZztcclxuICAgIGRpc3RyaWN0U2VhdHM6IHN0cmluZztcclxuICAgIGxldmVsaW5nU2VhdHM6IHN0cmluZztcclxuICAgIGF1dG9Db21wdXRlOiBib29sZWFuO1xyXG4gICAgYXJlYUZhY3Rvcjogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGNyZWF0b3IgZm9yIGluaXRpYWxpemluZyB0aGUgY29tcHV0YXRpb24gbWVudS5cclxuICpcclxuICogQHBhcmFtIGVsZWN0aW9uVHlwZSAtIGVsZWN0aW9uIGRhdGEgZmV0Y2hlZCBmcm9tIHRoZSBBUEkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUNvbXB1dGF0aW9uTWVudShlbGVjdGlvblllYXJzOiBzdHJpbmdbXSwgcGFyYW1ldGVyczogUGFyYW1ldGVycykge1xyXG4gICAgY29uc3QgYWN0aW9uOiBJbml0aWFsaXplQ29tcHV0YXRpb25NZW51ID0ge1xyXG4gICAgICAgIHR5cGU6IENvbXB1dGF0aW9uTWVudUFjdGlvblR5cGUuSU5JVElBTElaRV9DT01QVVRBVElPTl9NRU5VLFxyXG4gICAgICAgIGVsZWN0aW9uWWVhcnMsXHJcbiAgICAgICAgeWVhcjogcGFyYW1ldGVycy5lbGVjdGlvblllYXIudG9TdHJpbmcoKSxcclxuICAgICAgICBhbGdvcml0aG06IHBhcmFtZXRlcnMuYWxnb3JpdGhtLmFsZ29yaXRobSxcclxuICAgICAgICBmaXJzdERpdmlzb3I6IHBhcmFtZXRlcnMuYWxnb3JpdGhtLnBhcmFtZXRlcnNbRmlyc3REaXZpc29yXS50b1N0cmluZygpLFxyXG4gICAgICAgIGVsZWN0aW9uVGhyZXNob2xkOiBwYXJhbWV0ZXJzLnRocmVzaG9sZC50b1N0cmluZygpLFxyXG4gICAgICAgIGRpc3RyaWN0VGhyZXNob2xkOiBcIjBcIixcclxuICAgICAgICBkaXN0cmljdFNlYXRzOiBwYXJhbWV0ZXJzLmRpc3RyaWN0U2VhdHMudG9TdHJpbmcoKSxcclxuICAgICAgICBsZXZlbGluZ1NlYXRzOiBwYXJhbWV0ZXJzLmxldmVsaW5nU2VhdHMudG9TdHJpbmcoKSxcclxuICAgICAgICBhcmVhRmFjdG9yOiBwYXJhbWV0ZXJzLmFyZWFGYWN0b3IudG9TdHJpbmcoKSxcclxuICAgICAgICBhdXRvQ29tcHV0ZTogdHJ1ZSxcclxuICAgIH07XHJcbiAgICByZXR1cm4gYWN0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGZvciB1cGRhdGluZyB0aGUgY29tcHV0YXRpb24gbWVudS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlQ29tcHV0YXRpb25NZW51IHtcclxuICAgIHR5cGU6IENvbXB1dGF0aW9uTWVudUFjdGlvblR5cGUuVVBEQVRFX0NPTVBVVEFUSU9OX01FTlU7XHJcbiAgICB5ZWFyOiBzdHJpbmc7XHJcbiAgICBhbGdvcml0aG06IEFsZ29yaXRobVR5cGU7XHJcbiAgICBmaXJzdERpdmlzb3I6IHN0cmluZztcclxuICAgIGVsZWN0aW9uVGhyZXNob2xkOiBzdHJpbmc7XHJcbiAgICBkaXN0cmljdFRocmVzaG9sZDogc3RyaW5nO1xyXG4gICAgZGlzdHJpY3RTZWF0czogc3RyaW5nO1xyXG4gICAgbGV2ZWxpbmdTZWF0czogc3RyaW5nO1xyXG4gICAgYXJlYUZhY3Rvcjogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGNyZWF0b3IgZm9yIHVwZGF0aW5nIHRoZSBjb21wdXRhdGlvbiBtZW51LlxyXG4gKlxyXG4gKiBAcGFyYW0gc2V0dGluZ3NQYXlsb2FkIC0gdGhlIGRpc3BsYXllZCBwYXJhbWV0ZXJzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQ29tcHV0YXRpb25NZW51KHNldHRpbmdzUGF5bG9hZDogQ29tcHV0YXRpb25NZW51UGF5bG9hZCkge1xyXG4gICAgY29uc3QgYWN0aW9uOiBVcGRhdGVDb21wdXRhdGlvbk1lbnUgPSB7XHJcbiAgICAgICAgdHlwZTogQ29tcHV0YXRpb25NZW51QWN0aW9uVHlwZS5VUERBVEVfQ09NUFVUQVRJT05fTUVOVSxcclxuICAgICAgICB5ZWFyOiBzZXR0aW5nc1BheWxvYWQueWVhcixcclxuICAgICAgICBhbGdvcml0aG06IHNldHRpbmdzUGF5bG9hZC5hbGdvcml0aG0sXHJcbiAgICAgICAgZmlyc3REaXZpc29yOiBzZXR0aW5nc1BheWxvYWQuZmlyc3REaXZpc29yLFxyXG4gICAgICAgIGVsZWN0aW9uVGhyZXNob2xkOiBzZXR0aW5nc1BheWxvYWQuZWxlY3Rpb25UaHJlc2hvbGQsXHJcbiAgICAgICAgZGlzdHJpY3RUaHJlc2hvbGQ6IHNldHRpbmdzUGF5bG9hZC5kaXN0cmljdFRocmVzaG9sZCxcclxuICAgICAgICBkaXN0cmljdFNlYXRzOiBzZXR0aW5nc1BheWxvYWQuZGlzdHJpY3RTZWF0cyxcclxuICAgICAgICBsZXZlbGluZ1NlYXRzOiBzZXR0aW5nc1BheWxvYWQubGV2ZWxpbmdTZWF0cyxcclxuICAgICAgICBhcmVhRmFjdG9yOiBzZXR0aW5nc1BheWxvYWQuYXJlYUZhY3RvcixcclxuICAgIH07XHJcbiAgICByZXR1cm4gYWN0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGZvciBzYXZpbmcgdGhlIGN1cnJlbnQgY29tcHV0YXRpb24gc2V0dGluZ3MuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFNhdmVTZXR0aW5ncyB7XHJcbiAgICB0eXBlOiBDb21wdXRhdGlvbk1lbnVBY3Rpb25UeXBlLlNBVkVfU0VUVElOR1M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gY3JlYXRvciBmb3Igc2F2aW5nIHRoZSBjb21wdXRhdGlvbiBzZXR0aW5ncy5cclxuICovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2F2ZVNldHRpbmdzKCkge1xyXG4gICAgY29uc3QgYWN0aW9uOiBTYXZlU2V0dGluZ3MgPSB7XHJcbiAgICAgICAgdHlwZTogQ29tcHV0YXRpb25NZW51QWN0aW9uVHlwZS5TQVZFX1NFVFRJTkdTLFxyXG4gICAgfTtcclxuICAgIHJldHVybiBhY3Rpb247XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY3Rpb24gZm9yIHJlc2V0dGluZyB0aGUgY29tcHV0YXRpb24gc2V0dGluZ3MgdG8gdGhlIHNhdmVkIHNldHRpbmdzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZXNldFNhdmVkU2V0dGluZ3Mge1xyXG4gICAgdHlwZTogQ29tcHV0YXRpb25NZW51QWN0aW9uVHlwZS5SRVNFVF9TQVZFRF9TRVRUSU5HUztcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBjcmVhdG9yIGZvciByZXNldHRpbmcgdGhlIGNvbXB1dGF0aW9uIHNldHRpbmdzIHRvIHRoZSBzYXZlZCBzZXR0aW5ncy5cclxuICovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRTYXZlZFNldHRpbmdzKCkge1xyXG4gICAgY29uc3QgYWN0aW9uOiBSZXNldFNhdmVkU2V0dGluZ3MgPSB7XHJcbiAgICAgICAgdHlwZTogQ29tcHV0YXRpb25NZW51QWN0aW9uVHlwZS5SRVNFVF9TQVZFRF9TRVRUSU5HUyxcclxuICAgIH07XHJcbiAgICByZXR1cm4gYWN0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogQWN0aW9uIGZvciB0b2dnbGluZyBhdXRvIGNvbXB1dGF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUb2dnbGVBdXRvQ29tcHV0ZSB7XHJcbiAgICB0eXBlOiBDb21wdXRhdGlvbk1lbnVBY3Rpb25UeXBlLlRPR0dMRV9BVVRPX0NPTVBVVEU7XHJcbiAgICBhdXRvQ29tcHV0ZTogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiBjcmVhdG9yIGZvciB0b2dnbGluZyBhdXRvIGNvbXB1dGF0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXV0b0NvbXB1dGUgLSB0cnVlIGZvciBjb21wdXRpbmcgYXV0b21hdGljYWxseSwgZWxzZSBmYWxzZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZUF1dG9Db21wdXRlKGF1dG9Db21wdXRlOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBhY3Rpb246IFRvZ2dsZUF1dG9Db21wdXRlID0ge1xyXG4gICAgICAgIHR5cGU6IENvbXB1dGF0aW9uTWVudUFjdGlvblR5cGUuVE9HR0xFX0FVVE9fQ09NUFVURSxcclxuICAgICAgICBhdXRvQ29tcHV0ZSxcclxuICAgIH07XHJcbiAgICByZXR1cm4gYWN0aW9uO1xyXG59XHJcbiIsImV4cG9ydCBpbnRlcmZhY2UgTm90aWZpY2F0aW9uRGF0YSB7XHJcbiAgICB0eXBlOiBOb3RpZmljYXRpb25UeXBlO1xyXG4gICAgdGV4dDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZ1bGxOb3RpZmljYXRpb25EYXRhIGV4dGVuZHMgTm90aWZpY2F0aW9uRGF0YSB7XHJcbiAgICBpZDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBOb3RpZmljYXRpb25UeXBlIHtcclxuICAgIERBTkdFUiA9IFwiREFOR0VSXCIsXHJcbiAgICBJTkZPID0gXCJJTkZPXCIsXHJcbiAgICBQUklNQVJZID0gXCJQUklNQVJZXCIsXHJcbiAgICBTVUNDRVNTID0gXCJTVUNDRVNTXCIsXHJcbiAgICBXQVJOSU5HID0gXCJXQVJOSU5HXCIsXHJcbn1cclxuIiwiaW1wb3J0IHsgQWxnb3JpdGhtVHlwZSwgTGFndWVEaG9udFJlc3VsdCB9IGZyb20gXCIuL2NvbXB1dGF0aW9uLW1vZGVsc1wiO1xyXG5pbXBvcnQgeyBWb3RlcywgTWV0cmljcywgUGFyYW1ldGVycyB9IGZyb20gXCIuLi9yZXF1ZXN0ZWQtZGF0YS9yZXF1ZXN0ZWQtZGF0YS1tb2RlbHNcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcHV0YXRpb25TdGF0ZSB7XHJcbiAgICBhbGdvcml0aG06IEFsZ29yaXRobVR5cGU7XHJcbiAgICBmaXJzdERpdmlzb3I6IG51bWJlcjtcclxuICAgIGVsZWN0aW9uVGhyZXNob2xkOiBudW1iZXI7XHJcbiAgICBkaXN0cmljdFRocmVzaG9sZDogbnVtYmVyO1xyXG4gICAgZGlzdHJpY3RTZWF0czogbnVtYmVyO1xyXG4gICAgbGV2ZWxpbmdTZWF0czogbnVtYmVyO1xyXG4gICAgYXJlYUZhY3RvcjogbnVtYmVyO1xyXG4gICAgaGlzdG9yaWNhbDogTGFndWVEaG9udFJlc3VsdDtcclxuICAgIGN1cnJlbnQ6IExhZ3VlRGhvbnRSZXN1bHQ7XHJcbiAgICBjb21wYXJpc29uOiBMYWd1ZURob250UmVzdWx0O1xyXG4gICAgdm90ZXM6IFZvdGVzW107XHJcbiAgICBtZXRyaWNzOiBNZXRyaWNzW107XHJcbiAgICBwYXJhbWV0ZXJzOiBQYXJhbWV0ZXJzO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgdW5sb2FkZWRQYXJhbWV0ZXJzOiBQYXJhbWV0ZXJzID0ge1xyXG4gICAgYWxnb3JpdGhtOiB7XHJcbiAgICAgICAgYWxnb3JpdGhtOiBBbGdvcml0aG1UeXBlLlVOREVGSU5FRCxcclxuICAgICAgICBwYXJhbWV0ZXJzOiB7fSxcclxuICAgIH0sXHJcbiAgICBhcmVhRmFjdG9yOiAtMSxcclxuICAgIGRpc3RyaWN0U2VhdHM6IC0xLFxyXG4gICAgZWxlY3Rpb25UeXBlOiBcIlVOREVGSU5FRFwiLFxyXG4gICAgZWxlY3Rpb25ZZWFyOiAtMSxcclxuICAgIGxldmVsaW5nU2VhdHM6IC0xLFxyXG4gICAgdGhyZXNob2xkOiAtMSxcclxuICAgIHRvdGFsVm90ZXM6IC0xLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHVubG9hZGVkU3RhdGU6IENvbXB1dGF0aW9uU3RhdGUgPSB7XHJcbiAgICBhbGdvcml0aG06IEFsZ29yaXRobVR5cGUuVU5ERUZJTkVELFxyXG4gICAgZmlyc3REaXZpc29yOiAtMSxcclxuICAgIGVsZWN0aW9uVGhyZXNob2xkOiAtMSxcclxuICAgIGRpc3RyaWN0VGhyZXNob2xkOiAtMSxcclxuICAgIGRpc3RyaWN0U2VhdHM6IC0xLFxyXG4gICAgbGV2ZWxpbmdTZWF0czogLTEsXHJcbiAgICBhcmVhRmFjdG9yOiAtMSxcclxuICAgIGhpc3RvcmljYWw6IHtcclxuICAgICAgICBkaXN0cmljdFJlc3VsdHM6IFtdLFxyXG4gICAgICAgIHBhcnR5UmVzdWx0czogW10sXHJcbiAgICAgICAgbGV2ZWxpbmdTZWF0RGlzdHJpYnV0aW9uOiBbXSxcclxuICAgICAgICBmaW5hbFF1b3RpZW50czogW10sXHJcbiAgICB9LFxyXG4gICAgY3VycmVudDoge1xyXG4gICAgICAgIGRpc3RyaWN0UmVzdWx0czogW10sXHJcbiAgICAgICAgcGFydHlSZXN1bHRzOiBbXSxcclxuICAgICAgICBsZXZlbGluZ1NlYXREaXN0cmlidXRpb246IFtdLFxyXG4gICAgICAgIGZpbmFsUXVvdGllbnRzOiBbXSxcclxuICAgIH0sXHJcbiAgICBjb21wYXJpc29uOiB7XHJcbiAgICAgICAgZGlzdHJpY3RSZXN1bHRzOiBbXSxcclxuICAgICAgICBwYXJ0eVJlc3VsdHM6IFtdLFxyXG4gICAgICAgIGxldmVsaW5nU2VhdERpc3RyaWJ1dGlvbjogW10sXHJcbiAgICAgICAgZmluYWxRdW90aWVudHM6IFtdLFxyXG4gICAgfSxcclxuICAgIHZvdGVzOiBbXSxcclxuICAgIG1ldHJpY3M6IFtdLFxyXG4gICAgcGFyYW1ldGVyczogdW5sb2FkZWRQYXJhbWV0ZXJzLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbXB1dGF0aW9uRGVmYXVsdHMgPSB7XHJcbiAgICBmaXJzdERpdmlzb3I6IDEuNCxcclxufTtcclxuIiwiaW1wb3J0IHsgUmF3RGljdGlvbmFyeUVudHJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kaWN0aW9uYXJ5XCI7XHJcbmltcG9ydCB7IEFsZ29yaXRobVR5cGUgfSBmcm9tIFwiLi4vY29tcHV0YXRpb25cIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVm90ZXMge1xyXG4gICAgcGFydHk6IHN0cmluZztcclxuICAgIHZvdGVzOiBudW1iZXI7XHJcbiAgICBkaXN0cmljdDogc3RyaW5nO1xyXG4gICAgZWxlY3Rpb25ZZWFyOiBudW1iZXI7XHJcbiAgICBlbGVjdGlvblR5cGU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNZXRyaWNzIHtcclxuICAgIGRpc3RyaWN0OiBzdHJpbmc7XHJcbiAgICBlbGVjdGlvblllYXI6IG51bWJlcjtcclxuICAgIGFyZWE6IG51bWJlcjtcclxuICAgIHBvcHVsYXRpb246IG51bWJlcjtcclxuICAgIHNlYXRzOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmF3QWxnb3JpdGhtIHtcclxuICAgIGlkOiBudW1iZXI7XHJcbiAgICBhbGdvcml0aG06IHN0cmluZztcclxuICAgIHBhcmFtZXRlcnM6IEFycmF5PFJhd0RpY3Rpb25hcnlFbnRyeT47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWxnb3JpdGhtIHtcclxuICAgIGFsZ29yaXRobTogQWxnb3JpdGhtVHlwZTtcclxuICAgIHBhcmFtZXRlcnM6IF8uRGljdGlvbmFyeTxudW1iZXI+O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJhd1BhcmFtZXRlcnMge1xyXG4gICAgZWxlY3Rpb25ZZWFyOiBudW1iZXI7XHJcbiAgICBlbGVjdGlvblR5cGU6IHN0cmluZztcclxuICAgIGFsZ29yaXRobTogUmF3QWxnb3JpdGhtO1xyXG4gICAgdGhyZXNob2xkOiBudW1iZXI7XHJcbiAgICBhcmVhRmFjdG9yOiBudW1iZXI7XHJcbiAgICBkaXN0cmljdFNlYXRzOiBudW1iZXI7XHJcbiAgICBsZXZlbGluZ1NlYXRzOiBudW1iZXI7XHJcbiAgICB0b3RhbFZvdGVzOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGFyYW1ldGVycyB7XHJcbiAgICBlbGVjdGlvblllYXI6IG51bWJlcjtcclxuICAgIGVsZWN0aW9uVHlwZTogc3RyaW5nO1xyXG4gICAgYWxnb3JpdGhtOiBBbGdvcml0aG07XHJcbiAgICB0aHJlc2hvbGQ6IG51bWJlcjtcclxuICAgIGFyZWFGYWN0b3I6IG51bWJlcjtcclxuICAgIGRpc3RyaWN0U2VhdHM6IG51bWJlcjtcclxuICAgIGxldmVsaW5nU2VhdHM6IG51bWJlcjtcclxuICAgIHRvdGFsVm90ZXM6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEZpcnN0RGl2aXNvciA9IFwiRmlyc3QgRGl2aXNvclwiO1xyXG4iLCIvKipcclxuICogRGV0ZXJtaW5lcyB3ZXRoZXIgb3Igbm90IGRpc3RyaWN0IHNlYXRzIHNob3VsZCBiZSBkaXN0cmlidXRlZCBmb3IgYSBnaXZlbiB5ZWFyLlxyXG4gKlxyXG4gKiBAcGFyYW0geWVhciBUaGUgeWVhciB0byBjaGVja1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZERpc3RyaWJ1dGVEaXN0cmljdFNlYXRzKHllYXI6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHllYXIgPj0gMjAwNTtcclxufVxyXG4iLCJpbXBvcnQgeyBEaXN0cmljdFJlc3VsdCwgU2VhdFBhcnR5UmVzdWx0IH0gZnJvbSBcIi4uL2NvbXB1dGF0aW9uXCI7XHJcblxyXG4vKipcclxuICogSGVscGVyIG1ldGhvZCBmb3IgU2luZ2xlRGlzdHJpY3QgdG8gZ2V0IGEgbWFwIGJldHdlZW4gcGFydHlDb2RlIGFuZCB2b3Rlc1xyXG4gKiByZXF1aXJlZCB0byB3aW4gdGhlIG1vc3QgdnVsbmVyYWJsZSBzZWF0LlxyXG4gKiBAcGFyYW0gZGlzdHJpY3RSZXN1bHRcclxuICpcclxuICogQHJldHVybnMgYSBtYXAgd2hlcmUgdGhlIGtleSBpcyBwYXJ0eUNvZGUgYW5kIHRoZSB2YWx1ZSBpcyB2b3Rlc1RvV2luU2VhdFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFZvdGVzVG9WdWxuZXJhYmxlU2VhdE1hcChkaXN0cmljdFJlc3VsdDogRGlzdHJpY3RSZXN1bHQpOiBNYXA8c3RyaW5nLCBudW1iZXI+IHtcclxuICAgIGNvbnN0IHBhcnR5Q29kZVRvVnVsbmVyYWJsZVNlYXRzTWFwOiBNYXA8c3RyaW5nLCBudW1iZXI+ID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcclxuICAgIGNvbnN0IGxhc3RTZWF0ID0gZGlzdHJpY3RSZXN1bHQuZGlzdHJpY3RTZWF0UmVzdWx0W2Rpc3RyaWN0UmVzdWx0LmRpc3RyaWN0U2VhdFJlc3VsdC5sZW5ndGggLSAxXTtcclxuICAgIGNvbnN0IHdpbm5lciA9IGxhc3RTZWF0LnBhcnR5UmVzdWx0cy5maW5kKChwcikgPT4gcHIucGFydHlDb2RlID09PSBsYXN0U2VhdC53aW5uZXIpITtcclxuICAgIGxhc3RTZWF0LnBhcnR5UmVzdWx0cy5mb3JFYWNoKChwYXJ0eVJlc3VsdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRNYXJnaW5CeVZvdGVzID0gTWF0aC5mbG9vcih3aW5uZXIucXVvdGllbnQgKiBwYXJ0eVJlc3VsdC5kZW5vbWluYXRvcikgLSBwYXJ0eVJlc3VsdC52b3RlcyArIDE7XHJcbiAgICAgICAgcGFydHlDb2RlVG9WdWxuZXJhYmxlU2VhdHNNYXAuc2V0KHBhcnR5UmVzdWx0LnBhcnR5Q29kZSwgY3VycmVudE1hcmdpbkJ5Vm90ZXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHBhcnR5Q29kZVRvVnVsbmVyYWJsZVNlYXRzTWFwO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UXVvdGllbnRzVG9WdWxuZXJhYmxlU2VhdE1hcChkaXN0cmljdFJlc3VsdDogRGlzdHJpY3RSZXN1bHQpOiBNYXA8c3RyaW5nLCBudW1iZXI+IHtcclxuICAgIGNvbnN0IHBhcnR5Q29kZVRvUXVvdGllbnRNYXAgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xyXG4gICAgY29uc3QgbGFzdFNlYXQgPSBkaXN0cmljdFJlc3VsdC5kaXN0cmljdFNlYXRSZXN1bHRbZGlzdHJpY3RSZXN1bHQuZGlzdHJpY3RTZWF0UmVzdWx0Lmxlbmd0aCAtIDFdO1xyXG4gICAgbGFzdFNlYXQucGFydHlSZXN1bHRzLmZvckVhY2goKHByKSA9PiBwYXJ0eUNvZGVUb1F1b3RpZW50TWFwLnNldChwci5wYXJ0eUNvZGUsIHByLnF1b3RpZW50KSk7XHJcbiAgICByZXR1cm4gcGFydHlDb2RlVG9RdW90aWVudE1hcDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRha2VzIGFsbCBkaXN0cmljdCByZXN1bHRzIGFuZCByZXR1cm5zIHRoZSBtb3N0IHZ1bG5lcmFibGUgZGlzdHJpY3QgYmFzZWQgb25cclxuICogcXVvdGllbnQgd2l0aCBpdHMgd2lubmVyIGFuZCBydW5uZXIgdXAsIGFuZCB2b3RlcyBuZWVkZWQgdG8gd2luLlxyXG4gKlxyXG4gKiBAcGFyYW0gZGlzdHJpY3RSZXN1bHQgcmVzdWx0IHRvIGZpbmQgdnVsbmVyYWJsZSBzZWF0IGJ5IHF1b3RpZW50IGZvclxyXG4gKlxyXG4gKiBAcmV0dXJucyB2dWxuZXJhYmxlIHNlYXQgYnkgcXVvdGllbnRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRNb3N0VnVsbmVyYWJsZVNlYXRCeVF1b3RpZW50KGRpc3RyaWN0UmVzdWx0czogRGlzdHJpY3RSZXN1bHRbXSkge1xyXG4gICAgY29uc3QgdnVsbmVyYWJsZURpc3RyaWN0U2VhdHM6IFZ1bG5lcmFibGVEaXN0cmljdFNlYXRbXSA9IFtdO1xyXG4gICAgZGlzdHJpY3RSZXN1bHRzLmZvckVhY2goKGRpc3RyaWN0UmVzdWx0KSA9PiB7XHJcbiAgICAgICAgaWYgKGRpc3RyaWN0UmVzdWx0LmRpc3RyaWN0U2VhdHMgPiAwKSB7XHJcbiAgICAgICAgICAgIHZ1bG5lcmFibGVEaXN0cmljdFNlYXRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgLi4uZ2V0VnVsbmVyYWJsZVNlYXRCeVF1b3RpZW50KGRpc3RyaWN0UmVzdWx0KSxcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0OiBkaXN0cmljdFJlc3VsdC5uYW1lLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB2dWxuZXJhYmxlRGlzdHJpY3RTZWF0cy5zb3J0KChhLCBiKSA9PiAoYS5tb3JlVm90ZXNUb1dpbiA+PSBiLm1vcmVWb3Rlc1RvV2luID8gMSA6IC0xKSlbMF07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUYWtlcyBhIGRpc3RyaWN0IHJlc3VsdCBhbmQgY29tcGFyZXMgdGhlIHdpbm5lciB0byBpdHMgcXVvdGllbnQgcnVubmVyIHVwLlxyXG4gKlxyXG4gKiBAcGFyYW0gZGlzdHJpY3RSZXN1bHQgcmVzdWx0IHRvIGZpbmQgdnVsbmVyYWJsZSBzZWF0IGJ5IHF1b3RpZW50IGZvclxyXG4gKlxyXG4gKiBAcmV0dXJucyB2dWxuZXJhYmxlIHNlYXQgYnkgcXVvdGllbnRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRWdWxuZXJhYmxlU2VhdEJ5UXVvdGllbnQoZGlzdHJpY3RSZXN1bHQ6IERpc3RyaWN0UmVzdWx0KTogVnVsbmVyYWJsZURpc3RyaWN0U2VhdCB7XHJcbiAgICBjb25zdCBsYXN0U2VhdCA9IGRpc3RyaWN0UmVzdWx0LmRpc3RyaWN0U2VhdFJlc3VsdFtkaXN0cmljdFJlc3VsdC5kaXN0cmljdFNlYXRSZXN1bHQubGVuZ3RoIC0gMV07XHJcbiAgICBjb25zdCB3aW5uZXIgPSBsYXN0U2VhdC5wYXJ0eVJlc3VsdHMuZmluZCgocHIpID0+IHByLnBhcnR5Q29kZSA9PT0gbGFzdFNlYXQud2lubmVyKSE7XHJcbiAgICBjb25zdCBsYXN0U2VhdEJ5UXVvdGllbnQgPSBsYXN0U2VhdC5wYXJ0eVJlc3VsdHMuc29ydCgoYSwgYikgPT4gKGEucXVvdGllbnQgPD0gYi5xdW90aWVudCA/IDEgOiAtMSkpO1xyXG4gICAgY29uc3QgcnVubmVyVXAgPSBsYXN0U2VhdEJ5UXVvdGllbnRbMV07XHJcbiAgICBjb25zdCBtb3JlVm90ZXNUb1dpbiA9IE1hdGguZmxvb3Iod2lubmVyLnF1b3RpZW50ICogcnVubmVyVXAuZGVub21pbmF0b3IpIC0gcnVubmVyVXAudm90ZXMgKyAxO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB3aW5uZXIsXHJcbiAgICAgICAgcnVubmVyVXAsXHJcbiAgICAgICAgbW9yZVZvdGVzVG9XaW4sXHJcbiAgICAgICAgZGlzdHJpY3Q6IGRpc3RyaWN0UmVzdWx0Lm5hbWUsXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VnVsbmVyYWJsZVNlYXRCeVZvdGVzKGRpc3RyaWN0UmVzdWx0OiBEaXN0cmljdFJlc3VsdCk6IFZ1bG5lcmFibGVWb3RlcyB7XHJcbiAgICBjb25zdCBsYXN0U2VhdCA9IGRpc3RyaWN0UmVzdWx0LmRpc3RyaWN0U2VhdFJlc3VsdFtkaXN0cmljdFJlc3VsdC5kaXN0cmljdFNlYXRSZXN1bHQubGVuZ3RoIC0gMV07XHJcbiAgICBjb25zdCB3aW5uZXIgPSBsYXN0U2VhdC5wYXJ0eVJlc3VsdHMuZmluZCgocHIpID0+IHByLnBhcnR5Q29kZSA9PT0gbGFzdFNlYXQud2lubmVyKSE7XHJcbiAgICBjb25zdCBtYXJnaW5zOiB7IHBhcnR5Q29kZTogc3RyaW5nOyBtb3JlVm90ZXNUb1dpbjogbnVtYmVyIH1bXSA9IFtdO1xyXG4gICAgbGFzdFNlYXQucGFydHlSZXN1bHRzLmZvckVhY2goKHBhcnR5UmVzdWx0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgbW9yZVZvdGVzVG9XaW4gPSBNYXRoLmZsb29yKHdpbm5lci5xdW90aWVudCAqIHBhcnR5UmVzdWx0LmRlbm9taW5hdG9yIC0gcGFydHlSZXN1bHQudm90ZXMgKyAxKTtcclxuICAgICAgICBtYXJnaW5zLnB1c2goe1xyXG4gICAgICAgICAgICBwYXJ0eUNvZGU6IHBhcnR5UmVzdWx0LnBhcnR5Q29kZSxcclxuICAgICAgICAgICAgbW9yZVZvdGVzVG9XaW4sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHNvcnRlZCA9IG1hcmdpbnMuc2xpY2UoKS5zb3J0KChhLCBiKSA9PiAoYS5tb3JlVm90ZXNUb1dpbiA+PSBiLm1vcmVWb3Rlc1RvV2luID8gMSA6IC0xKSkhO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB3aW5uZXIsXHJcbiAgICAgICAgcGFydHlDb2RlOiBzb3J0ZWRbMV0ucGFydHlDb2RlLFxyXG4gICAgICAgIG1vcmVWb3Rlc1RvV2luOiBzb3J0ZWRbMV0ubW9yZVZvdGVzVG9XaW4sXHJcbiAgICB9O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgVnVsbmVyYWJsZVNlYXQge1xyXG4gICAgd2lubmVyOiBTZWF0UGFydHlSZXN1bHQ7XHJcbiAgICBydW5uZXJVcDogU2VhdFBhcnR5UmVzdWx0O1xyXG4gICAgbW9yZVZvdGVzVG9XaW46IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBWdWxuZXJhYmxlRGlzdHJpY3RTZWF0IGV4dGVuZHMgVnVsbmVyYWJsZVNlYXQge1xyXG4gICAgZGlzdHJpY3Q6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBWdWxuZXJhYmxlVm90ZXMge1xyXG4gICAgd2lubmVyOiBTZWF0UGFydHlSZXN1bHQ7XHJcbiAgICBwYXJ0eUNvZGU6IHN0cmluZztcclxuICAgIG1vcmVWb3Rlc1RvV2luOiBudW1iZXI7XHJcbn1cclxuIiwiaW1wb3J0IHsgUm9vdFN0YXRlIH0gZnJvbSBcIi4uL3JlZHVjZXJzXCI7XHJcbmltcG9ydCB7IFZlcnNpb24gfSBmcm9tIFwiLi92ZXJzaW9uXCI7XHJcblxyXG4vKipcclxuICogTG9hZHMgdGhlIHN0YXRlIGZyb20gbG9jYWxTdG9yYWdlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyBzdGF0ZSBpZiBhbGwgZ29lcyB3ZWxsLCBlbHNlIHVuZGVmaW5lZC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBsb2FkU3RhdGUgPSAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRTdGF0ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwic3RhdGVcIik7XHJcbiAgICAgICAgaWYgKHNlcmlhbGl6ZWRTdGF0ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXRlIGxvYWRlZCBmcm9tIGxvY2FsIHN0b3JhZ2VcIik7XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc2VyaWFsaXplZFN0YXRlKSBhcyBSb290U3RhdGU7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNhdmVzIHRoZSBzdGF0ZSBnaXZlbiBhcyBwYXJhbWV0ZXIgdG8gbG9jYWxTdG9yYWdlLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RhdGUgc3RhdGUgdG8gc2F2ZSB0byBsb2NhbFN0b3JhZ2UuXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2F2ZVN0YXRlID0gKHN0YXRlOiBSb290U3RhdGUpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZFN0YXRlID0gSlNPTi5zdHJpbmdpZnkoc3RhdGUpO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwic3RhdGVcIiwgc2VyaWFsaXplZFN0YXRlKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXRlIHNhdmVkIHRvIGxvY2FsIHN0b3JhZ2VcIik7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vKipcclxuICogTG9hZHMgdGhlIHBlcnNpc3RlZCB2ZXJzaW9uIGZyb20gbG9jYWxTdG9yYWdlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyBhIFZlcnNpb24gaWYgaXQgZXhpc3RzLCBlbHNlIHVuZGVmaW5lZC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkVmVyc2lvbigpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZFZlcnNpb24gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInZlcnNpb25cIik7XHJcbiAgICAgICAgaWYgKHNlcmlhbGl6ZWRWZXJzaW9uID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc2VyaWFsaXplZFZlcnNpb24pIGFzIFZlcnNpb247XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogU2F2ZXMgdGhlIHZlcnNpb24gcmVjZWl2ZWQgYXMgcGFyYW1ldGVyIHRvIGxvY2FsU3RvcmFnZS5cclxuICpcclxuICogQHBhcmFtIHZlcnNpb24gdmVyc2lvbiB0byBzYXZlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2F2ZVZlcnNpb24odmVyc2lvbjogVmVyc2lvbikge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBzZXJpYWxpemVkVmVyc2lvbiA9IEpTT04uc3RyaW5naWZ5KHZlcnNpb24pO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidmVyc2lvblwiLCBzZXJpYWxpemVkVmVyc2lvbik7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgY29weURpY3Rpb25hcnkgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2RpY3Rpb25hcnlcIjtcclxuaW1wb3J0IHsgUXVvdGllbnREaWN0aW9uYXJ5IH0gZnJvbSBcIi4vcXVvdGllbnQtZGljdGlvbmFyeVwiO1xyXG5pbXBvcnQgeyBTb3J0ZWRSZXZlcnNlRGljdCB9IGZyb20gXCIuL3NvcnRlZC1yZXZlcnNlLWRpY3RcIjtcclxuaW1wb3J0IHsgYnJlYWtUaWVzIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgRGlzdHJpYnV0aW9uUmVzdWx0IH0gZnJvbSBcIi4uL2NvbXB1dGF0aW9uLW1vZGVsc1wiO1xyXG5cclxuLyoqXHJcbiAqIEEgZ2VuZXJhbCBmdW5jdGlvbiBmb3IgZGlzdHJpYnV0aW5nIGEgbnVtYmVyIG9mIGl0ZW1zIG9uIGEgbnVtYmVyIG9mIG5hbWVzIGJhc2VkIG9uIHVwZGF0ZWQgcXVvdGllbnRzLlxyXG4gKlxyXG4gKiBFYWNoIHRpbWUgYSBuYW1lIHdpbnMgYW4gaXRlbSwgdGhlaXIgY291bnQgb2YgaXRlbXMgd29uIGlzIHVwZGF0ZWQuXHJcbiAqIFN1YnNlcXVlbnRseSB0aGUgZGVub21pbmF0b3IgdXNlZCB0byBjYWxjdWxhdGUgdGhlaXIgcXVvdGllbnQgaXMgdXBkYXRlZCB0byByZWZsZWN0IHRoZWlyIHdpbiBvbiB3aGV0aGVyIG9yIG5vdCB0aGV5IHdpbGwgd2luIGZvbGxvd2luZyBpdGVtcy5cclxuICpcclxuICogQHBhcmFtIG51bWJlclRvRGlzdHJpYnV0ZSBOdW1iZXIgb2YgaXRlbXMgdG8gZGlzdHJpYnV0ZVxyXG4gKiBAcGFyYW0gZGlzdHJpYnV0ZU9uIEEgZGljdGlvbmFyeSBvZiBuYW1lcyB0byBkaXN0cmlidXRlIG9uLCBpZiB0aGVyZSBpcyBhbHJlYWR5IGEgcGFydGlhbCBkaXN0cmlidXRpb24gdGhlIHZhbHVlcyBpbiB0aGlzIGRpY3Rpb25hcnkgd2lsbCBiZSB1c2VkIGFzIGEgc3RhcnRpbmcgcG9pbnQgZm9yIGhvdyBtYW55IGl0ZW1zIHRoZXkgaGF2ZSBhbHJlYWR5IHJlY2VpdmVkXHJcbiAqIEBwYXJhbSBiYXNlVmFsdWUgVGhlIHZhbHVlIHVzZWQgYXMgdGhlIG51bWVyYXRvciBmb3IgZWFjaCBuYW1lXHJcbiAqIEBwYXJhbSBkZW5vbWluYXRvckZ1bmN0aW9uIFRoZSBmdW5jdGlvbiB1c2VkIHRvIHNlbGVjdCB0aGUgZGVub21pbmF0b3IgdG8gYmUgdXNlZCBkZXBlbmRpbmcgb24gaG93IG1hbnkgaXRlbXMgZWFjaCBuYW1lIGhhcyB3b25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkaXN0cmlidXRpb25CeVF1b3RpZW50KFxyXG4gICAgbnVtYmVyVG9EaXN0cmlidXRlOiBudW1iZXIsXHJcbiAgICBkaXN0cmlidXRlT246IF8uRGljdGlvbmFyeTxudW1iZXI+LFxyXG4gICAgYmFzZVZhbHVlOiBfLkRpY3Rpb25hcnk8bnVtYmVyPixcclxuICAgIGRlbm9taW5hdG9yRnVuY3Rpb246ICh0aW1lc1dvbjogbnVtYmVyKSA9PiBudW1iZXJcclxuKTogXy5EaWN0aW9uYXJ5PG51bWJlcj4ge1xyXG4gICAgY29uc3QgdXBkYXRlZERpc3RyaWJ1dGlvbiA9IGNvcHlEaWN0aW9uYXJ5KGRpc3RyaWJ1dGVPbik7XHJcbiAgICBjb25zdCBxdW90aWVudERpY3Rpb25hcnkgPSBuZXcgUXVvdGllbnREaWN0aW9uYXJ5KGRlbm9taW5hdG9yRnVuY3Rpb24pO1xyXG4gICAgcXVvdGllbnREaWN0aW9uYXJ5LnBvcHVsYXRlUXVvdGllbnRzKHVwZGF0ZWREaXN0cmlidXRpb24sIGJhc2VWYWx1ZSk7XHJcblxyXG4gICAgLy8gQmVnaW4gZHJhd2luZyB3aW5uZXJzXHJcbiAgICBmb3IgKGxldCBkaXN0cmlidXRpb25JbmRleCA9IDA7IGRpc3RyaWJ1dGlvbkluZGV4IDwgbnVtYmVyVG9EaXN0cmlidXRlOyBkaXN0cmlidXRpb25JbmRleCsrKSB7XHJcbiAgICAgICAgY29uc3Qgd2lubmVyID0gcXVvdGllbnREaWN0aW9uYXJ5LmdldFdpbm5lcihiYXNlVmFsdWUpO1xyXG4gICAgICAgIHVwZGF0ZWREaXN0cmlidXRpb25bd2lubmVyLmtleV0rKztcclxuXHJcbiAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBxdW90aWVudFxyXG4gICAgICAgIHF1b3RpZW50RGljdGlvbmFyeS5pbnNlcnRQYXJ0eSh3aW5uZXIua2V5LCBiYXNlVmFsdWVbd2lubmVyLmtleV0sIHVwZGF0ZWREaXN0cmlidXRpb25bd2lubmVyLmtleV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cGRhdGVkRGlzdHJpYnV0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogRGVub21pbmF0b3IgZnVuY3Rpb24gZm9yIFNhaW50ZSBMYWd1ZXNcclxuICogQHBhcmFtIG51bWJlck9mU2VhdHNBc3NpZ25lZCBUaGUgbnVtYmVyIG9mIHNlYXRzIHRoZSBwYXJ0eSBvciBkaXN0cmljdCBoYXMgd29uXHJcbiAqIEBwYXJhbSBmaXJzdERpdmlzb3IgVGhlIGZpcnN0IGRpdmlzb3IgdG8gYmUgdXNlZCBpZiB0aGUgcGFydHkgb3IgZGlzdHJpY3QgaGFzIG5vdCB3b24gYW55IHNlYXRzIHlldFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNhaW50ZUxhZ3VlcyhudW1iZXJPZlNlYXRzQXNzaWduZWQ6IG51bWJlciwgZmlyc3REaXZpc29yOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKG51bWJlck9mU2VhdHNBc3NpZ25lZCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmaXJzdERpdmlzb3I7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAyICogbnVtYmVyT2ZTZWF0c0Fzc2lnbmVkICsgMTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIERlbm9taW5hdG9yIGZ1bmN0aW9uIGZvciBkJ0hvbmR0XHJcbiAqIEBwYXJhbSBudW1iZXJPZlNlYXRzQXNzaWduZWQgVGhlIG51bWJlciBvZiBzZWF0cyB0aGUgcGFydHkgb3IgZGlzdHJpY3QgaGFzIHdvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRIb25kdChudW1iZXJPZlNlYXRzQXNzaWduZWQ6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gbnVtYmVyT2ZTZWF0c0Fzc2lnbmVkICsgMTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgZ2VuZXJhbCBmdW5jdGlvbiBmb3IgZGlzdHJpYnV0aW5nIGEgbnVtYmVyIG9mIGl0ZW1zIG9uIGEgbnVtYmVyIG9mIG5hbWVzIGJhc2VkIG9uIGZyYWN0aW9ucy5cclxuICpcclxuICogRGlzdHJpYnV0ZXMgYnkgZmlyc3QgZ2l2aW5nIHNlYXRzIHRvIGFsbCBwYXJ0aWVzIHRoYXQgZWFybmVkIGZ1bGwgc2VhdHMsIGFuZCB0aGVuXHJcbiAqIGdpdmVzIHRoZSByZW1haW5pbmcgc2VhdHMgdG8gdGhlIHBhcnRpZXMgd2l0aCB0aGUgaGlnaGVzdCByZW1haW5pbmcgZnJhY3Rpb24uXHJcbiAqXHJcbiAqIE5vdGU6IHRoZSBEaXN0cmlidXRpb25SZXN1bHRzLnNlYXRSZXN1bHRzIGFyZSBlbXB0eSwgYXMgdGhlcmUgYXJlIG5vIHJvdW5kcyBvZiBkaXN0cmlidXRpb24uXHJcbiAqXHJcbiAqXHJcbiAqIEBwYXJhbSBudW1iZXJUb0Rpc3RyaWJ1dGUgTnVtYmVyIG9mIGl0ZW1zIHRvIGRpc3RyaWJ1dGVcclxuICogQHBhcmFtIHBhcnR5Vm90ZXMgVGhlIG51bWJlciBvZiB2b3RlcyBlYWNoIHBhcnR5IHJlY2VpdmVkXHJcbiAqIEBwYXJhbSBlbGVjdGlvbk51bWJlciBUaGUgbnVtYmVyIG9mIHZvdGVzIG5lY2Vzc2FyeSB0byB3aW4gMSBzZWF0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbGFyZ2VzdEZyYWN0aW9uKFxyXG4gICAgbnVtYmVyVG9EaXN0cmlidXRlOiBudW1iZXIsXHJcbiAgICBwYXJ0eVZvdGVzOiBfLkRpY3Rpb25hcnk8bnVtYmVyPixcclxuICAgIGVsZWN0aW9uTnVtYmVyOiBudW1iZXJcclxuKTogRGlzdHJpYnV0aW9uUmVzdWx0IHtcclxuICAgIGNvbnN0IHsgcmF0ZWRQYXJ0aWVzLCBzZWF0c1dvbiwgc2VhdHNEaXN0cmlidXRlZCB9ID0gZGlzdHJpYnV0ZVdob2xlU2VhdHMocGFydHlWb3RlcywgZWxlY3Rpb25OdW1iZXIpO1xyXG4gICAgY29uc3QgcmVtYWluaW5nU2VhdHMgPSBudW1iZXJUb0Rpc3RyaWJ1dGUgLSBzZWF0c0Rpc3RyaWJ1dGVkO1xyXG5cclxuICAgIGZvciAobGV0IHNlYXRTdXJwbHVzID0gMDsgc2VhdFN1cnBsdXMgPCByZW1haW5pbmdTZWF0czsgc2VhdFN1cnBsdXMrKykge1xyXG4gICAgICAgIGNvbnN0IHdpbm5lciA9IGJyZWFrVGllcyhyYXRlZFBhcnRpZXMucG9wVG9wKCksIHBhcnR5Vm90ZXMpO1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRTZWF0cyA9IHNlYXRzV29uW3dpbm5lci5rZXldID8gc2VhdHNXb25bd2lubmVyLmtleV0gKyAxIDogMTtcclxuICAgICAgICBzZWF0c1dvblt3aW5uZXIua2V5XSA9IHVwZGF0ZWRTZWF0cztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNlYXRSZXN1bHRzOiBbXSxcclxuICAgICAgICBzZWF0c1dvbixcclxuICAgIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRpc3RyaWJ1dGVXaG9sZVNlYXRzKFxyXG4gICAgcGFydHlWb3RlczogXy5EaWN0aW9uYXJ5PG51bWJlcj4sXHJcbiAgICBlbGVjdGlvbk51bWJlcjogbnVtYmVyXHJcbik6IHsgcmF0ZWRQYXJ0aWVzOiBTb3J0ZWRSZXZlcnNlRGljdDsgc2VhdHNXb246IF8uRGljdGlvbmFyeTxudW1iZXI+OyBzZWF0c0Rpc3RyaWJ1dGVkOiBudW1iZXIgfSB7XHJcbiAgICBjb25zdCByYXRlZFBhcnRpZXMgPSBuZXcgU29ydGVkUmV2ZXJzZURpY3QoKTtcclxuICAgIGNvbnN0IHNlYXRzV29uOiBfLkRpY3Rpb25hcnk8bnVtYmVyPiA9IHt9O1xyXG4gICAgbGV0IHNlYXRzRGlzdHJpYnV0ZWQgPSAwO1xyXG4gICAgZm9yIChjb25zdCBwYXJ0eUNvZGUgaW4gcGFydHlWb3Rlcykge1xyXG4gICAgICAgIGlmIChwYXJ0eVZvdGVzLmhhc093blByb3BlcnR5KHBhcnR5Q29kZSkpIHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudFBhcnR5Vm90ZXMgPSBwYXJ0eVZvdGVzW3BhcnR5Q29kZV07XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3RyaWJ1dGlvblZhbHVlID0gY3VycmVudFBhcnR5Vm90ZXMgLyBlbGVjdGlvbk51bWJlcjtcclxuICAgICAgICAgICAgY29uc3QgcGFydHlTZWF0cyA9IE1hdGguZmxvb3IoZGlzdHJpYnV0aW9uVmFsdWUpO1xyXG4gICAgICAgICAgICBjb25zdCByZW1haW5kZXIgPSBkaXN0cmlidXRpb25WYWx1ZSAtIHBhcnR5U2VhdHM7XHJcblxyXG4gICAgICAgICAgICBzZWF0c1dvbltwYXJ0eUNvZGVdID0gcGFydHlTZWF0cztcclxuICAgICAgICAgICAgc2VhdHNEaXN0cmlidXRlZCArPSBwYXJ0eVNlYXRzO1xyXG4gICAgICAgICAgICByYXRlZFBhcnRpZXMuaW5zZXJ0KHsga2V5OiBwYXJ0eUNvZGUsIHZhbHVlOiByZW1haW5kZXIgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7IHJhdGVkUGFydGllcywgc2VhdHNXb24sIHNlYXRzRGlzdHJpYnV0ZWQgfTtcclxufVxyXG4iLCIvKipcclxuICogRGVsYXkgdGhhdCBpcyBtdWx0aXBsaWVkIGJ5IGF0dGVtcHQgbnVtYmVyLlxyXG4gKiBSYXRpb25hbGU6IDEqNCArIDIqNCArIDMqNCArIDQqNCArIDUqNCA9IDYwXHJcbiAqIHdoaWNoIGlzIGVxdWFsIHRvIHRoZSB0aW1lb3V0IGR1cmF0aW9uXHJcbiAqL1xyXG5jb25zdCBpdGVyYXRpdmVEZWxheSA9IDQwMDA7XHJcbmNvbnN0IG1heE51bWJlck9mQXR0ZW1wdHMgPSA1O1xyXG5cclxuZnVuY3Rpb24gaXNTdWNjZXNzZnVsKHJlc3BvbnNlQ29kZTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gcmVzcG9uc2VDb2RlID49IDIwMCAmJiByZXNwb25zZUNvZGUgPCAzMDA7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVxdWVzdFJlc3VsdDxUPiB7XHJcbiAgICBodHRwU3RhdHVzPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgZGF0YTogUHJvbWlzZTxUPiB8IFQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBdHRlbXB0cyB0byBwYXJzZSB0aGUgSFRUUCByZXNwb25zZSBmb3IgaG93IGxvbmdcclxuICogdG8gZGVsYXkgdGhlIG5leHQgZmV0Y2ggaW4gbWlsbGlzZWNvbmRzLlxyXG4gKlxyXG4gKiBJZiB1bmFibGUgdG8gZmluZCBhIHRpbWUsIGl0IHJldHVybnMgdGhlIGRlZmF1bHQgZGVsYXkgcHJvdmlkZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSByZXNwb25zZSBIVFRQIHJlc3BvbnNlIHRvIHBhcnNlXHJcbiAqIEBwYXJhbSBkZWZhdWx0RGVsYXkgRGVmYXVsdCB0aW1lIHRvIHdhaXQgKGluIG1zKVxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VSZXRyeUhlYWRlclRvTXMocmVzcG9uc2U6IFJlc3BvbnNlLCBkZWZhdWx0RGVsYXk6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBjb25zdCByZXRyeUhlYWRlciA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwicmV0cnktYWZ0ZXJcIik7XHJcblxyXG4gICAgaWYgKHJldHJ5SGVhZGVyID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREZWxheTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBudW1TZWNvbmRzID0gTnVtYmVyKHJldHJ5SGVhZGVyKTtcclxuICAgIGlmIChOdW1iZXIuaXNGaW5pdGUobnVtU2Vjb25kcykpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgbnVtU2Vjb25kcyAqIDEwMDApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJldHJ5RGF0ZSA9IERhdGUucGFyc2UocmV0cnlIZWFkZXIpO1xyXG4gICAgaWYgKE51bWJlci5pc05hTihyZXRyeURhdGUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREZWxheTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB3YWl0VGltZSA9IHJldHJ5RGF0ZSAtIERhdGUubm93KCk7XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgd2FpdFRpbWUpO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBhdHRlbXB0UmVxdWVzdDxUPih1cmk6IHN0cmluZywgYXR0ZW1wdE51bWJlcjogbnVtYmVyKTogUHJvbWlzZTxUPiB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVyaSkuY2F0Y2goKHJlYXNvbjogRXJyb3IpID0+IHJlYXNvbi5tZXNzYWdlKTtcclxuXHJcbiAgICBpZiAodHlwZW9mIHJlc3BvbnNlICE9PSBcInN0cmluZ1wiICYmIGlzU3VjY2Vzc2Z1bChyZXNwb25zZS5zdGF0dXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKSBhcyBQcm9taXNlPFQ+O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhdHRlbXB0TnVtYmVyID4gbWF4TnVtYmVyT2ZBdHRlbXB0cykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmVzcG9uc2UgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgcmVzcG9uc2UgIT09IFwic3RyaW5nXCIgJiYgcmVzcG9uc2Uuc3RhdHVzID09PSA0MjkpIHtcclxuICAgICAgICBjb25zdCBkZWxheSA9IHBhcnNlUmV0cnlIZWFkZXJUb01zKHJlc3BvbnNlLCAxMDAwMCk7XHJcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZGVsYXkpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgYXR0ZW1wdE51bWJlciAqIGl0ZXJhdGl2ZURlbGF5KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGF0dGVtcHRSZXF1ZXN0KHVyaSwgKythdHRlbXB0TnVtYmVyKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEF0dGVtcHRzIHRvIHJlcXVlc3QgYSBzZXQgb2YgaW5mb3JtYXRpb24gZnJvbSB0aGUgVVJJIHNwZWNpZmllZC5cclxuICpcclxuICogQHBhcmFtIHVyaSBUaGUgdXJpIHRvIGF0dGVtcHQgdG8gcmVxdWVzdCBkYXRhIGZyb21cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1ZXN0PFQ+KHVyaTogc3RyaW5nKTogUHJvbWlzZTxUPiB7XHJcbiAgICByZXR1cm4gYXR0ZW1wdFJlcXVlc3QodXJpLCAxKTtcclxufVxyXG4iLCJpbXBvcnQgeyBWb3RlcywgTWV0cmljcywgUGFyYW1ldGVycyB9IGZyb20gXCIuL3JlcXVlc3RlZC1kYXRhLW1vZGVsc1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0ZWREYXRhU3RhdGUge1xyXG4gICAgZGF0YUxvYWRlZDogYm9vbGVhbjtcclxuICAgIGVuYWJsZUF1dG9TYXZlOiBib29sZWFuO1xyXG4gICAgdm90ZXM6IFZvdGVzW107XHJcbiAgICBtZXRyaWNzOiBNZXRyaWNzW107XHJcbiAgICBwYXJhbWV0ZXJzOiBQYXJhbWV0ZXJzW107XHJcbiAgICBwYXJ0eU1hcDogXy5EaWN0aW9uYXJ5PHN0cmluZz47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB1bmxvYWRlZFN0YXRlOiBSZXF1ZXN0ZWREYXRhU3RhdGUgPSB7XHJcbiAgICBkYXRhTG9hZGVkOiBmYWxzZSxcclxuICAgIGVuYWJsZUF1dG9TYXZlOiBmYWxzZSxcclxuICAgIHZvdGVzOiBbXSxcclxuICAgIG1ldHJpY3M6IFtdLFxyXG4gICAgcGFyYW1ldGVyczogW10sXHJcbiAgICBwYXJ0eU1hcDoge30sXHJcbn07XHJcbiIsImltcG9ydCB7IENvbXB1dGF0aW9uTWVudUNvbXBhcmlzb24gfSBmcm9tIFwiLi9jb21wdXRhdGlvbi1tZW51LW1vZGVsc1wiO1xyXG5pbXBvcnQgeyBBbGdvcml0aG1UeXBlIH0gZnJvbSBcIi4uLy4uL2NvbXB1dGF0aW9uXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXB1dGF0aW9uTWVudVN0YXRlIHtcclxuICAgIGVsZWN0aW9uWWVhcnM6IHN0cmluZ1tdO1xyXG4gICAgeWVhcjogc3RyaW5nO1xyXG4gICAgYWxnb3JpdGhtOiBBbGdvcml0aG1UeXBlO1xyXG4gICAgZmlyc3REaXZpc29yOiBzdHJpbmc7XHJcbiAgICBlbGVjdGlvblRocmVzaG9sZDogc3RyaW5nO1xyXG4gICAgZGlzdHJpY3RUaHJlc2hvbGQ6IHN0cmluZztcclxuICAgIGRpc3RyaWN0U2VhdHM6IHN0cmluZztcclxuICAgIGxldmVsaW5nU2VhdHM6IHN0cmluZztcclxuICAgIGF1dG9Db21wdXRlOiBib29sZWFuO1xyXG4gICAgYXJlYUZhY3Rvcjogc3RyaW5nO1xyXG4gICAgY29tcGFyaXNvbjogQ29tcHV0YXRpb25NZW51Q29tcGFyaXNvbjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHVubG9hZGVkU3RhdGU6IENvbXB1dGF0aW9uTWVudVN0YXRlID0ge1xyXG4gICAgZWxlY3Rpb25ZZWFyczogW10sXHJcbiAgICB5ZWFyOiBcIlwiLFxyXG4gICAgYWxnb3JpdGhtOiBBbGdvcml0aG1UeXBlLlVOREVGSU5FRCxcclxuICAgIGZpcnN0RGl2aXNvcjogXCJcIixcclxuICAgIGVsZWN0aW9uVGhyZXNob2xkOiBcIlwiLFxyXG4gICAgZGlzdHJpY3RUaHJlc2hvbGQ6IFwiXCIsXHJcbiAgICBkaXN0cmljdFNlYXRzOiBcIlwiLFxyXG4gICAgbGV2ZWxpbmdTZWF0czogXCJcIixcclxuICAgIGF1dG9Db21wdXRlOiB0cnVlLFxyXG4gICAgYXJlYUZhY3RvcjogXCJcIixcclxuICAgIGNvbXBhcmlzb246IHtcclxuICAgICAgICBhbGdvcml0aG06IEFsZ29yaXRobVR5cGUuVU5ERUZJTkVELFxyXG4gICAgICAgIGFyZWFGYWN0b3I6IFwiXCIsXHJcbiAgICAgICAgZGlzdHJpY3RTZWF0czogXCJcIixcclxuICAgICAgICBlbGVjdGlvblRocmVzaG9sZDogXCJcIixcclxuICAgICAgICBkaXN0cmljdFRocmVzaG9sZDogXCJcIixcclxuICAgICAgICBmaXJzdERpdmlzb3I6IFwiXCIsXHJcbiAgICAgICAgbGV2ZWxpbmdTZWF0czogXCJcIixcclxuICAgIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IFByZXNlbnRhdGlvblR5cGUsIERpc3Byb3BvcnRpb25hbGl0eUluZGV4IH0gZnJvbSBcIi4uL1ByZXNlbnRhdGlvbi9wcmVzZW50YXRpb24tbW9kZWxzXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFByZXNlbnRhdGlvbk1lbnVTdGF0ZSB7XHJcbiAgICBzaG93Q29tcGFyaXNvbjogYm9vbGVhbjtcclxuICAgIHNob3dGaWx0ZXJzOiBib29sZWFuO1xyXG4gICAgbWVyZ2VEaXN0cmljdHM6IGJvb2xlYW47XHJcbiAgICB1c2UyMDIxRGlzdHJpYnV0aW9uOiBib29sZWFuO1xyXG4gICAgY3VycmVudFByZXNlbnRhdGlvbjogUHJlc2VudGF0aW9uVHlwZTtcclxuICAgIGRpc3RyaWN0U2VsZWN0ZWQ6IHN0cmluZztcclxuICAgIGRlY2ltYWxzOiBzdHJpbmc7XHJcbiAgICBkZWNpbWFsc051bWJlcjogbnVtYmVyO1xyXG4gICAgc2hvd1BhcnRpZXNXaXRob3V0U2VhdHM6IGJvb2xlYW47XHJcbiAgICBkaXNwcm9wb3J0aW9uYWxpdHlJbmRleDogRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXg7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB1bmxvYWRlZFN0YXRlOiBQcmVzZW50YXRpb25NZW51U3RhdGUgPSB7XHJcbiAgICBzaG93Q29tcGFyaXNvbjogZmFsc2UsXHJcbiAgICBzaG93RmlsdGVyczogZmFsc2UsXHJcbiAgICBtZXJnZURpc3RyaWN0czogZmFsc2UsXHJcbiAgICB1c2UyMDIxRGlzdHJpYnV0aW9uOiBmYWxzZSxcclxuICAgIGN1cnJlbnRQcmVzZW50YXRpb246IFByZXNlbnRhdGlvblR5cGUuRWxlY3Rpb25UYWJsZSxcclxuICAgIGRlY2ltYWxzOiBcIjJcIixcclxuICAgIGRlY2ltYWxzTnVtYmVyOiAyLFxyXG4gICAgc2hvd1BhcnRpZXNXaXRob3V0U2VhdHM6IHRydWUsXHJcbiAgICBkaXN0cmljdFNlbGVjdGVkOiBcIsOYc3Rmb2xkXCIsXHJcbiAgICBkaXNwcm9wb3J0aW9uYWxpdHlJbmRleDogRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXguTE9PU0VNT1JFX0hBTkJZLFxyXG59O1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgU21hcnROdW1lcmljSW5wdXQsIFNtYXJ0TnVtZXJpY0lucHV0V2l0aExhYmVsLCBUb29sdGlwSW5mbywgVG9vbHRpcEluZm9SaWdodCB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcclxuaW1wb3J0IHsgVm90ZXMsIE1ldHJpY3MsIFBhcmFtZXRlcnMsIEZpcnN0RGl2aXNvciB9IGZyb20gXCIuLi8uLi9yZXF1ZXN0ZWQtZGF0YS9yZXF1ZXN0ZWQtZGF0YS1tb2RlbHNcIjtcclxuaW1wb3J0IHsgQ29tcHV0YXRpb25QYXlsb2FkLCBBbGdvcml0aG1UeXBlLCB1bmxvYWRlZFBhcmFtZXRlcnMgfSBmcm9tIFwiLi4vLi4vY29tcHV0YXRpb25cIjtcclxuaW1wb3J0IHsgQ29tcHV0YXRpb25NZW51UGF5bG9hZCB9IGZyb20gXCIuL2NvbXB1dGF0aW9uLW1lbnUtbW9kZWxzXCI7XHJcbmltcG9ydCB7IFllYXJTZWxlY3QgfSBmcm9tIFwiLi9ZZWFyU2VsZWN0XCI7XHJcbmltcG9ydCB7IEFsZ29yaXRobVNlbGVjdCB9IGZyb20gXCIuL0FsZ29yaXRobVNlbGVjdFwiO1xyXG5pbXBvcnQgeyBBdXRvQ29tcHV0ZUNoZWNrYm94IH0gZnJvbSBcIi4vQXV0b0NvbXB1dGVDaGVja2JveFwiO1xyXG5pbXBvcnQgeyBSZXNldEJ1dHRvbiB9IGZyb20gXCIuL1Jlc2V0QnV0dG9uXCI7XHJcbmltcG9ydCB7IENvbXBhcmlzb25PcHRpb25zIH0gZnJvbSBcIi4vQ29tcGFyaXNvbk9wdGlvbnNcIjtcclxuaW1wb3J0IHsgQ29tcHV0ZU1hbnVhbGx5QnV0dG9uIH0gZnJvbSBcIi4vQ29tcHV0ZU1hbnVhbGx5QnV0dG9uXCI7XHJcbmltcG9ydCB7IGRpc3RyaWN0TWFwLCBtZXJnZVZvdGVEaXN0cmljdHMsIG1lcmdlTWV0cmljRGlzdHJpY3RzIH0gZnJvbSBcIi4uLy4uL2NvbXB1dGF0aW9uL2xvZ2ljL2Rpc3RyaWN0LW1lcmdpbmdcIjtcclxuaW1wb3J0IHsgc2hvdWxkRGlzdHJpYnV0ZURpc3RyaWN0U2VhdHMgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2NvbmRpdGlvbmFsc1wiO1xyXG5pbXBvcnQgeyBpc0xhcmdlc3RGcmFjdGlvbkFsZ29yaXRobSB9IGZyb20gXCIuLi8uLi9jb21wdXRhdGlvbi9sb2dpY1wiO1xyXG5cclxuY29uc3QgV0lLSVVSTCA9IHByb2Nlc3MuZW52LldJS0k7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXB1dGF0aW9uTWVudVByb3BzIHtcclxuICAgIHZvdGVzOiBWb3Rlc1tdO1xyXG4gICAgbWV0cmljczogTWV0cmljc1tdO1xyXG4gICAgcGFyYW1ldGVyczogUGFyYW1ldGVyc1tdO1xyXG4gICAgc2V0dGluZ3NQYXlsb2FkOiBDb21wdXRhdGlvbk1lbnVQYXlsb2FkO1xyXG4gICAgY29tcHV0YXRpb25QYXlsb2FkOiBDb21wdXRhdGlvblBheWxvYWQ7XHJcbiAgICB1cGRhdGVDYWxjdWxhdGlvbjogKGNvbXB1dGF0aW9uUGF5bG9hZDogQ29tcHV0YXRpb25QYXlsb2FkLCBhdXRvQ29tcHV0ZTogYm9vbGVhbiwgZm9yY2VDb21wdXRlOiBib29sZWFuKSA9PiBhbnk7XHJcbiAgICB1cGRhdGVTZXR0aW5nczogKHNldHRpbmdzUGF5bG9hZDogQ29tcHV0YXRpb25NZW51UGF5bG9hZCkgPT4gYW55O1xyXG4gICAgdG9nZ2xlQXV0b0NvbXB1dGU6IChhdXRvQ29tcHV0ZTogYm9vbGVhbikgPT4gYW55O1xyXG4gICAgcmVzZXRUb0hpc3RvcmljYWxTZXR0aW5nczogKFxyXG4gICAgICAgIHNldHRpbmdzUGF5bG9hZDogQ29tcHV0YXRpb25NZW51UGF5bG9hZCxcclxuICAgICAgICB2b3RlczogVm90ZXNbXSxcclxuICAgICAgICBtZXRyaWNzOiBNZXRyaWNzW10sXHJcbiAgICAgICAgcGFyYW1ldGVyczogUGFyYW1ldGVycyxcclxuICAgICAgICBwYXJ0eU1hcDogXy5EaWN0aW9uYXJ5PHN0cmluZz5cclxuICAgICkgPT4gYW55O1xyXG4gICAgcmVzZXRIaXN0b3JpY2FsOiAoXHJcbiAgICAgICAgdm90ZXM6IFZvdGVzW10sXHJcbiAgICAgICAgbWV0cmljczogTWV0cmljc1tdLFxyXG4gICAgICAgIHBhcmFtZXRlcnM6IFBhcmFtZXRlcnMsXHJcbiAgICAgICAgcGFydHlNYXA6IF8uRGljdGlvbmFyeTxzdHJpbmc+XHJcbiAgICApID0+IHZvaWQ7XHJcbiAgICByZXNldENvbXBhcmlzb246ICgpID0+IHZvaWQ7XHJcbiAgICBzYXZlQ29tcGFyaXNvbjogKCkgPT4gdm9pZDtcclxuICAgIHNob3dDb21wYXJpc29uOiBib29sZWFuO1xyXG4gICAgbWVyZ2VEaXN0cmljdHM6IGJvb2xlYW47XHJcbiAgICB1c2UyMDIxRGlzdHJpYnV0aW9uOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tcHV0YXRpb25NZW51IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PENvbXB1dGF0aW9uTWVudVByb3BzLCB7fT4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGZpcnN0IGRpdmlzb3IgU21hcnROdW1lcmljSW5wdXRcclxuICAgICAqIHNob3VsZCBiZSB2aXNpYmxlLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgaXQgc2hvdWxkIGJlIGhpZGRlbiwgZmFsc2UgaWYgaXQgc2hvdWxkIG5vdFxyXG4gICAgICovXHJcbiAgICBzaG91bGRIaWRlRmlyc3REaXZpc29yKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuY29tcHV0YXRpb25QYXlsb2FkLmFsZ29yaXRobSA9PT0gQWxnb3JpdGhtVHlwZS5EX0hPTkRUIHx8XHJcbiAgICAgICAgICAgIGlzTGFyZ2VzdEZyYWN0aW9uQWxnb3JpdGhtKHRoaXMucHJvcHMuY29tcHV0YXRpb25QYXlsb2FkLmFsZ29yaXRobSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgY2FsY3VsYXRpb24gYW5kIHNldHRpbmdzIG9uIHVzZXJcclxuICAgICAqIGludGVyYWN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBldmVudCBhIENoYW5nZUV2ZW50IHdob3NlIHRhcmdldCBjYXJyaWVzIHRoZSBzdHJpbmdpZmllZCB5ZWFyXHJcbiAgICAgKi9cclxuICAgIG9uWWVhckNoYW5nZSA9IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTFNlbGVjdEVsZW1lbnQ+KSA9PiB7XHJcbiAgICAgICAgY29uc3QgbmV4dFllYXIgPSBwYXJzZUludChldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgICAgIGxldCB2b3RlcyA9IHRoaXMucHJvcHMudm90ZXMuZmlsdGVyKCh2b3RlKSA9PiB2b3RlLmVsZWN0aW9uWWVhciA9PT0gbmV4dFllYXIpO1xyXG4gICAgICAgIGNvbnN0IGRpc3RyaWJ1dGlvblllYXIgPSB0aGlzLnByb3BzLnVzZTIwMjFEaXN0cmlidXRpb24gJiYgbmV4dFllYXIgPj0gMjAwNSA/IDIwMjEgOiBuZXh0WWVhcjtcclxuICAgICAgICBsZXQgbWV0cmljcyA9IHRoaXMucHJvcHMubWV0cmljcy5maWx0ZXIoKG1ldHJpYykgPT4gbWV0cmljLmVsZWN0aW9uWWVhciA9PT0gZGlzdHJpYnV0aW9uWWVhcik7XHJcbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMucGFyYW1ldGVycy5maW5kKChwYXJhbWV0ZXIpID0+IHBhcmFtZXRlci5lbGVjdGlvblllYXIgPT09IG5leHRZZWFyKSB8fCB1bmxvYWRlZFBhcmFtZXRlcnM7XHJcblxyXG4gICAgICAgIGlmIChwYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGREaXN0cmlidXRlRGlzdHJpY3RTZWF0cyhuZXh0WWVhcikgJiYgdGhpcy5wcm9wcy5tZXJnZURpc3RyaWN0cykge1xyXG4gICAgICAgICAgICAgICAgdm90ZXMgPSBtZXJnZVZvdGVEaXN0cmljdHModm90ZXMsIGRpc3RyaWN0TWFwKTtcclxuICAgICAgICAgICAgICAgIG1ldHJpY3MgPSBtZXJnZU1ldHJpY0Rpc3RyaWN0cyhtZXRyaWNzLCBkaXN0cmljdE1hcCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMucmVzZXRIaXN0b3JpY2FsKHZvdGVzLCBtZXRyaWNzLCBwYXJhbWV0ZXJzLCB0aGlzLnByb3BzLmNvbXB1dGF0aW9uUGF5bG9hZC5wYXJ0eU1hcCk7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMudXBkYXRlQ2FsY3VsYXRpb24oXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5wcm9wcy5jb21wdXRhdGlvblBheWxvYWQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWV0cmljcyxcclxuICAgICAgICAgICAgICAgICAgICB2b3RlcyxcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLmF1dG9Db21wdXRlLFxyXG4gICAgICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5yZXNldENvbXBhcmlzb24oKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5yZXNldFRvSGlzdG9yaWNhbFNldHRpbmdzKFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLFxyXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IGV2ZW50LnRhcmdldC52YWx1ZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB2b3RlcyxcclxuICAgICAgICAgICAgICAgIG1ldHJpY3MsXHJcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jb21wdXRhdGlvblBheWxvYWQucGFydHlNYXBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgY2FsY3VsYXRpb24gYW5kIHNldHRpbmdzIG9uIHVzZXJcclxuICAgICAqIGludGVyYWN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBldmVudCBhIENoYW5nZUV2ZW50IHdob3NlIHRhcmdldCBjYXJyaWVzIHRoZSBudW1lcmlmaWVkIGFsZ29yaXRobVxyXG4gICAgICovXHJcbiAgICBvbkFsZ29yaXRobUNoYW5nZSA9IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTFNlbGVjdEVsZW1lbnQ+KSA9PiB7XHJcbiAgICAgICAgY29uc3QgYWxnb3JpdGhtVHlwZSA9IGV2ZW50LnRhcmdldC52YWx1ZSBhcyBBbGdvcml0aG1UeXBlO1xyXG4gICAgICAgIHRoaXMucHJvcHMudXBkYXRlQ2FsY3VsYXRpb24oXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMuY29tcHV0YXRpb25QYXlsb2FkLFxyXG4gICAgICAgICAgICAgICAgYWxnb3JpdGhtOiBhbGdvcml0aG1UeXBlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5hdXRvQ29tcHV0ZSxcclxuICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMucHJvcHMudXBkYXRlU2V0dGluZ3Moe1xyXG4gICAgICAgICAgICAuLi50aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZCxcclxuICAgICAgICAgICAgYWxnb3JpdGhtOiBhbGdvcml0aG1UeXBlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byB1cGRhdGUgdGhlIGNhbGN1bGF0aW9uIGFuZCBzZXR0aW5ncyBvblxyXG4gICAgICogdXNlciBpbnRlcmFjdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc3RyaW5nVmFsdWUgdGhlIHN0cmluZyB2YWx1ZSBvZiB0aGUgZmlyc3QgZGl2aXNvclxyXG4gICAgICogQHBhcmFtIG51bWVyaWNWYWx1ZSB0aGUgbnVtZXJpYyB2YWx1ZSBvZiB0aGUgZmlyc3QgZGl2aXNvclxyXG4gICAgICovXHJcbiAgICBvbkZpcnN0RGl2aXNvckNoYW5nZSA9IChzdHJpbmdWYWx1ZTogc3RyaW5nLCBudW1lcmljVmFsdWU6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHRoaXMucHJvcHMudXBkYXRlU2V0dGluZ3Moe1xyXG4gICAgICAgICAgICAuLi50aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZCxcclxuICAgICAgICAgICAgZmlyc3REaXZpc29yOiBzdHJpbmdWYWx1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnByb3BzLnVwZGF0ZUNhbGN1bGF0aW9uKFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAuLi50aGlzLnByb3BzLmNvbXB1dGF0aW9uUGF5bG9hZCxcclxuICAgICAgICAgICAgICAgIGZpcnN0RGl2aXNvcjogbnVtZXJpY1ZhbHVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5hdXRvQ29tcHV0ZSxcclxuICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byB1cGRhdGUgdGhlIGNhbGN1bGF0aW9uIGFuZCBzZXR0aW5ncyBvblxyXG4gICAgICogdXNlciBpbnRlcmFjdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc3RyaW5nVmFsdWUgdGhlIHN0cmluZyB2YWx1ZSBvZiB0aGUgdGhyZXNob2xkXHJcbiAgICAgKiBAcGFyYW0gbnVtZXJpY1ZhbHVlIHRoZSBudW1lcmljIHZhbHVlIG9mIHRoZSB0aHJlc2hvbGRcclxuICAgICAqL1xyXG4gICAgb25UaHJlc2hvbGRDaGFuZ2UgPSAoc3RyaW5nVmFsdWU6IHN0cmluZywgbnVtZXJpY1ZhbHVlOiBudW1iZXIpID0+IHtcclxuICAgICAgICB0aGlzLnByb3BzLnVwZGF0ZVNldHRpbmdzKHtcclxuICAgICAgICAgICAgLi4udGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQsXHJcbiAgICAgICAgICAgIGVsZWN0aW9uVGhyZXNob2xkOiBzdHJpbmdWYWx1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnByb3BzLnVwZGF0ZUNhbGN1bGF0aW9uKFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAuLi50aGlzLnByb3BzLmNvbXB1dGF0aW9uUGF5bG9hZCxcclxuICAgICAgICAgICAgICAgIGVsZWN0aW9uVGhyZXNob2xkOiBudW1lcmljVmFsdWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLmF1dG9Db21wdXRlLFxyXG4gICAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgY2FsY3VsYXRpb24gYW5kIHNldHRpbmdzIG9uXHJcbiAgICAgKiB1c2VyIGludGVyYWN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzdHJpbmdWYWx1ZSB0aGUgc3RyaW5nIHZhbHVlIG9mIHRoZSBkaXN0cmljdCB0aHJlc2hvbGRcclxuICAgICAqIEBwYXJhbSBudW1lcmljVmFsdWUgdGhlIG51bWVyaWMgdmFsdWUgb2YgdGhlIGRpc3RyaWN0IHRocmVzaG9sZFxyXG4gICAgICovXHJcbiAgICBvbkRpc3RyaWN0VGhyZXNob2xkQ2hhbmdlID0gKHN0cmluZ1ZhbHVlOiBzdHJpbmcsIG51bWVyaWNWYWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy51cGRhdGVTZXR0aW5ncyh7XHJcbiAgICAgICAgICAgIC4uLnRoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLFxyXG4gICAgICAgICAgICBkaXN0cmljdFRocmVzaG9sZDogc3RyaW5nVmFsdWUsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5wcm9wcy51cGRhdGVDYWxjdWxhdGlvbihcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLi4udGhpcy5wcm9wcy5jb21wdXRhdGlvblBheWxvYWQsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFRocmVzaG9sZDogbnVtZXJpY1ZhbHVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5hdXRvQ29tcHV0ZSxcclxuICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byB1cGRhdGUgdGhlIGNhbGN1bGF0aW9uIGFuZCBzZXR0aW5ncyBvblxyXG4gICAgICogdXNlciBpbnRlcmFjdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc3RyaW5nVmFsdWUgdGhlIHN0cmluZyB2YWx1ZSBvZiB0aGUgbm8uIG9mIGRpc3RyaWN0IHNlYXRzXHJcbiAgICAgKiBAcGFyYW0gbnVtZXJpY1ZhbHVlIHRoZSBudW1lcmljIHZhbHVlIG9mIHRoZSBuby4gb2YgZGlzdHJpY3Qgc2VhdHNcclxuICAgICAqL1xyXG4gICAgb25EaXN0cmljdFNlYXRzQ2hhbmdlID0gKHN0cmluZ1ZhbHVlOiBzdHJpbmcsIG51bWVyaWNWYWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy51cGRhdGVTZXR0aW5ncyh7XHJcbiAgICAgICAgICAgIC4uLnRoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLFxyXG4gICAgICAgICAgICBkaXN0cmljdFNlYXRzOiBzdHJpbmdWYWx1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnByb3BzLnVwZGF0ZUNhbGN1bGF0aW9uKFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAuLi50aGlzLnByb3BzLmNvbXB1dGF0aW9uUGF5bG9hZCxcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0U2VhdHM6IG51bWVyaWNWYWx1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQuYXV0b0NvbXB1dGUsXHJcbiAgICAgICAgICAgIGZhbHNlXHJcbiAgICAgICAgKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gdXBkYXRlIHRoZSBjYWxjdWxhdGlvbiBhbmQgc2V0dGluZ3Mgb25cclxuICAgICAqIHVzZXIgaW50ZXJhY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHN0cmluZ1ZhbHVlIHRoZSBzdHJpbmcgdmFsdWUgb2YgdGhlIG5vLiBvZiBsZXZlbGxpbmcgc2VhdHNcclxuICAgICAqIEBwYXJhbSBudW1lcmljVmFsdWUgdGhlIG51bWVyaWMgdmFsdWUgb2YgdGhlIG5vLiBvZiBsZXZlbGxpbmcgc2VhdHNcclxuICAgICAqL1xyXG4gICAgb25MZXZlbGluZ1NlYXRzQ2hhbmdlID0gKHN0cmluZ1ZhbHVlOiBzdHJpbmcsIG51bWVyaWNWYWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy51cGRhdGVTZXR0aW5ncyh7XHJcbiAgICAgICAgICAgIC4uLnRoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLFxyXG4gICAgICAgICAgICBsZXZlbGluZ1NlYXRzOiBzdHJpbmdWYWx1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnByb3BzLnVwZGF0ZUNhbGN1bGF0aW9uKFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAuLi50aGlzLnByb3BzLmNvbXB1dGF0aW9uUGF5bG9hZCxcclxuICAgICAgICAgICAgICAgIGxldmVsaW5nU2VhdHM6IG51bWVyaWNWYWx1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQuYXV0b0NvbXB1dGUsXHJcbiAgICAgICAgICAgIGZhbHNlXHJcbiAgICAgICAgKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gdXBkYXRlIHRoZSBjYWxjdWxhdGlvbiBhbmQgc2V0dGluZ3Mgb24gdXNlclxyXG4gICAgICogaW50ZXJhY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHN0cmluZ1ZhbHVlIHRoZSBzdHJpbmcgdmFsdWUgb2YgdGhlIGFyZWEgZmFjdG9yXHJcbiAgICAgKiBAcGFyYW0gbnVtZXJpY1ZhbHVlIHRoZSBudW1lcmljIHZhbHVlIG9mIHRoZSBhcmVhIGZhY3RvclxyXG4gICAgICovXHJcbiAgICBvbkFyZWFGYWN0b3JDaGFuZ2UgPSAoc3RyaW5nVmFsdWU6IHN0cmluZywgbnVtZXJpY1ZhbHVlOiBudW1iZXIpID0+IHtcclxuICAgICAgICB0aGlzLnByb3BzLnVwZGF0ZVNldHRpbmdzKHtcclxuICAgICAgICAgICAgLi4udGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQsXHJcbiAgICAgICAgICAgIGFyZWFGYWN0b3I6IHN0cmluZ1ZhbHVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucHJvcHMudXBkYXRlQ2FsY3VsYXRpb24oXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMuY29tcHV0YXRpb25QYXlsb2FkLFxyXG4gICAgICAgICAgICAgICAgYXJlYUZhY3RvcjogbnVtZXJpY1ZhbHVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5hdXRvQ29tcHV0ZSxcclxuICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byB1cGRhdGUgd2hldGhlciBvciBub3QgYXV0b21hdGljIGNvbXB1dGF0aW9uIGlzXHJcbiAgICAgKiBlbmFibGVkLiBFbnN1cmVzIGNvbXB1dGF0aW9uIGlzIHBlcmZvcm1lZCB3aGVuZXZlciB0b2dnbGVkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBldmVudCBDaGFuZ2VFdmVudCBmb3Igd2hldGhlciBvciBub3QgaXQgaXMgY2hlY2tlZFxyXG4gICAgICovXHJcbiAgICB0b2dnbGVBdXRvQ29tcHV0ZSA9IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcclxuICAgICAgICB0aGlzLnByb3BzLnRvZ2dsZUF1dG9Db21wdXRlKGV2ZW50LnRhcmdldC5jaGVja2VkKTtcclxuICAgICAgICB0aGlzLmNvbXB1dGVNYW51YWxseSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byBwZXJmb3JtIGEgbWFudWFsIGNvbXB1dGF0aW9uIG9mIHRoZSBjdXJyZW50IHZhbHVlcy5cclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIGNvbXB1dGVNYW51YWxseSA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCB5ZWFyID0gcGFyc2VJbnQodGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQueWVhcik7XHJcbiAgICAgICAgY29uc3Qgdm90ZXMgPSB0aGlzLnByb3BzLnZvdGVzLmZpbHRlcigodm90ZSkgPT4gdm90ZS5lbGVjdGlvblllYXIgPT09IHllYXIpO1xyXG4gICAgICAgIGNvbnN0IGRpc3RyaWJ1dGlvblllYXIgPSB0aGlzLnByb3BzLnVzZTIwMjFEaXN0cmlidXRpb24gJiYgeWVhciA+PSAyMDA1ID8gMjAyMSA6IHllYXI7XHJcbiAgICAgICAgY29uc3QgbWV0cmljcyA9IHRoaXMucHJvcHMubWV0cmljcy5maWx0ZXIoKG1ldHJpYykgPT4gbWV0cmljLmVsZWN0aW9uWWVhciA9PT0gZGlzdHJpYnV0aW9uWWVhcik7XHJcbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMucGFyYW1ldGVycy5maW5kKChwYXJhbWV0ZXIpID0+IHBhcmFtZXRlci5lbGVjdGlvblllYXIgPT09IHllYXIpIHx8IHVubG9hZGVkUGFyYW1ldGVycztcclxuICAgICAgICBpZiAocGFyYW1ldGVycykge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnVwZGF0ZUNhbGN1bGF0aW9uKFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobTogdGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQuYWxnb3JpdGhtLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0RGl2aXNvcjogcGFyc2VGbG9hdCh0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5maXJzdERpdmlzb3IpLFxyXG4gICAgICAgICAgICAgICAgICAgIGVsZWN0aW9uVGhyZXNob2xkOiBwYXJzZUZsb2F0KHRoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLmVsZWN0aW9uVGhyZXNob2xkKSxcclxuICAgICAgICAgICAgICAgICAgICBkaXN0cmljdFRocmVzaG9sZDogcGFyc2VGbG9hdCh0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5kaXN0cmljdFRocmVzaG9sZCksXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdHJpY3RTZWF0czogcGFyc2VJbnQodGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQuZGlzdHJpY3RTZWF0cyksXHJcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWxpbmdTZWF0czogcGFyc2VJbnQodGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQubGV2ZWxpbmdTZWF0cyksXHJcbiAgICAgICAgICAgICAgICAgICAgYXJlYUZhY3RvcjogcGFyc2VGbG9hdCh0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5hcmVhRmFjdG9yKSxcclxuICAgICAgICAgICAgICAgICAgICB2b3RlcyxcclxuICAgICAgICAgICAgICAgICAgICBtZXRyaWNzLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFydHlNYXA6IHRoaXMucHJvcHMuY29tcHV0YXRpb25QYXlsb2FkLnBhcnR5TWFwLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLmF1dG9Db21wdXRlLFxyXG4gICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIHJlc3RvcmluZyBib3RoIHRoZSBzZXR0aW5ncyBhbmQgdGhlIGNvbXB1dGF0aW9uIHRvXHJcbiAgICAgKiB0aGVpciBvcmlnaW5hbCwgZGVmYXVsdCBzdGF0ZSBmb3IgdGhlIGN1cnJlbnQgeWVhciBzZWxlY3RlZC5cclxuICAgICAqL1xyXG4gICAgcmVzdG9yZVRvRGVmYXVsdCA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBjb21wUGF5bG9hZCA9IHRoaXMucHJvcHMuY29tcHV0YXRpb25QYXlsb2FkO1xyXG4gICAgICAgIHRoaXMucHJvcHMucmVzZXRUb0hpc3RvcmljYWxTZXR0aW5ncyhcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQsXHJcbiAgICAgICAgICAgIGNvbXBQYXlsb2FkLnZvdGVzLFxyXG4gICAgICAgICAgICBjb21wUGF5bG9hZC5tZXRyaWNzLFxyXG4gICAgICAgICAgICBjb21wUGF5bG9hZC5wYXJhbWV0ZXJzLFxyXG4gICAgICAgICAgICBjb21wUGF5bG9hZC5wYXJ0eU1hcFxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHNldHRpbmdzIGhhdmUgY2hhbmdlZC5cclxuICAgICAqL1xyXG4gICAgc2V0dGluZ3NDaGFuZ2VkID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgc2V0dGluZ3NQYXlsb2FkIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgICAgIGNvbnN0IHsgY29tcGFyaXNvbiB9ID0gc2V0dGluZ3NQYXlsb2FkO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIHNldHRpbmdzUGF5bG9hZC5hbGdvcml0aG0gIT09IGNvbXBhcmlzb24uYWxnb3JpdGhtIHx8XHJcbiAgICAgICAgICAgIGNvbXBhcmlzb24uZmlyc3REaXZpc29yICE9PSBzZXR0aW5nc1BheWxvYWQuZmlyc3REaXZpc29yIHx8XHJcbiAgICAgICAgICAgIHNldHRpbmdzUGF5bG9hZC5lbGVjdGlvblRocmVzaG9sZCAhPT0gY29tcGFyaXNvbi5lbGVjdGlvblRocmVzaG9sZCB8fFxyXG4gICAgICAgICAgICBjb21wYXJpc29uLmRpc3RyaWN0VGhyZXNob2xkICE9PSBzZXR0aW5nc1BheWxvYWQuZGlzdHJpY3RUaHJlc2hvbGQgfHxcclxuICAgICAgICAgICAgc2V0dGluZ3NQYXlsb2FkLmxldmVsaW5nU2VhdHMgIT09IGNvbXBhcmlzb24ubGV2ZWxpbmdTZWF0cyB8fFxyXG4gICAgICAgICAgICBzZXR0aW5nc1BheWxvYWQuZGlzdHJpY3RTZWF0cyAhPT0gY29tcGFyaXNvbi5kaXN0cmljdFNlYXRzIHx8XHJcbiAgICAgICAgICAgIGNvbXBhcmlzb24uYXJlYUZhY3RvciAhPT0gc2V0dGluZ3NQYXlsb2FkLmFyZWFGYWN0b3JcclxuICAgICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3QgeWVhciA9IHBhcnNlSW50KHRoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLnllYXIpO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwiaXMtc2l6ZS02LW1vYmlsZSBpcy1zaXplLTQtdGFibGV0IGlzLXNpemUtMi1kZXNrdG9wIGlzLXNpemUtMS13aWRlc2NyZWVuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgU3RvcnRpbmdzdmFsZ1xyXG4gICAgICAgICAgICAgICAgPC9oMT5cclxuICAgICAgICAgICAgICAgIDxmb3JtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxBdXRvQ29tcHV0ZUNoZWNrYm94XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db21wdXRlPXt0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5hdXRvQ29tcHV0ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZU1hbnVhbGx5PXt0aGlzLmNvbXB1dGVNYW51YWxseX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQXV0b0NvbXB1dGU9e3RoaXMudG9nZ2xlQXV0b0NvbXB1dGV9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8WWVhclNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVjdGlvblllYXJzPXt0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5lbGVjdGlvblllYXJzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvblllYXJDaGFuZ2U9e3RoaXMub25ZZWFyQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyPXt0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC55ZWFyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUb29sdGlwSW5mb1JpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dD17XCJIZXIga2FuIGR1IHZlbGdlIMOlcmV0IHN0b3J0aW5nc3ZhbGdldCBibGUgaG9sZHQuXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsPXtXSUtJVVJMICsgXCIjVmFsZ3QlMjAlQzMlQTVyXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8QWxnb3JpdGhtU2VsZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobT17dGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQuYWxnb3JpdGhtfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0QWxnb3JpdGhtPXt0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5jb21wYXJpc29uLmFsZ29yaXRobX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25BbGdvcml0aG1DaGFuZ2U9e3RoaXMub25BbGdvcml0aG1DaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRvb2x0aXBJbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dD17XCJIZXIga2FuIGR1IHZlbGdlIGJlcmVnbmluZ3NtZXRvZGUgZm9yIGZvcmRlbGluZyBhdiBtYW5kYXRlci5cIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw9e1dJS0lVUkwgKyBcIiNWYWxndCUyMG1ldG9kZVwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNtYXJ0TnVtZXJpY0lucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbj17dGhpcy5zaG91bGRIaWRlRmlyc3REaXZpc29yKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJmaXJzdERpdmlzb3JcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkbDuHJzdGUgZGVsaW5nc3RhbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQuZmlyc3REaXZpc29yfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkZpcnN0RGl2aXNvckNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluPXsxfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXg9ezV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17dGhpcy5wcm9wcy5jb21wdXRhdGlvblBheWxvYWQucGFyYW1ldGVycy5hbGdvcml0aG0ucGFyYW1ldGVyc1tGaXJzdERpdmlzb3JdIHx8IDB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsVmFsdWU9e3RoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLmNvbXBhcmlzb24uZmlyc3REaXZpc29yfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlZ2VyPXtmYWxzZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcD17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcEluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0PXtcIkhlciBrYW4gZHUgZm9yYW5kcmUgZGV0IGbDuHJzdGUgZGVsaW5nc3RhbGxldCBpIFNhaW50ZS1MYWd1w6tzIG1ldG9kZS5cIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw9e1dJS0lVUkwgKyBcIiNGJUMzJUI4cnN0ZSUyMGRlbGluZ3N0YWxsXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8U21hcnROdW1lcmljSW5wdXRXaXRoTGFiZWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImVsZWN0aW9uVGhyZXNob2xkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJTcGVycmVncmVuc2UgZm9yIHV0amV2bmluZ3NtYW5kYXRlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5lbGVjdGlvblRocmVzaG9sZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25UaHJlc2hvbGRDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbj17MH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4PXsxNX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLmNvbXB1dGF0aW9uUGF5bG9hZC5wYXJhbWV0ZXJzLnRocmVzaG9sZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZT17dGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQuY29tcGFyaXNvbi5lbGVjdGlvblRocmVzaG9sZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZWdlcj17ZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtcIiVcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcD17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcEluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0PXtcIkhlciBrYW4gZHUgZm9yYW5kcmUgc3BlcnJlZ3JlbnNlbiBmb3Igw6UgZsOlIHRpbGRlbHQgdXRqZXZuaW5nc21hbmRhdC5cIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw9e1dJS0lVUkwgKyBcIi8jU3BlcnJlZ3JlbnNlJTIwZm9yJTIwdXRqZXZuaW5nc21hbmRhdFwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNtYXJ0TnVtZXJpY0lucHV0V2l0aExhYmVsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJkaXN0cmljdFRocmVzaG9sZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiU3BlcnJlZ3JlbnNlIGZvciBkaXN0cmlrdG1hbmRhdGVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLmRpc3RyaWN0VGhyZXNob2xkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkRpc3RyaWN0VGhyZXNob2xkQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW49ezB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heD17MTV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17MH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZT17dGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQuY29tcGFyaXNvbi5kaXN0cmljdFRocmVzaG9sZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZWdlcj17ZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtcIiVcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNIaWRkZW5Ub3VjaD17dHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcD17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcEluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0PXtcIkhlciBrYW4gZHUgc2V0dGUgaW5uIGVuIHNwZXJyZWdyZW5zZSBvZ3PDpSBmb3IgZGlzdHJpa3RzbWFuZGF0ZW5lLlwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybD17V0lLSVVSTCArIFwiI1NwZXJyZWdyZW5zZSUyMGZvciUyMGRpc3RyaWt0bWFuZGF0XCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8U21hcnROdW1lcmljSW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImxldmVsaW5nU2VhdHNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIlV0amV2bmluZ3NtYW5kYXRlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5sZXZlbGluZ1NlYXRzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkxldmVsaW5nU2VhdHNDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbj17MH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4PXsxMDB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17dGhpcy5wcm9wcy5jb21wdXRhdGlvblBheWxvYWQucGFyYW1ldGVycy5sZXZlbGluZ1NlYXRzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFZhbHVlPXt0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5jb21wYXJpc29uLmxldmVsaW5nU2VhdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVnZXI9e3RydWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRvb2x0aXBJbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dD17XCJIZXIga2FuIGR1IGVuZHJlIGFudGFsbCB1dGpldm5pbmdzbWFuZGF0ZXIuXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsPXtXSUtJVVJMICsgXCIjVXRqZXZuaW5nc21hbmRhdGVyXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8U21hcnROdW1lcmljSW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImRpc3RyaWN0U2VhdHNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkRpc3RyaWt0c21hbmRhdGVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLmRpc3RyaWN0U2VhdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uRGlzdHJpY3RTZWF0c0NoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluPXswfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXg9ezUwMH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLmNvbXB1dGF0aW9uUGF5bG9hZC5wYXJhbWV0ZXJzLmRpc3RyaWN0U2VhdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsVmFsdWU9e3RoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLmNvbXBhcmlzb24uZGlzdHJpY3RTZWF0c31cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZWdlcj17dHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuPXshc2hvdWxkRGlzdHJpYnV0ZURpc3RyaWN0U2VhdHMoeWVhcil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRvb2x0aXBJbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dD17XCJIZXIga2FuIGR1IGVuZHJlIGFudGFsbCBkaXN0cmlrdHNtYW5kYXRlci5cIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw9e1dJS0lVUkwgKyBcIiNEaXN0cmlrdHNtYW5kYXRlclwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNtYXJ0TnVtZXJpY0lucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJhcmVhRmFjdG9yXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJBcmVhbGZha3RvclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5hcmVhRmFjdG9yfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkFyZWFGYWN0b3JDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbj17MH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4PXszfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e3RoaXMucHJvcHMuY29tcHV0YXRpb25QYXlsb2FkLnBhcmFtZXRlcnMuYXJlYUZhY3Rvcn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZT17dGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQuY29tcGFyaXNvbi5hcmVhRmFjdG9yfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlZ2VyPXtmYWxzZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuPXshc2hvdWxkRGlzdHJpYnV0ZURpc3RyaWN0U2VhdHMoeWVhcil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRvb2x0aXBJbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dD17XCJIZXIga2FuIGR1IGVuZHJlIGJhbGFuc2VuIG1lbGxvbSBmb2xrZXRhbGwgb2cgZnlsa2V0cyBhcmVhbC5cIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw9e1dJS0lVUkwgKyBcIiNBcmVhbGZha3RvclwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbXB1dGVNYW51YWxseUJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcHV0ZT17dGhpcy5wcm9wcy5zZXR0aW5nc1BheWxvYWQuYXV0b0NvbXB1dGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVNYW51YWxseT17dGhpcy5jb21wdXRlTWFudWFsbHl9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPFJlc2V0QnV0dG9uIHJlc3RvcmVUb0RlZmF1bHQ9e3RoaXMucmVzdG9yZVRvRGVmYXVsdH0gaGlnaGxpZ2h0PXt0aGlzLnNldHRpbmdzQ2hhbmdlZCgpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb21wYXJpc29uT3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29tcGFyaXNvbj17dGhpcy5wcm9wcy5zaG93Q29tcGFyaXNvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRDb21wYXJpc29uPXt0aGlzLnByb3BzLnJlc2V0Q29tcGFyaXNvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUNvbXBhcmlzb249e3RoaXMucHJvcHMuc2F2ZUNvbXBhcmlzb259XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBSb290U3RhdGUgfSBmcm9tIFwiLi4vLi4vLi4vcmVkdWNlcnNcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBQcmVzZW50YXRpb25TZXR0aW5nc01lbnUsIFByZXNlbnRhdGlvblNldHRpbmdzUHJvcHMgfSBmcm9tIFwiLi9QcmVzZW50YXRpb25TZXR0aW5nc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgc2VsZWN0RGlzdHJpY3QsXHJcbiAgICBjaGFuZ2VEZWNpbWFscyxcclxuICAgIGNoYW5nZVNob3dQYXJ0aWVzTm9TZWF0cyxcclxuICAgIGNoYW5nZURpc3Byb3BvcnRpb25hbGl0eUluZGV4LFxyXG4gICAgdG9nZ2xlU2hvd0NvbXBhcmlzb24sXHJcbiAgICB0b2dnbGVTaG93RmlsdGVycyxcclxuICAgIHRvZ2dsZU1lcmdlRGlzdHJpY3RzLFxyXG4gICAgdG9nZ2xlVXNlMjAyMURpc3RyaWJ1dGlvbixcclxufSBmcm9tIFwiLi4vcHJlc2VudGF0aW9uLW1lbnUtYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBEaXNwcm9wb3J0aW9uYWxpdHlJbmRleCB9IGZyb20gXCIuLi8uLi9QcmVzZW50YXRpb24vcHJlc2VudGF0aW9uLW1vZGVsc1wiO1xyXG5pbXBvcnQgeyBDb21wdXRhdGlvblBheWxvYWQsIHVwZGF0ZUNvbXB1dGF0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXB1dGF0aW9uXCI7XHJcblxyXG4vKipcclxuICogRGVzY3JpYmVzIHdoaWNoIHByb3BlcnRpZXMgd2Ugd2FudCB0byBwaWNrIGZyb20gdGhlIHByb3BlcnRpZXMgb2YgdGhlXHJcbiAqIGNvbXBvbmVudCBmb3IgbWFwcGluZyBmcm9tIHN0YXRlIHRvIHByb3BzLlxyXG4gKi9cclxuaW50ZXJmYWNlIFN0YXRlUHJvcHNcclxuICAgIGV4dGVuZHMgUGljazxcclxuICAgICAgICBQcmVzZW50YXRpb25TZXR0aW5nc1Byb3BzLFxyXG4gICAgICAgIHwgXCJjdXJyZW50UHJlc2VudGF0aW9uXCJcclxuICAgICAgICB8IFwiZGlzdHJpY3RTZWxlY3RlZFwiXHJcbiAgICAgICAgfCBcImRlY2ltYWxzXCJcclxuICAgICAgICB8IFwic2hvd1BhcnRpZXNXaXRob3V0U2VhdHNcIlxyXG4gICAgICAgIHwgXCJyZXN1bHRzXCJcclxuICAgICAgICB8IFwiZGlzcHJvcG9ydGlvbmFsaXR5SW5kZXhcIlxyXG4gICAgICAgIHwgXCJzaG93Q29tcGFyaXNvblwiXHJcbiAgICAgICAgfCBcInNob3dGaWx0ZXJzXCJcclxuICAgICAgICB8IFwieWVhclwiXHJcbiAgICAgICAgfCBcIm1lcmdlRGlzdHJpY3RzXCJcclxuICAgICAgICB8IFwidXNlMjAyMURpc3RyaWJ1dGlvblwiXHJcbiAgICAgICAgfCBcInZvdGVzXCJcclxuICAgICAgICB8IFwibWV0cmljc1wiXHJcbiAgICAgICAgfCBcInBhcmFtZXRlcnNcIlxyXG4gICAgICAgIHwgXCJjb21wdXRhdGlvblBheWxvYWRcIlxyXG4gICAgICAgIHwgXCJzZXR0aW5nc1BheWxvYWRcIlxyXG4gICAgPiB7fVxyXG5cclxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlOiBSb290U3RhdGUpOiBTdGF0ZVByb3BzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY3VycmVudFByZXNlbnRhdGlvbjogc3RhdGUucHJlc2VudGF0aW9uTWVudVN0YXRlLmN1cnJlbnRQcmVzZW50YXRpb24sXHJcbiAgICAgICAgZGVjaW1hbHM6IHN0YXRlLnByZXNlbnRhdGlvbk1lbnVTdGF0ZS5kZWNpbWFscyxcclxuICAgICAgICByZXN1bHRzOiBzdGF0ZS5jb21wdXRhdGlvblN0YXRlLmN1cnJlbnQsXHJcbiAgICAgICAgc2hvd1BhcnRpZXNXaXRob3V0U2VhdHM6IHN0YXRlLnByZXNlbnRhdGlvbk1lbnVTdGF0ZS5zaG93UGFydGllc1dpdGhvdXRTZWF0cyxcclxuICAgICAgICBkaXN0cmljdFNlbGVjdGVkOiBzdGF0ZS5wcmVzZW50YXRpb25NZW51U3RhdGUuZGlzdHJpY3RTZWxlY3RlZCxcclxuICAgICAgICBkaXNwcm9wb3J0aW9uYWxpdHlJbmRleDogc3RhdGUucHJlc2VudGF0aW9uTWVudVN0YXRlLmRpc3Byb3BvcnRpb25hbGl0eUluZGV4LFxyXG4gICAgICAgIHNob3dDb21wYXJpc29uOiBzdGF0ZS5wcmVzZW50YXRpb25NZW51U3RhdGUuc2hvd0NvbXBhcmlzb24sXHJcbiAgICAgICAgc2hvd0ZpbHRlcnM6IHN0YXRlLnByZXNlbnRhdGlvbk1lbnVTdGF0ZS5zaG93RmlsdGVycyxcclxuICAgICAgICB5ZWFyOiBzdGF0ZS5jb21wdXRhdGlvblN0YXRlLnBhcmFtZXRlcnMuZWxlY3Rpb25ZZWFyLFxyXG4gICAgICAgIG1lcmdlRGlzdHJpY3RzOiBzdGF0ZS5wcmVzZW50YXRpb25NZW51U3RhdGUubWVyZ2VEaXN0cmljdHMsXHJcbiAgICAgICAgdXNlMjAyMURpc3RyaWJ1dGlvbjogc3RhdGUucHJlc2VudGF0aW9uTWVudVN0YXRlLnVzZTIwMjFEaXN0cmlidXRpb24sXHJcbiAgICAgICAgdm90ZXM6IHN0YXRlLnJlcXVlc3RlZERhdGFTdGF0ZS52b3RlcyxcclxuICAgICAgICBtZXRyaWNzOiBzdGF0ZS5yZXF1ZXN0ZWREYXRhU3RhdGUubWV0cmljcyxcclxuICAgICAgICBwYXJhbWV0ZXJzOiBzdGF0ZS5jb21wdXRhdGlvblN0YXRlLnBhcmFtZXRlcnMsXHJcbiAgICAgICAgY29tcHV0YXRpb25QYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGFsZ29yaXRobTogc3RhdGUuY29tcHV0YXRpb25TdGF0ZS5hbGdvcml0aG0sXHJcbiAgICAgICAgICAgIGZpcnN0RGl2aXNvcjogc3RhdGUuY29tcHV0YXRpb25TdGF0ZS5maXJzdERpdmlzb3IsXHJcbiAgICAgICAgICAgIGVsZWN0aW9uVGhyZXNob2xkOiBzdGF0ZS5jb21wdXRhdGlvblN0YXRlLmVsZWN0aW9uVGhyZXNob2xkLFxyXG4gICAgICAgICAgICBkaXN0cmljdFRocmVzaG9sZDogc3RhdGUuY29tcHV0YXRpb25TdGF0ZS5kaXN0cmljdFRocmVzaG9sZCxcclxuICAgICAgICAgICAgZGlzdHJpY3RTZWF0czogc3RhdGUuY29tcHV0YXRpb25TdGF0ZS5kaXN0cmljdFNlYXRzLFxyXG4gICAgICAgICAgICBsZXZlbGluZ1NlYXRzOiBzdGF0ZS5jb21wdXRhdGlvblN0YXRlLmxldmVsaW5nU2VhdHMsXHJcbiAgICAgICAgICAgIGFyZWFGYWN0b3I6IHN0YXRlLmNvbXB1dGF0aW9uU3RhdGUuYXJlYUZhY3RvcixcclxuICAgICAgICAgICAgdm90ZXM6IHN0YXRlLmNvbXB1dGF0aW9uU3RhdGUudm90ZXMsXHJcbiAgICAgICAgICAgIG1ldHJpY3M6IHN0YXRlLmNvbXB1dGF0aW9uU3RhdGUubWV0cmljcyxcclxuICAgICAgICAgICAgcGFyYW1ldGVyczogc3RhdGUuY29tcHV0YXRpb25TdGF0ZS5wYXJhbWV0ZXJzLFxyXG4gICAgICAgICAgICBwYXJ0eU1hcDogc3RhdGUucmVxdWVzdGVkRGF0YVN0YXRlLnBhcnR5TWFwLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0dGluZ3NQYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIGVsZWN0aW9uWWVhcnM6IHN0YXRlLnNldHRpbmdzU3RhdGUuZWxlY3Rpb25ZZWFycyxcclxuICAgICAgICAgICAgeWVhcjogc3RhdGUuc2V0dGluZ3NTdGF0ZS55ZWFyLFxyXG4gICAgICAgICAgICBhbGdvcml0aG06IHN0YXRlLnNldHRpbmdzU3RhdGUuYWxnb3JpdGhtLFxyXG4gICAgICAgICAgICBmaXJzdERpdmlzb3I6IHN0YXRlLnNldHRpbmdzU3RhdGUuZmlyc3REaXZpc29yLFxyXG4gICAgICAgICAgICBlbGVjdGlvblRocmVzaG9sZDogc3RhdGUuc2V0dGluZ3NTdGF0ZS5lbGVjdGlvblRocmVzaG9sZCxcclxuICAgICAgICAgICAgZGlzdHJpY3RUaHJlc2hvbGQ6IHN0YXRlLnNldHRpbmdzU3RhdGUuZGlzdHJpY3RUaHJlc2hvbGQsXHJcbiAgICAgICAgICAgIGRpc3RyaWN0U2VhdHM6IHN0YXRlLnNldHRpbmdzU3RhdGUuZGlzdHJpY3RTZWF0cyxcclxuICAgICAgICAgICAgbGV2ZWxpbmdTZWF0czogc3RhdGUuc2V0dGluZ3NTdGF0ZS5sZXZlbGluZ1NlYXRzLFxyXG4gICAgICAgICAgICBhdXRvQ29tcHV0ZTogc3RhdGUuc2V0dGluZ3NTdGF0ZS5hdXRvQ29tcHV0ZSxcclxuICAgICAgICAgICAgZm9yY2VDb21wdXRlOiBmYWxzZSxcclxuICAgICAgICAgICAgYXJlYUZhY3Rvcjogc3RhdGUuc2V0dGluZ3NTdGF0ZS5hcmVhRmFjdG9yLFxyXG4gICAgICAgICAgICBjb21wYXJpc29uOiBzdGF0ZS5zZXR0aW5nc1N0YXRlLmNvbXBhcmlzb24sXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZXNjcmliZXMgd2hpY2ggcHJvcGVydGllcyB3ZSB3YW50IHRvIHBpY2sgZnJvbSB0aGUgcHJvcGVydGllcyBvZiB0aGVcclxuICogY29tcG9uZW50IGZvciBtYXBwaW5nIGZyb20gZGlzcGF0Y2ggdG8gcHJvcHMuXHJcbiAqL1xyXG5pbnRlcmZhY2UgRGlzcGF0Y2hQcm9wc1xyXG4gICAgZXh0ZW5kcyBQaWNrPFxyXG4gICAgICAgIFByZXNlbnRhdGlvblNldHRpbmdzUHJvcHMsXHJcbiAgICAgICAgfCBcImNoYW5nZURlY2ltYWxzXCJcclxuICAgICAgICB8IFwidG9nZ2xlU2hvd1BhcnRpZXNXaXRob3V0U2VhdHNcIlxyXG4gICAgICAgIHwgXCJzZWxlY3REaXN0cmljdFwiXHJcbiAgICAgICAgfCBcImNoYW5nZURpc3Byb3BvcnRpb25hbGl0eUluZGV4XCJcclxuICAgICAgICB8IFwidG9nZ2xlU2hvd0NvbXBhcmlzb25cIlxyXG4gICAgICAgIHwgXCJ0b2dnbGVTaG93RmlsdGVyc1wiXHJcbiAgICAgICAgfCBcInRvZ2dsZU1lcmdlRGlzdHJpY3RzXCJcclxuICAgICAgICB8IFwidG9nZ2xlVXNlMjAyMURpc3RyaWJ1dGlvblwiXHJcbiAgICAgICAgfCBcInVwZGF0ZUNhbGN1bGF0aW9uXCJcclxuICAgID4ge31cclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaDogYW55KTogRGlzcGF0Y2hQcm9wcyA9PiAoe1xyXG4gICAgY2hhbmdlRGVjaW1hbHM6IChkZWNpbWFsczogc3RyaW5nLCBkZWNpbWFsc051bWJlcjogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYWN0aW9uID0gY2hhbmdlRGVjaW1hbHMoZGVjaW1hbHMsIGRlY2ltYWxzTnVtYmVyKTtcclxuICAgICAgICBkaXNwYXRjaChhY3Rpb24pO1xyXG4gICAgfSxcclxuICAgIHRvZ2dsZVNob3dQYXJ0aWVzV2l0aG91dFNlYXRzOiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XHJcbiAgICAgICAgY29uc3QgYWN0aW9uID0gY2hhbmdlU2hvd1BhcnRpZXNOb1NlYXRzKGV2ZW50LnRhcmdldC5jaGVja2VkKTtcclxuICAgICAgICBkaXNwYXRjaChhY3Rpb24pO1xyXG4gICAgfSxcclxuICAgIHNlbGVjdERpc3RyaWN0OiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IHNlbGVjdERpc3RyaWN0KGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgZGlzcGF0Y2goYWN0aW9uKTtcclxuICAgIH0sXHJcbiAgICBjaGFuZ2VEaXNwcm9wb3J0aW9uYWxpdHlJbmRleDogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MU2VsZWN0RWxlbWVudD4pID0+IHtcclxuICAgICAgICBjb25zdCBhY3Rpb24gPSBjaGFuZ2VEaXNwcm9wb3J0aW9uYWxpdHlJbmRleChldmVudC50YXJnZXQudmFsdWUgYXMgRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXgpO1xyXG4gICAgICAgIGRpc3BhdGNoKGFjdGlvbik7XHJcbiAgICB9LFxyXG4gICAgdG9nZ2xlU2hvd0NvbXBhcmlzb246IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcclxuICAgICAgICBjb25zdCBhY3Rpb24gPSB0b2dnbGVTaG93Q29tcGFyaXNvbihldmVudC50YXJnZXQuY2hlY2tlZCk7XHJcbiAgICAgICAgZGlzcGF0Y2goYWN0aW9uKTtcclxuICAgIH0sXHJcbiAgICB0b2dnbGVTaG93RmlsdGVyczogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IHRvZ2dsZVNob3dGaWx0ZXJzKGV2ZW50LnRhcmdldC5jaGVja2VkKTtcclxuICAgICAgICBkaXNwYXRjaChhY3Rpb24pO1xyXG4gICAgfSxcclxuICAgIHRvZ2dsZU1lcmdlRGlzdHJpY3RzOiAoY2hlY2tlZDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IHRvZ2dsZU1lcmdlRGlzdHJpY3RzKGNoZWNrZWQpO1xyXG4gICAgICAgIGRpc3BhdGNoKGFjdGlvbik7XHJcbiAgICB9LFxyXG4gICAgdG9nZ2xlVXNlMjAyMURpc3RyaWJ1dGlvbjogKGNoZWNrZWQ6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBjb25zdCBhY3Rpb24gPSB0b2dnbGVVc2UyMDIxRGlzdHJpYnV0aW9uKGNoZWNrZWQpO1xyXG4gICAgICAgIGRpc3BhdGNoKGFjdGlvbik7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlQ2FsY3VsYXRpb246IChjb21wdXRhdGlvblBheWxvYWQ6IENvbXB1dGF0aW9uUGF5bG9hZCwgYXV0b0NvbXB1dGU6IGJvb2xlYW4sIGZvcmNlQ29tcHV0ZTogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIGlmIChhdXRvQ29tcHV0ZSB8fCBmb3JjZUNvbXB1dGUpIHtcclxuICAgICAgICAgICAgY29uc3QgcGF5bG9hZDogQ29tcHV0YXRpb25QYXlsb2FkID0ge1xyXG4gICAgICAgICAgICAgICAgYWxnb3JpdGhtOiBjb21wdXRhdGlvblBheWxvYWQuYWxnb3JpdGhtLFxyXG4gICAgICAgICAgICAgICAgZmlyc3REaXZpc29yOiBjb21wdXRhdGlvblBheWxvYWQuZmlyc3REaXZpc29yLFxyXG4gICAgICAgICAgICAgICAgZWxlY3Rpb25UaHJlc2hvbGQ6IGNvbXB1dGF0aW9uUGF5bG9hZC5lbGVjdGlvblRocmVzaG9sZCxcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0VGhyZXNob2xkOiBjb21wdXRhdGlvblBheWxvYWQuZGlzdHJpY3RUaHJlc2hvbGQsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFNlYXRzOiBjb21wdXRhdGlvblBheWxvYWQuZGlzdHJpY3RTZWF0cyxcclxuICAgICAgICAgICAgICAgIGxldmVsaW5nU2VhdHM6IGNvbXB1dGF0aW9uUGF5bG9hZC5sZXZlbGluZ1NlYXRzLFxyXG4gICAgICAgICAgICAgICAgYXJlYUZhY3RvcjogY29tcHV0YXRpb25QYXlsb2FkLmFyZWFGYWN0b3IsXHJcbiAgICAgICAgICAgICAgICB2b3RlczogY29tcHV0YXRpb25QYXlsb2FkLnZvdGVzLFxyXG4gICAgICAgICAgICAgICAgbWV0cmljczogY29tcHV0YXRpb25QYXlsb2FkLm1ldHJpY3MsXHJcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzOiBjb21wdXRhdGlvblBheWxvYWQucGFyYW1ldGVycyxcclxuICAgICAgICAgICAgICAgIHBhcnR5TWFwOiBjb21wdXRhdGlvblBheWxvYWQucGFydHlNYXAsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZUNhbGN1bGF0aW9uQWN0aW9uID0gdXBkYXRlQ29tcHV0YXRpb24ocGF5bG9hZCk7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHVwZGF0ZUNhbGN1bGF0aW9uQWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBDb25uZWN0ZWRQcmVzZW50YXRpb25TZXR0aW5ncyA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHNcclxuKShQcmVzZW50YXRpb25TZXR0aW5nc01lbnUgYXMgYW55KTtcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IExhZ3VlRGhvbnRSZXN1bHQsIENvbXB1dGF0aW9uUGF5bG9hZCB9IGZyb20gXCIuLi8uLi8uLi9jb21wdXRhdGlvblwiO1xyXG5pbXBvcnQgeyBTbWFydE51bWVyaWNJbnB1dCwgVG9vbHRpcEluZm8gfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uXCI7XHJcbmltcG9ydCB7IFByZXNlbnRhdGlvblR5cGUsIERpc3Byb3BvcnRpb25hbGl0eUluZGV4IH0gZnJvbSBcIi4uLy4uL1ByZXNlbnRhdGlvbi9wcmVzZW50YXRpb24tbW9kZWxzXCI7XHJcbmltcG9ydCB7IERpc3Byb3BvcnRpb25hbGl0eVNlbGVjdCB9IGZyb20gXCIuL0Rpc3Byb3BvcnRpb25hbGl0eVNlbGVjdFwiO1xyXG5pbXBvcnQgeyBOb1NlYXRzQ2hlY2tib3ggfSBmcm9tIFwiLi9Ob1NlYXRzQ2hlY2tib3hcIjtcclxuaW1wb3J0IHsgQ29tcGFyaXNvbkNoZWNrYm94IH0gZnJvbSBcIi4vQ29tcGFyaXNvbkNoZWNrYm94XCI7XHJcbmltcG9ydCB7IEZpbHRlcnNDaGVja2JveCB9IGZyb20gXCIuL0ZpbHRlcnNDaGVja2JveFwiO1xyXG5pbXBvcnQgeyBNZXJnZURpc3RyaWN0c0NoZWNrYm94IH0gZnJvbSBcIi4vTWVyZ2VEaXN0cmljdHNDaGVja2JveFwiO1xyXG5pbXBvcnQgeyBWb3RlcywgTWV0cmljcywgUGFyYW1ldGVycyB9IGZyb20gXCIuLi8uLi8uLi9yZXF1ZXN0ZWQtZGF0YS9yZXF1ZXN0ZWQtZGF0YS1tb2RlbHNcIjtcclxuaW1wb3J0IHsgZGlzdHJpY3RNYXAsIG1lcmdlVm90ZURpc3RyaWN0cywgbWVyZ2VNZXRyaWNEaXN0cmljdHMgfSBmcm9tIFwiLi4vLi4vLi4vY29tcHV0YXRpb24vbG9naWMvZGlzdHJpY3QtbWVyZ2luZ1wiO1xyXG5pbXBvcnQgeyBDb21wdXRhdGlvbk1lbnVQYXlsb2FkIH0gZnJvbSBcIi4uLy4uL0NvbXB1dGF0aW9uTWVudS9jb21wdXRhdGlvbi1tZW51LW1vZGVsc1wiO1xyXG5pbXBvcnQgeyBVc2UyMDIxRGlzdHJpYnV0aW9uQ2hlY2tib3ggfSBmcm9tIFwiLi9Vc2UyMDIxRGlzdHJpYnV0aW9uQ2hlY2tib3hcIjtcclxuaW1wb3J0IHsgc2hvdWxkRGlzdHJpYnV0ZURpc3RyaWN0U2VhdHMgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2NvbmRpdGlvbmFsc1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQcmVzZW50YXRpb25TZXR0aW5nc1Byb3BzIHtcclxuICAgIGN1cnJlbnRQcmVzZW50YXRpb246IFByZXNlbnRhdGlvblR5cGU7XHJcbiAgICBkaXN0cmljdFNlbGVjdGVkOiBzdHJpbmc7XHJcbiAgICBkaXNwbGF5ZWREZWNpbWFscz86IG51bWJlcjtcclxuICAgIGRlY2ltYWxzOiBzdHJpbmc7XHJcbiAgICBzaG93UGFydGllc1dpdGhvdXRTZWF0czogYm9vbGVhbjtcclxuICAgIGNoYW5nZURlY2ltYWxzOiAoZGVjaW1hbHM6IHN0cmluZywgZGVjaW1hbHNOdW1iZXI6IG51bWJlcikgPT4gdm9pZDtcclxuICAgIHRvZ2dsZVNob3dQYXJ0aWVzV2l0aG91dFNlYXRzOiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xyXG4gICAgc2VsZWN0RGlzdHJpY3Q6IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTFNlbGVjdEVsZW1lbnQ+KSA9PiB2b2lkO1xyXG4gICAgcmVzdWx0czogTGFndWVEaG9udFJlc3VsdDtcclxuICAgIGNoYW5nZURpc3Byb3BvcnRpb25hbGl0eUluZGV4OiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4gdm9pZDtcclxuICAgIGRpc3Byb3BvcnRpb25hbGl0eUluZGV4OiBEaXNwcm9wb3J0aW9uYWxpdHlJbmRleDtcclxuICAgIHRvZ2dsZVNob3dDb21wYXJpc29uOiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xyXG4gICAgc2hvd0NvbXBhcmlzb246IGJvb2xlYW47XHJcbiAgICB0b2dnbGVTaG93RmlsdGVyczogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcclxuICAgIHNob3dGaWx0ZXJzOiBib29sZWFuO1xyXG4gICAgeWVhcjogbnVtYmVyO1xyXG4gICAgbWVyZ2VEaXN0cmljdHM6IGJvb2xlYW47XHJcbiAgICB0b2dnbGVNZXJnZURpc3RyaWN0czogKGNoZWNrZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbiAgICB1c2UyMDIxRGlzdHJpYnV0aW9uOiBib29sZWFuO1xyXG4gICAgdG9nZ2xlVXNlMjAyMURpc3RyaWJ1dGlvbjogKGNoZWNrZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbiAgICB2b3RlczogVm90ZXNbXTtcclxuICAgIG1ldHJpY3M6IE1ldHJpY3NbXTtcclxuICAgIHBhcmFtZXRlcnM6IFBhcmFtZXRlcnM7XHJcbiAgICBjb21wdXRhdGlvblBheWxvYWQ6IENvbXB1dGF0aW9uUGF5bG9hZDtcclxuICAgIHNldHRpbmdzUGF5bG9hZDogQ29tcHV0YXRpb25NZW51UGF5bG9hZDtcclxuICAgIHVwZGF0ZUNhbGN1bGF0aW9uOiAoY29tcHV0YXRpb25QYXlsb2FkOiBDb21wdXRhdGlvblBheWxvYWQsIGF1dG9Db21wdXRlOiBib29sZWFuLCBmb3JjZUNvbXB1dGU6IGJvb2xlYW4pID0+IGFueTtcclxufVxyXG5leHBvcnQgY2xhc3MgUHJlc2VudGF0aW9uU2V0dGluZ3NNZW51IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByZXNlbnRhdGlvblNldHRpbmdzUHJvcHM+IHtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIGZvciByZWR1Y2luZyBjb2RlIGluIHJlbmRlcigpLCBhbGxvd3MgY29uZGl0aW9uYWxcclxuICAgICAqIHJlbmRlcmluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSB2aWV3IGNvbnRhaW5zIGRlY2ltYWxzLCBmYWxzZSBvdGhlcndpc2VcclxuICAgICAqL1xyXG4gICAgbmVlZHNEZWNpbWFscygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmN1cnJlbnRQcmVzZW50YXRpb24gPT09IFByZXNlbnRhdGlvblR5cGUuRGlzdHJpY3RUYWJsZSB8fFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmN1cnJlbnRQcmVzZW50YXRpb24gPT09IFByZXNlbnRhdGlvblR5cGUuRWxlY3Rpb25UYWJsZSB8fFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmN1cnJlbnRQcmVzZW50YXRpb24gPT09IFByZXNlbnRhdGlvblR5cGUuU2luZ2xlRGlzdHJpY3QgfHxcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5jdXJyZW50UHJlc2VudGF0aW9uID09PSBQcmVzZW50YXRpb25UeXBlLlJlbWFpbmRlclF1b3RpZW50c1xyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBjaGVja3Mgd2hldGhlciB0aGUgY3VycmVudCBjb21wb25lbnQgc2hvdWxkXHJcbiAgICAgKiBzaG93IGRpc3Byb3BvcnRpb25hbGl0eSBpbmRleCBhcyBhbiBvcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBjdXJyZW50IHZpZXcgcmVxdWlyZXMgZGlzcGxheWluZyBkaXNwcm9wb3J0aW9uYWxpdHkgb3B0aW9ucywgZmFsc2Ugb3RoZXJ3aXNlXHJcbiAgICAgKi9cclxuICAgIHNob3dEaXNwcm9wb3J0aW9uYWxpdHlTZWxlY3QoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5jdXJyZW50UHJlc2VudGF0aW9uID09PSBQcmVzZW50YXRpb25UeXBlLlNpbmdsZURpc3RyaWN0IHx8XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuY3VycmVudFByZXNlbnRhdGlvbiA9PT0gUHJlc2VudGF0aW9uVHlwZS5FbGVjdGlvblRhYmxlXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgZXZhbHVhdGluZyB3aGV0aGVyIHRoZSBkaXN0cmljdCBzZWxlY3Qgc2hvdWxkXHJcbiAgICAgKiBiZSBzaG93bi5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBkcm9wZG93biBzaG91bGQgYmUgc2hvd24sIGZhbHNlIG90aGVyd2lzZVxyXG4gICAgICovXHJcbiAgICBzaG93RGlzdHJpY3RTZWxlY3QoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY3VycmVudFByZXNlbnRhdGlvbiA9PT0gUHJlc2VudGF0aW9uVHlwZS5TaW5nbGVEaXN0cmljdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIGZvciBldmFsdWF0aW5nIHdoZXRoZXIgY29tcGFyaXNvbiBzaG91bGQgYmUgc2hvd24uXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBjb21wYXJpc29uIHNob3VsZCBiZSBzaG93biwgZmFsc2Ugb3RoZXJ3aXNlXHJcbiAgICAgKi9cclxuICAgIHNob3dDb21wYXJpc29uKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmN1cnJlbnRQcmVzZW50YXRpb24gPT09IFByZXNlbnRhdGlvblR5cGUuRWxlY3Rpb25UYWJsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgZXZhbHVhdGluZyB3aGV0aGVyIGZpbHRlcnMgY2hlY2tib3ggc2hvdWxkIGJlIHNob3duLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgZmlsdGVycyBjaGVja2JveCBzaG91bGQgYmUgc2hvd24sIGZhbHNlIG90aGVyd2lzZVxyXG4gICAgICovXHJcbiAgICBzaG93RmlsdGVycygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jdXJyZW50UHJlc2VudGF0aW9uID09PSBQcmVzZW50YXRpb25UeXBlLkVsZWN0aW9uVGFibGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGV2YWx1YXRpbmcgd2hldGhlciBmaWx0ZXJzIGNoZWNrYm94IHNob3VsZCBiZSBzaG93bi5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIGZpbHRlcnMgY2hlY2tib3ggc2hvdWxkIGJlIHNob3duLCBmYWxzZSBvdGhlcndpc2VcclxuICAgICAqL1xyXG4gICAgc2hvd05vU2VhdHNDaGVja2JveCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmN1cnJlbnRQcmVzZW50YXRpb24gIT09IFByZXNlbnRhdGlvblR5cGUuRGlzdHJpY3RUYWJsZSAmJlxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmN1cnJlbnRQcmVzZW50YXRpb24gIT09IFByZXNlbnRhdGlvblR5cGUuTGV2ZWxsaW5nU2VhdHNcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIG9uVG9nZ2xlTWVyZ2VEaXN0cmljdHMgPSAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy50b2dnbGVNZXJnZURpc3RyaWN0cyhldmVudC50YXJnZXQuY2hlY2tlZCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHllYXIgPSB0aGlzLnByb3BzLnllYXI7XHJcbiAgICAgICAgbGV0IHZvdGVzID0gdGhpcy5wcm9wcy52b3Rlcy5maWx0ZXIoKHZvdGUpID0+IHZvdGUuZWxlY3Rpb25ZZWFyID09PSB5ZWFyKTtcclxuICAgICAgICBjb25zdCBkaXN0cmlidXRpb25ZZWFyID0gdGhpcy5wcm9wcy51c2UyMDIxRGlzdHJpYnV0aW9uICYmIHllYXIgPj0gMjAwNSA/IDIwMjEgOiB5ZWFyO1xyXG4gICAgICAgIGxldCBtZXRyaWNzID0gdGhpcy5wcm9wcy5tZXRyaWNzLmZpbHRlcigobWV0cmljKSA9PiBtZXRyaWMuZWxlY3Rpb25ZZWFyID09PSBkaXN0cmlidXRpb25ZZWFyKTtcclxuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gdGhpcy5wcm9wcy5wYXJhbWV0ZXJzO1xyXG5cclxuICAgICAgICBpZiAodm90ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkRGlzdHJpYnV0ZURpc3RyaWN0U2VhdHMoeWVhcikgJiYgZXZlbnQudGFyZ2V0LmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIHZvdGVzID0gbWVyZ2VWb3RlRGlzdHJpY3RzKHZvdGVzLCBkaXN0cmljdE1hcCk7XHJcbiAgICAgICAgICAgICAgICBtZXRyaWNzID0gbWVyZ2VNZXRyaWNEaXN0cmljdHMobWV0cmljcywgZGlzdHJpY3RNYXApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnVwZGF0ZUNhbGN1bGF0aW9uKFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMuY29tcHV0YXRpb25QYXlsb2FkLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldHJpY3MsXHJcbiAgICAgICAgICAgICAgICAgICAgdm90ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVycyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnNldHRpbmdzUGF5bG9hZC5hdXRvQ29tcHV0ZSxcclxuICAgICAgICAgICAgICAgIGZhbHNlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBzaG93VXNlMjAyMURpc3RyaWJ1dGlvbigpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy55ZWFyID49IDIwMDU7XHJcbiAgICB9XHJcblxyXG4gICAgb25Ub2dnbGVVc2UyMDIxRGlzdHJpYnV0aW9uID0gKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xyXG4gICAgICAgIHRoaXMucHJvcHMudG9nZ2xlVXNlMjAyMURpc3RyaWJ1dGlvbihldmVudC50YXJnZXQuY2hlY2tlZCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHllYXIgPSB0aGlzLnByb3BzLnllYXI7XHJcbiAgICAgICAgY29uc3Qgdm90ZXMgPSB0aGlzLnByb3BzLnZvdGVzLmZpbHRlcigodm90ZSkgPT4gdm90ZS5lbGVjdGlvblllYXIgPT09IHllYXIpO1xyXG4gICAgICAgIGNvbnN0IG1ldHJpY3NZZWFyID0gZXZlbnQudGFyZ2V0LmNoZWNrZWQgJiYgeWVhciA+PSAyMDA1ID8gMjAyMSA6IHllYXI7XHJcbiAgICAgICAgY29uc3QgbWV0cmljcyA9IHRoaXMucHJvcHMubWV0cmljcy5maWx0ZXIoKG1ldHJpYykgPT4gbWV0cmljLmVsZWN0aW9uWWVhciA9PT0gbWV0cmljc1llYXIpO1xyXG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB0aGlzLnByb3BzLnBhcmFtZXRlcnM7XHJcblxyXG4gICAgICAgIGlmICh2b3Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMudXBkYXRlQ2FsY3VsYXRpb24oXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5wcm9wcy5jb21wdXRhdGlvblBheWxvYWQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWV0cmljcyxcclxuICAgICAgICAgICAgICAgICAgICB2b3RlcyxcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc2V0dGluZ3NQYXlsb2FkLmF1dG9Db21wdXRlLFxyXG4gICAgICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbHVtbnNcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sdW1uc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sdW1uIG1pbi1jb2x1bW4td2lkdGhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPE5vU2VhdHNDaGVja2JveFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuPXshdGhpcy5zaG93Tm9TZWF0c0NoZWNrYm94KCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93UGFydGllc1dpdGhvdXRTZWF0cz17dGhpcy5wcm9wcy5zaG93UGFydGllc1dpdGhvdXRTZWF0c31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZVNob3dQYXJ0aWVzV2l0aG91dFNlYXRzPXt0aGlzLnByb3BzLnRvZ2dsZVNob3dQYXJ0aWVzV2l0aG91dFNlYXRzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8RmlsdGVyc0NoZWNrYm94XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW49eyF0aGlzLnNob3dGaWx0ZXJzKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93RmlsdGVycz17dGhpcy5wcm9wcy5zaG93RmlsdGVyc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZVNob3dGaWx0ZXJzPXt0aGlzLnByb3BzLnRvZ2dsZVNob3dGaWx0ZXJzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29tcGFyaXNvbkNoZWNrYm94XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW49eyF0aGlzLnNob3dDb21wYXJpc29uKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29tcGFyaXNvbj17dGhpcy5wcm9wcy5zaG93Q29tcGFyaXNvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNvbXBhcmlzb249e3RoaXMucHJvcHMudG9nZ2xlU2hvd0NvbXBhcmlzb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2x1bW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPE1lcmdlRGlzdHJpY3RzQ2hlY2tib3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbj17IXNob3VsZERpc3RyaWJ1dGVEaXN0cmljdFNlYXRzKHRoaXMucHJvcHMueWVhcil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZURpc3RyaWN0cz17dGhpcy5wcm9wcy5tZXJnZURpc3RyaWN0c31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZU1lcmdlRGlzdHJpY3RzPXt0aGlzLm9uVG9nZ2xlTWVyZ2VEaXN0cmljdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxVc2UyMDIxRGlzdHJpYnV0aW9uQ2hlY2tib3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbj17IXRoaXMuc2hvd1VzZTIwMjFEaXN0cmlidXRpb24oKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZTIwMjFEaXN0cmlidXRpb249e3RoaXMucHJvcHMudXNlMjAyMURpc3RyaWJ1dGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZVVzZTIwMjFEaXN0cmlidXRpb249e3RoaXMub25Ub2dnbGVVc2UyMDIxRGlzdHJpYnV0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbHVtblwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sdW1uc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbHVtblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNtYXJ0TnVtZXJpY0lucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuPXshdGhpcy5uZWVkc0RlY2ltYWxzKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImRlY2ltYWxQbGFjZXNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17Mn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW49ezB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4PXsxNn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlZ2VyPXt0cnVlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlcj17ZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJBbnRhbGwgZGVzaW1hbGVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5kZWNpbWFsc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5jaGFuZ2VEZWNpbWFsc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbHVtblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPERpc3Byb3BvcnRpb25hbGl0eVNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbj17IXRoaXMuc2hvd0Rpc3Byb3BvcnRpb25hbGl0eVNlbGVjdCgpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZURpc3Byb3BvcnRpb25hbGl0eUluZGV4PXt0aGlzLnByb3BzLmNoYW5nZURpc3Byb3BvcnRpb25hbGl0eUluZGV4fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3Byb3BvcnRpb25hbGl0eUluZGV4PXt0aGlzLnByb3BzLmRpc3Byb3BvcnRpb25hbGl0eUluZGV4fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcEluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ9e1wiSGVyIGthbiBkdSB2ZWxnZSBtZWxsb20gTG9vc2Vtb3JlLUhhbmJ5cyAoTC1IKSBvZyBHYWxsYWdoZXJzIChMU3EpLlwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsPXtcImh0dHBzOi8vcHJvamVjdC1sYXZpbmlhLmdpdGh1Yi5pby8jRGlzcHJvcG9yc2pvbmFsaXRldHNpbmRla3NcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJ1dHRvblByb3BzLCBCdXR0b24gfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29tbW9uXCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBQcmVzZW50YXRpb25UeXBlIH0gZnJvbSBcIi4uLy4uLy4uL1ByZXNlbnRhdGlvbi9wcmVzZW50YXRpb24tbW9kZWxzXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFByZXNlbnRhdGlvblNlbGVjdGlvbkJ1dHRvblByb3BzIGV4dGVuZHMgQnV0dG9uUHJvcHMge1xyXG4gICAgcHJlc2VudGF0aW9uU2VsZWN0ZWQ6IFByZXNlbnRhdGlvblR5cGU7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQcmVzZW50YXRpb25TZWxlY3Rpb25CdXR0b24gZXh0ZW5kcyBCdXR0b248UHJlc2VudGF0aW9uU2VsZWN0aW9uQnV0dG9uUHJvcHM+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcmVzZW50YXRpb25TZWxlY3Rpb25CdXR0b25Qcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8YnV0dG9uIHRpdGxlPXt0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlMYWJlbH0gb25DbGljaz17dGhpcy5wcm9wcy5vblByZXNzfSBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfT5cclxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLnRpdGxlfVxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEdsb2JhbEFjdGlvblR5cGUgfSBmcm9tIFwiLi4vcmVkdWNlcnMvZ2xvYmFsLWFjdGlvbnNcIjtcclxuaW1wb3J0IHsgVWlTdGF0ZSwgZGVmYXVsdFN0YXRlIH0gZnJvbSBcIi4vdWktc3RhdGVcIjtcclxuaW1wb3J0IHsgVWlBY3Rpb24sIFVpQWN0aW9uVHlwZSB9IGZyb20gXCIuL3VpLWFjdGlvbnNcIjtcclxuaW1wb3J0IHsgRnVsbE5vdGlmaWNhdGlvbkRhdGEgfSBmcm9tIFwiLi9Ob3RpZmljYXRpb25zXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdWkoc3RhdGU6IFVpU3RhdGUgPSBkZWZhdWx0U3RhdGUsIGFjdGlvbjogVWlBY3Rpb24pOiBVaVN0YXRlIHtcclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICBjYXNlIFVpQWN0aW9uVHlwZS5UT0dHTEVfSEFNQlVSR0VSX0VYUEFOREVEOiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIGhhbWJ1cmdlckV4cGFuZGVkOiBhY3Rpb24uaGFtYnVyZ2VyRXhwYW5kZWQsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgVWlBY3Rpb25UeXBlLkhJREVfVFVUT1JJQUw6IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgc2hvd1R1dG9yaWFsOiBmYWxzZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBVaUFjdGlvblR5cGUuQUREX05PVElGSUNBVElPTjoge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdOb3RpZmljYXRpb25JZCA9IHN0YXRlLm5vdGlmaWNhdGlvbklkICsgMTtcclxuICAgICAgICAgICAgY29uc3QgZnVsbE5vdGlmaWNhdGlvbkRhdGE6IEZ1bGxOb3RpZmljYXRpb25EYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgaWQ6IG5ld05vdGlmaWNhdGlvbklkLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogYWN0aW9uLm5vdGlmaWNhdGlvbi50ZXh0LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogYWN0aW9uLm5vdGlmaWNhdGlvbi50eXBlLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29waWVkTm90aWZpY2F0aW9ucyA9IFsuLi5zdGF0ZS5ub3RpZmljYXRpb25zXTtcclxuICAgICAgICAgICAgY29waWVkTm90aWZpY2F0aW9ucy5wdXNoKGZ1bGxOb3RpZmljYXRpb25EYXRhKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uczogY29waWVkTm90aWZpY2F0aW9ucyxcclxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbklkOiBuZXdOb3RpZmljYXRpb25JZCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBVaUFjdGlvblR5cGUuUkVNT1ZFX05PVElGSUNBVElPTjoge1xyXG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJlZE5vdGlmaWNhdGlvbnMgPSBzdGF0ZS5ub3RpZmljYXRpb25zLmZpbHRlcigobm90aWZpY2F0aW9uKSA9PiBub3RpZmljYXRpb24uaWQgIT09IGFjdGlvbi5pZCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbnM6IGZpbHRlcmVkTm90aWZpY2F0aW9ucyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBHbG9iYWxBY3Rpb25UeXBlLkNMRUFSX1NUQVRFOiB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0U3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgRWxlY3Rpb25PdmVydmlldywgRGlzdHJpY3RPdmVydmlldywgU2VhdERpc3RyaWJ1dGlvbiwgU2luZ2xlRGlzdHJpY3QsIExldmVsbGluZ1NlYXRPdmVydmlldyB9IGZyb20gXCIuXCI7XHJcbmltcG9ydCB7XHJcbiAgICBnZXREaXN0cmljdFRhYmxlRGF0YSxcclxuICAgIGdldFBhcnR5VGFibGVEYXRhLFxyXG4gICAgZ2V0U2VhdERpc3RyaWJ1dGlvbkRhdGEsXHJcbiAgICBnZXRTZWF0c1BlclBhcnR5RGF0YSxcclxuICAgIHJvdW5kUGFydHlSZXN1bHRzLFxyXG4gICAgZmxhdHRlblBhcnR5UmVzdFF1b3RpZW50cyxcclxuICAgIHJlbW92ZVNlYXREdXBsaWNhdGVzLFxyXG4gICAgc29ydFNlYXRzQnlOdW1iZXIsXHJcbiAgICBnZXRSb3VuZHNBc3NpZ25lZFNlYXRzLFxyXG4gICAgZ2V0TG9jYWxTZWF0RGlzdHJpYnV0aW9uLFxyXG59IGZyb20gXCIuL3ByZXNlbnRhdGlvbi11dGlsaXRpZXNcIjtcclxuaW1wb3J0IHsgUmVtYWluZGVyUXVvdGllbnRzIH0gZnJvbSBcIi4vUmVtYWluZGVyUXVvdGllbnRzL1JlbWFpbmRlclF1b3RpZW50c1wiO1xyXG5pbXBvcnQgeyB0b01heCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvcmVkdWNlXCI7XHJcbmltcG9ydCB7IExhZ3VlRGhvbnRSZXN1bHQsIFBhcnR5UmVzdWx0LCBEaXN0cmljdFJlc3VsdCwgQWxnb3JpdGhtVHlwZSB9IGZyb20gXCIuLi8uLi9jb21wdXRhdGlvblwiO1xyXG5pbXBvcnQgeyBQcmVzZW50YXRpb25UeXBlLCBEaXNwcm9wb3J0aW9uYWxpdHlJbmRleCB9IGZyb20gXCIuL3ByZXNlbnRhdGlvbi1tb2RlbHNcIjtcclxuaW1wb3J0IHsgRWxlY3Rpb25Db21wYXJpc29uIH0gZnJvbSBcIi4vRWxlY3Rpb25PdmVydmlldy9FbGVjdGlvbkNvbXBhcmlzb25cIjtcclxuaW1wb3J0IHsgY2hlY2tFeGhhdXN0aXZlbHkgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFByZXNlbnRhdGlvblByb3BzIHtcclxuICAgIGN1cnJlbnRQcmVzZW50YXRpb246IFByZXNlbnRhdGlvblR5cGU7XHJcbiAgICBkaXN0cmljdFNlbGVjdGVkOiBzdHJpbmc7XHJcbiAgICBkZWNpbWFsczogbnVtYmVyO1xyXG4gICAgc2hvd1BhcnRpZXNXaXRob3V0U2VhdHM6IGJvb2xlYW47XHJcbiAgICByZXN1bHRzOiBMYWd1ZURob250UmVzdWx0O1xyXG4gICAgZGlzcHJvcG9ydGlvbmFsaXR5SW5kZXg6IERpc3Byb3BvcnRpb25hbGl0eUluZGV4O1xyXG4gICAgY29tcGFyaXNvblBhcnR5UmVzdWx0czogUGFydHlSZXN1bHRbXTtcclxuICAgIHNob3dDb21wYXJpc29uOiBib29sZWFuO1xyXG4gICAgdGhyZXNob2xkOiBudW1iZXI7XHJcbiAgICB5ZWFyOiBudW1iZXI7XHJcbiAgICBhbGdvcml0aG06IEFsZ29yaXRobVR5cGU7XHJcbiAgICBzaG93RmlsdGVyczogYm9vbGVhbjtcclxuICAgIHNlbGVjdERpc3RyaWN0OiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4gdm9pZDtcclxuICAgIHBhcnR5TWFwOiBfLkRpY3Rpb25hcnk8c3RyaW5nPjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFByZXNlbnRhdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcmVzZW50YXRpb25Qcm9wcywge30+IHtcclxuICAgIGdldFBhcnR5VGFibGVEYXRhKHBhcnR5UmVzdWx0czogUGFydHlSZXN1bHRbXSk6IFBhcnR5UmVzdWx0W10ge1xyXG4gICAgICAgIHJldHVybiBnZXRQYXJ0eVRhYmxlRGF0YShwYXJ0eVJlc3VsdHMsIHRoaXMucHJvcHMuc2hvd1BhcnRpZXNXaXRob3V0U2VhdHMsIHRoaXMucHJvcHMuZGVjaW1hbHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERpc3RyaWN0VGFibGVEYXRhKCk6IERpc3RyaWN0UmVzdWx0W10ge1xyXG4gICAgICAgIHJldHVybiBnZXREaXN0cmljdFRhYmxlRGF0YSh0aGlzLnByb3BzLnJlc3VsdHMuZGlzdHJpY3RSZXN1bHRzLCB0aGlzLnByb3BzLmRlY2ltYWxzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTZWF0RGlzdHJpYnV0aW9uRGF0YSgpOiBEaXN0cmljdFJlc3VsdFtdIHtcclxuICAgICAgICByZXR1cm4gZ2V0U2VhdERpc3RyaWJ1dGlvbkRhdGEoXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMucmVzdWx0cy5kaXN0cmljdFJlc3VsdHMsXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMucmVzdWx0cy5wYXJ0eVJlc3VsdHMsXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuc2hvd1BhcnRpZXNXaXRob3V0U2VhdHNcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldExvY2FsU2VhdERpc3RyaWJ1dGlvbigpOiBEaXN0cmljdFJlc3VsdFtdIHtcclxuICAgICAgICByZXR1cm4gZ2V0TG9jYWxTZWF0RGlzdHJpYnV0aW9uKHRoaXMucHJvcHMucmVzdWx0cy5kaXN0cmljdFJlc3VsdHMsIHRoaXMucHJvcHMuc2hvd1BhcnRpZXNXaXRob3V0U2VhdHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNlYXRzUGVyUGFydHlEYXRhKCk6IFBhcnR5UmVzdWx0W10ge1xyXG4gICAgICAgIHJldHVybiBnZXRTZWF0c1BlclBhcnR5RGF0YSh0aGlzLnByb3BzLnJlc3VsdHMucGFydHlSZXN1bHRzLCB0aGlzLnByb3BzLnNob3dQYXJ0aWVzV2l0aG91dFNlYXRzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTaW5nbGVEaXN0cmljdERhdGEoKTogRGlzdHJpY3RSZXN1bHRbXSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGdldERpc3RyaWN0VGFibGVEYXRhKHRoaXMuZ2V0TG9jYWxTZWF0RGlzdHJpYnV0aW9uKCksIHRoaXMucHJvcHMuZGVjaW1hbHMpO1xyXG4gICAgICAgIGNvbnN0IHJvdW5kZWREYXRhOiBEaXN0cmljdFJlc3VsdFtdID0gW107XHJcbiAgICAgICAgZGF0YS5mb3JFYWNoKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgcm91bmRlZERhdGEucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAuLi5yZXN1bHQsXHJcbiAgICAgICAgICAgICAgICBwYXJ0eVJlc3VsdHM6IHJvdW5kUGFydHlSZXN1bHRzKHJlc3VsdC5wYXJ0eVJlc3VsdHMsIHRoaXMucHJvcHMuZGVjaW1hbHMpLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcm91bmRlZERhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGFydHlDb2RlcygpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgY29uc3QgcGFydHlDb2Rlczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICB0aGlzLnByb3BzLnJlc3VsdHMucGFydHlSZXN1bHRzLmZvckVhY2goKHBhcnR5KSA9PiB7XHJcbiAgICAgICAgICAgIHBhcnR5Q29kZXMucHVzaChwYXJ0eS5wYXJ0eUNvZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwYXJ0eUNvZGVzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBhcnR5TmFtZXMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGNvbnN0IHBhcnR5TmFtZXM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgdGhpcy5wcm9wcy5yZXN1bHRzLnBhcnR5UmVzdWx0cy5mb3JFYWNoKChwYXJ0eSkgPT4ge1xyXG4gICAgICAgICAgICBwYXJ0eU5hbWVzLnB1c2gocGFydHkucGFydHlOYW1lKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcGFydHlOYW1lcztcclxuICAgIH1cclxuXHJcbiAgICBnZXREaXN0cmljdHMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGNvbnN0IGRpc3RyaWN0czogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICB0aGlzLnByb3BzLnJlc3VsdHMuZGlzdHJpY3RSZXN1bHRzLmZvckVhY2goKGRpc3RyaWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3RyaWN0cy5wdXNoKGRpc3RyaWN0Lm5hbWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBkaXN0cmljdHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0V2lkZXN0U3RyaW5nV2lkdGgoc3RyaW5nczogc3RyaW5nW10gPSBbXSk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHN0cmluZ3MubWFwKCh2YWx1ZSkgPT4gdmFsdWUubGVuZ3RoKS5yZWR1Y2UodG9NYXgsIDApITtcclxuICAgIH1cclxuXHJcbiAgICBnZXRMZXZlbGxpbmdTZWF0cygpIHtcclxuICAgICAgICBjb25zdCBmbGF0dGVuZWQgPSBmbGF0dGVuUGFydHlSZXN0UXVvdGllbnRzKHRoaXMucHJvcHMucmVzdWx0cy5sZXZlbGluZ1NlYXREaXN0cmlidXRpb24pO1xyXG4gICAgICAgIGNvbnN0IGFzc2lnbmVkU2VhdHMgPSBnZXRSb3VuZHNBc3NpZ25lZFNlYXRzKGZsYXR0ZW5lZCk7XHJcbiAgICAgICAgY29uc3Qgbm9EdXBsaWNhdGVTZWF0cyA9IHJlbW92ZVNlYXREdXBsaWNhdGVzKGFzc2lnbmVkU2VhdHMpO1xyXG4gICAgICAgIHJldHVybiBzb3J0U2VhdHNCeU51bWJlcihub0R1cGxpY2F0ZVNlYXRzKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnByb3BzLmN1cnJlbnRQcmVzZW50YXRpb24pIHtcclxuICAgICAgICAgICAgY2FzZSBQcmVzZW50YXRpb25UeXBlLkVsZWN0aW9uVGFibGU6XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5zaG93Q29tcGFyaXNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxFbGVjdGlvbkNvbXBhcmlzb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmlzb25QYXJ0eVJlc3VsdHM9e3RoaXMuZ2V0UGFydHlUYWJsZURhdGEodGhpcy5wcm9wcy5jb21wYXJpc29uUGFydHlSZXN1bHRzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJ0eVJlc3VsdHM9e3RoaXMuZ2V0UGFydHlUYWJsZURhdGEodGhpcy5wcm9wcy5yZXN1bHRzLnBhcnR5UmVzdWx0cyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPEVsZWN0aW9uT3ZlcnZpZXdcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFydHlSZXN1bHRzPXt0aGlzLnByb3BzLnJlc3VsdHMucGFydHlSZXN1bHRzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJpc29uUGFydHlSZXN1bHRzPXt0aGlzLnByb3BzLmNvbXBhcmlzb25QYXJ0eVJlc3VsdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2ltYWxzPXt0aGlzLnByb3BzLmRlY2ltYWxzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93UGFydGllc1dpdGhvdXRTZWF0cz17dGhpcy5wcm9wcy5zaG93UGFydGllc1dpdGhvdXRTZWF0c31cclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFydHlOYW1lV2lkdGg9e3RoaXMuZ2V0V2lkZXN0U3RyaW5nV2lkdGgodGhpcy5nZXRQYXJ0eU5hbWVzKCkpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwcm9wb3J0aW9uYWxpdHlJbmRleD17dGhpcy5wcm9wcy5kaXNwcm9wb3J0aW9uYWxpdHlJbmRleH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyZXNob2xkPXt0aGlzLnByb3BzLnRocmVzaG9sZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0ZpbHRlcnM9e3RoaXMucHJvcHMuc2hvd0ZpbHRlcnN9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNhc2UgUHJlc2VudGF0aW9uVHlwZS5EaXN0cmljdFRhYmxlOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICA8RGlzdHJpY3RPdmVydmlld1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXN0cmljdFJlc3VsdHM9e3RoaXMuZ2V0RGlzdHJpY3RUYWJsZURhdGEoKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdHJpY3RXaWR0aD17dGhpcy5nZXRXaWRlc3RTdHJpbmdXaWR0aCh0aGlzLmdldERpc3RyaWN0cygpKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVjaW1hbHM9e3RoaXMucHJvcHMuZGVjaW1hbHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobT17dGhpcy5wcm9wcy5hbGdvcml0aG19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnR5TWFwPXt0aGlzLnByb3BzLnBhcnR5TWFwfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBjYXNlIFByZXNlbnRhdGlvblR5cGUuU2VhdERpc3RyaWJ1dGlvbjpcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPFNlYXREaXN0cmlidXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdHJpY3RSZXN1bHRzPXt0aGlzLmdldFNlYXREaXN0cmlidXRpb25EYXRhKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RyaWN0V2lkdGg9e3RoaXMuZ2V0V2lkZXN0U3RyaW5nV2lkdGgodGhpcy5nZXREaXN0cmljdHMoKSl9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNhc2UgUHJlc2VudGF0aW9uVHlwZS5TaW5nbGVEaXN0cmljdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPFNpbmdsZURpc3RyaWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RyaWN0U2VsZWN0ZWQ9e3RoaXMucHJvcHMuZGlzdHJpY3RTZWxlY3RlZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdHJpY3RSZXN1bHRzPXt0aGlzLmdldFNpbmdsZURpc3RyaWN0RGF0YSgpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNpbWFscz17dGhpcy5wcm9wcy5kZWNpbWFsc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcHJvcG9ydGlvbmFsaXR5SW5kZXg9e3RoaXMucHJvcHMuZGlzcHJvcG9ydGlvbmFsaXR5SW5kZXh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdERpc3RyaWN0PXt0aGlzLnByb3BzLnNlbGVjdERpc3RyaWN0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGdvcml0aG09e3RoaXMucHJvcHMuYWxnb3JpdGhtfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0eU1hcD17dGhpcy5wcm9wcy5wYXJ0eU1hcH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY2FzZSBQcmVzZW50YXRpb25UeXBlLlJlbWFpbmRlclF1b3RpZW50czpcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPFJlbWFpbmRlclF1b3RpZW50c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXN0cmljdFJlc3VsdHM9e3RoaXMuZ2V0U2VhdERpc3RyaWJ1dGlvbkRhdGEoKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWxsaW5nU2VhdHM9e3RoaXMuZ2V0TGV2ZWxsaW5nU2VhdHMoKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxRdW90aWVudHM9e3RoaXMucHJvcHMucmVzdWx0cy5maW5hbFF1b3RpZW50c31cclxuICAgICAgICAgICAgICAgICAgICAgICAgeWVhcj17dGhpcy5wcm9wcy55ZWFyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNpbWFscz17dGhpcy5wcm9wcy5kZWNpbWFsc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1BhcnRpZXNXaXRob3V0U2VhdHM9e3RoaXMucHJvcHMuc2hvd1BhcnRpZXNXaXRob3V0U2VhdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobT17dGhpcy5wcm9wcy5hbGdvcml0aG19XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNhc2UgUHJlc2VudGF0aW9uVHlwZS5MZXZlbGxpbmdTZWF0czpcclxuICAgICAgICAgICAgICAgIHJldHVybiA8TGV2ZWxsaW5nU2VhdE92ZXJ2aWV3IGxldmVsbGluZ1NlYXRRdW90aWVudHM9e3RoaXMucHJvcHMucmVzdWx0cy5sZXZlbGluZ1NlYXREaXN0cmlidXRpb259IC8+O1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY2hlY2tFeGhhdXN0aXZlbHkodGhpcy5wcm9wcy5jdXJyZW50UHJlc2VudGF0aW9uKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBSZWFjdFRhYmxlLCB7IENvbHVtbiB9IGZyb20gXCJyZWFjdC10YWJsZVwiO1xyXG5pbXBvcnQgeyBMZXZlbGluZ1NlYXQsIERpc3RyaWN0UmVzdWx0LCBEaXN0cmljdFF1b3RpZW50cywgQWxnb3JpdGhtVHlwZSB9IGZyb20gXCIuLi8uLi8uLi9jb21wdXRhdGlvblwiO1xyXG5pbXBvcnQgeyBub3J3ZWdpYW4gfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL3J0XCI7XHJcbmltcG9ydCB7IGlzUXVvdGllbnRBbGdvcml0aG0gfSBmcm9tIFwiLi4vLi4vLi4vY29tcHV0YXRpb24vbG9naWNcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVtYWluZGVyUXVvdGllbnRzUHJvcHMge1xyXG4gICAgZGlzdHJpY3RSZXN1bHRzOiBEaXN0cmljdFJlc3VsdFtdO1xyXG4gICAgbGV2ZWxsaW5nU2VhdHM6IExldmVsaW5nU2VhdFtdO1xyXG4gICAgZmluYWxRdW90aWVudHM6IERpc3RyaWN0UXVvdGllbnRzW107XHJcbiAgICB5ZWFyOiBudW1iZXI7XHJcbiAgICBkZWNpbWFsczogbnVtYmVyO1xyXG4gICAgc2hvd1BhcnRpZXNXaXRob3V0U2VhdHM6IGJvb2xlYW47XHJcbiAgICBhbGdvcml0aG06IEFsZ29yaXRobVR5cGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJdGVyYXRlcyB0aHJvdWdoIGRpc3RyaWN0UmVzdWx0cyB0byBmbGF0dGVuIGFuZCBmaWx0ZXIgaXQgaW50byBhIG1vcmVcclxuICogdGFibGUtZnJpZW5kbHkgZm9ybSBzcGVjaWZpYyB0byBSZW1haW5kZXJRdW90aWVudHNcclxuICpcclxuICogQHBhcmFtIGRpc3RyaWN0UmVzdWx0cyByZXN1bHRzIG9mIGEgY29tcHV0YXRpb24gaGF2aW5nIGJlZW4gcnVuIG9uIGFuXHJcbiAqIGVsZWN0aW9uXHJcbiAqIEByZXR1cm5zIGFuIGFycmF5IG9mIGRhdGEgcmVwcmVzZW50aW5nIHRoZSBsYXN0IHJlbWFpbmRlciBmcm9tIGEgU2FpbnRlLUxhZ8O8ZSxcclxuICogRCdIb25kdCwgTGFyZ2VzdCBmcmFjdGlvbiAoSGFyZSkgb3IgTGFyZ2VzdCBmcmFjdGlvbiAoRHJvb3ApIGNhbGN1bGF0aW9uIGluIGEgZ2l2ZW4gZGlzdHJpY3QgZm9yIGEgZ2l2ZW4gcGFydHksXHJcbiAqIGFuZCB3aGV0aGVyIG9yIG5vdCB0aGV5IHdvbiBhIGxldmVsbGluZyBzZWF0IGluIHRoYXQgZGlzdHJpY3QtcGFydHlcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZW1haW5kZXJRdW90aWVudHMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UmVtYWluZGVyUXVvdGllbnRzUHJvcHM+IHtcclxuICAgIG1ha2VEYXRhKCk6IERpc3RyaWN0UXVvdGllbnRzW10ge1xyXG4gICAgICAgIGNvbnN0IHdvblNlYXQ6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xyXG4gICAgICAgIGNvbnN0IG1vZGlmaWVkID0gdGhpcy5wcm9wcy5kaXN0cmljdFJlc3VsdHM7XHJcbiAgICAgICAgbGV0IG1vZGlmaWVkUXVvdGllbnRzOiBEaXN0cmljdFF1b3RpZW50c1tdID0gW107XHJcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLnNob3dQYXJ0aWVzV2l0aG91dFNlYXRzKSB7XHJcbiAgICAgICAgICAgIG1vZGlmaWVkLmZvckVhY2goKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnBhcnR5UmVzdWx0c1xyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHJlc3VsdCkgPT4gcmVzdWx0LnRvdGFsU2VhdHMgPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd29uU2VhdC5hZGQocmVzdWx0LnBhcnR5Q29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5maW5hbFF1b3RpZW50cy5mb3JFYWNoKChkaXN0cmljdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGlzdHJpY3RRdW90aWVudHM6IERpc3RyaWN0UXVvdGllbnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3RyaWN0OiBkaXN0cmljdC5kaXN0cmljdCxcclxuICAgICAgICAgICAgICAgICAgICBsZXZlbGxpbmdTZWF0Um91bmRzOiBkaXN0cmljdC5sZXZlbGxpbmdTZWF0Um91bmRzLmZpbHRlcigocGFydHkpID0+IHdvblNlYXQuaGFzKHBhcnR5LnBhcnR5Q29kZSkpLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIG1vZGlmaWVkUXVvdGllbnRzLnB1c2goZGlzdHJpY3RRdW90aWVudHMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtb2RpZmllZFF1b3RpZW50cyA9IHRoaXMucHJvcHMuZmluYWxRdW90aWVudHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbW9kaWZpZWRRdW90aWVudHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29sdW1ucygpOiBDb2x1bW5bXSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMubWFrZURhdGEoKTtcclxuICAgICAgICBjb25zdCBjb2x1bW5zOiBDb2x1bW5bXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFbMF0ubGV2ZWxsaW5nU2VhdFJvdW5kcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZGF0YVswXS5sZXZlbGxpbmdTZWF0Um91bmRzW2ldO1xyXG4gICAgICAgICAgICBjb2x1bW5zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgSGVhZGVyOiBlbGVtZW50LnBhcnR5Q29kZSxcclxuICAgICAgICAgICAgICAgIGFjY2Vzc29yOiBgbGV2ZWxsaW5nU2VhdFJvdW5kc1ske2l9XWAsXHJcbiAgICAgICAgICAgICAgICBtaW5XaWR0aDogODAsXHJcbiAgICAgICAgICAgICAgICBDZWxsOiAocm93KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvdy52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBxdW90aWVudCA9IHJvdy52YWx1ZS5xdW90aWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlQWRqdXN0ZWRRdW90aWVudCA9IHRoaXMucHJvcHMueWVhciA+PSAyMDA1O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlQWRqdXN0ZWRRdW90aWVudCAmJiBpc1F1b3RpZW50QWxnb3JpdGhtKHRoaXMucHJvcHMuYWxnb3JpdGhtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVvdGllbnQgPSBxdW90aWVudCAqIDEwMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzUXVvdGllbnRBbGdvcml0aG0odGhpcy5wcm9wcy5hbGdvcml0aG0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdW90aWVudCA9IHF1b3RpZW50IC8gMTAwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtyb3cudmFsdWUud29uTGV2ZWxsaW5nU2VhdCA/IFwiaGFzLWJhY2tncm91bmQtZGFyayBoYXMtdGV4dC13aGl0ZVwiIDogXCJcIn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge051bWJlcihxdW90aWVudCkudG9GaXhlZCh0aGlzLnByb3BzLmRlY2ltYWxzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeygwKS50b0ZpeGVkKHRoaXMucHJvcHMuZGVjaW1hbHMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNvcnRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbHVtbnMuc29ydCgoYTogQ29sdW1uLCBiOiBDb2x1bW4pID0+IHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhLkhlYWRlciA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgYi5IZWFkZXIgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhLkhlYWRlci5sb2NhbGVDb21wYXJlKGIuSGVhZGVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29sdW1ucy51bnNoaWZ0KHtcclxuICAgICAgICAgICAgSGVhZGVyOiBcIkZ5bGtlclwiLFxyXG4gICAgICAgICAgICBhY2Nlc3NvcjogXCJkaXN0cmljdFwiLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gY29sdW1ucztcclxuICAgIH1cclxuXHJcbiAgICBnZXRBZGp1c3RtZW50KHllYXI6IG51bWJlciwgYWxnb3JpdGhtOiBBbGdvcml0aG1UeXBlKSB7XHJcbiAgICAgICAgY29uc3QgZW5kaW5nID1cclxuICAgICAgICAgICAgXCJvZyByZXByZXNlbnRlcmVyIHZlcmRpZW4gdmVkIHV0ZGVsaW5nIGF2IHNpc3RlIGRpc3RyaWt0c21hbmRhdCBpIGZ5bGtldCBmb3IgZGV0IHJlc3Bla3RpdmUgcGFydGlldC5cIjtcclxuICAgICAgICBjb25zdCB1c2VBZGp1c3RlZFF1b3RpZW50ID0geWVhciA+PSAyMDA1O1xyXG4gICAgICAgIGlmICh1c2VBZGp1c3RlZFF1b3RpZW50ICYmIGlzUXVvdGllbnRBbGdvcml0aG0oYWxnb3JpdGhtKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCIgZXIgZ2FuZ2V0IG1lZCAxMCAwMDAgXCIgKyBlbmRpbmc7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc1F1b3RpZW50QWxnb3JpdGhtKGFsZ29yaXRobSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiIGVyIGRlbHQgcMOlIDEwIDAwMCBcIiArIGVuZGluZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBcIiBlciBmb3JkZWxpbmdzdGFsbGV0IHNvbSB0aWxzaWVyIGh2b3IgbWFuZ2UgZGlzdHJpa3RzbWFuZGF0ZXIgcGFydGlldCBza2FsIHZpbm5lIGkgZGV0IHJlc3Bla3RpdmUgZnlsa2V0LlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5tYWtlRGF0YSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQgaGFzLWJhY2tncm91bmQtcHJpbWFyeSBoYXMtdGV4dC1saWdodCBpcy1zaXplLTVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJjYXJkLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgTWFya2VydGUgY2VsbGVyIGluZGlrZXJlciBhdCBwYXJ0aWV0IGhhciB2dW5uZXQgZXQgdXRqZXZuaW5nc21hbmRhdCBpIGRldCBrb3JyZXNwb25kZXJlbmRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ5bGtldC4gS3ZvdGllbnRlbmVcclxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuZ2V0QWRqdXN0bWVudCh0aGlzLnByb3BzLnllYXIsIHRoaXMucHJvcHMuYWxnb3JpdGhtKX1cclxuICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8UmVhY3RUYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImhhcy10ZXh0LWNlbnRlcmVkXCJcclxuICAgICAgICAgICAgICAgICAgICBkYXRhPXtkYXRhfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnM9e3RoaXMuZ2V0Q29sdW1ucygpfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQYWdlU2l6ZT17MTB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd1BhZ2VTaXplT3B0aW9ucz17ZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgey4uLm5vcndlZ2lhbn1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgU29ydGVkUmV2ZXJzZURpY3Qge1xyXG4gICAgcmV2ZXJzZURpY3Q6IEtleVZhbHVlUGFpcltdID0gW107XHJcblxyXG4gICAgaW5zZXJ0KHBhaXI6IEtleVZhbHVlUGFpcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmV2ZXJzZURpY3QucHVzaChwYWlyKTtcclxuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLnJldmVyc2VEaWN0Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMucmV2ZXJzZURpY3RbaW5kZXhdO1xyXG4gICAgICAgIHdoaWxlIChpbmRleCA+IDAgJiYgaXRlbS52YWx1ZSA+IHRoaXMucmV2ZXJzZURpY3RbaW5kZXggLSAxXS52YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJldmVyc2VEaWN0W2luZGV4XSA9IHRoaXMucmV2ZXJzZURpY3RbaW5kZXggLSAxXTtcclxuICAgICAgICAgICAgaW5kZXggLT0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZXZlcnNlRGljdFtpbmRleF0gPSBpdGVtO1xyXG4gICAgfVxyXG5cclxuICAgIHBvcFRvcCgpOiBLZXlWYWx1ZVBhaXJbXSB7XHJcbiAgICAgICAgY29uc3QgbWF4VmFsdWUgPSB0aGlzLnJldmVyc2VEaWN0WzBdLnZhbHVlO1xyXG4gICAgICAgIGxldCBlbnRyaWVzVGllZFRvTWF4VmFsdWUgPSAwO1xyXG5cclxuICAgICAgICB3aGlsZSAoXHJcbiAgICAgICAgICAgIGVudHJpZXNUaWVkVG9NYXhWYWx1ZSA8IHRoaXMucmV2ZXJzZURpY3QubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIHRoaXMucmV2ZXJzZURpY3RbZW50cmllc1RpZWRUb01heFZhbHVlXS52YWx1ZSA9PT0gbWF4VmFsdWVcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgZW50cmllc1RpZWRUb01heFZhbHVlKys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0b3AgPSB0aGlzLnJldmVyc2VEaWN0LnNsaWNlKDAsIGVudHJpZXNUaWVkVG9NYXhWYWx1ZSk7XHJcbiAgICAgICAgdGhpcy5yZXZlcnNlRGljdCA9IHRoaXMucmV2ZXJzZURpY3Quc2xpY2UoZW50cmllc1RpZWRUb01heFZhbHVlLCB0aGlzLnJldmVyc2VEaWN0Lmxlbmd0aCk7XHJcbiAgICAgICAgcmV0dXJuIHRvcDtcclxuICAgIH1cclxuXHJcbiAgICBsZW5ndGgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlRGljdC5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpbnQoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coWy4uLnRoaXMucmV2ZXJzZURpY3RdKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBLZXlWYWx1ZVBhaXIge1xyXG4gICAga2V5OiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogbnVtYmVyO1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBQcmVzZW50YXRpb25UeXBlIH0gZnJvbSBcIi4uLy4uL1ByZXNlbnRhdGlvbi9wcmVzZW50YXRpb24tbW9kZWxzXCI7XHJcbmltcG9ydCB7IHNlbGVjdGlvbkxvb2t1cCB9IGZyb20gXCIuL3ByZXNlbnRhdGlvbi1zZWxlY3Rpb24tdXRpbGl0aWVzXCI7XHJcbmltcG9ydCB7IFRvb2x0aXBJbmZvUmlnaHQgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uXCI7XHJcblxyXG5jb25zdCBXSUtJVVJMID0gcHJvY2Vzcy5lbnYuV0lLSTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHJlc2VudGF0aW9uU2VsZWN0aW9uUHJvcHMge1xyXG4gICAgY2hhbmdlU2VsZWN0aW9uPzogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MU2VsZWN0RWxlbWVudD4pID0+IHZvaWQ7XHJcbiAgICBjdXJyZW50U2VsZWN0aW9uPzogUHJlc2VudGF0aW9uVHlwZTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFByZXNlbnRhdGlvblNlbGVjdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcmVzZW50YXRpb25TZWxlY3Rpb25Qcm9wcz4ge1xyXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wczogUHJlc2VudGF0aW9uU2VsZWN0aW9uUHJvcHMgPSB7XHJcbiAgICAgICAgY3VycmVudFNlbGVjdGlvbjogUHJlc2VudGF0aW9uVHlwZS5FbGVjdGlvblRhYmxlLFxyXG4gICAgfTtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcmVzZW50YXRpb25TZWxlY3Rpb25Qcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTZWxlY3Rpb25PcHRpb25zID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBzZWxlY3Rpb25Mb29rdXAubWFwKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICA8b3B0aW9uIGtleT17aXRlbS50eXBlfSB2YWx1ZT17aXRlbS50eXBlfT5cclxuICAgICAgICAgICAgICAgICAgICB7aXRlbS5kaXNwbGF5TmFtZX1cclxuICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRvb2x0aXBJbmZvUmlnaHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dD17XCJUcnlrayBww6UgZGV0dGUgaWtvbmV0IGZvciDDpSBsZXNlIG9tIG92ZXJzaWt0ZW4uXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybD17V0lLSVVSTD8uY29uY2F0KFwiI1Zpc25pbmdcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbGVjdCBpcy1wcmltYXJ5IGlzLWZ1bGx3aWR0aCBpcy1tZWRpdW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMuY2hhbmdlU2VsZWN0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMuY3VycmVudFNlbGVjdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXtcInByZXNlbnRhdGlvbl9zZWxlY3RcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuZ2V0U2VsZWN0aW9uT3B0aW9ucygpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFN0b3JlLCBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlIH0gZnJvbSBcInJlZHV4XCI7XHJcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCIuLi9taWRkbGV3YXJlXCI7XHJcbmltcG9ydCB7IFJvb3RTdGF0ZSwgcm9vdFJlZHVjZXIgfSBmcm9tIFwiLi4vcmVkdWNlcnNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVTdG9yZShoaXN0b3J5OiBIaXN0b3J5LCBpbml0aWFsU3RhdGU/OiBSb290U3RhdGUpOiBTdG9yZTxSb290U3RhdGU+IHtcclxuICAgIGxldCBtaWRkbGV3YXJlID0gYXBwbHlNaWRkbGV3YXJlKCk7XHJcblxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIG1pZGRsZXdhcmUgPSBhcHBseU1pZGRsZXdhcmUobG9nZ2VyKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJvb3RSZWR1Y2VyLCBpbml0aWFsU3RhdGUsIG1pZGRsZXdhcmUpO1xyXG5cclxuICAgIGlmIChtb2R1bGUuaG90KSB7XHJcbiAgICAgICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuLi9yZWR1Y2Vyc1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRSZWR1Y2VyID0gcmVxdWlyZShcIi4uL3JlZHVjZXJzXCIpO1xyXG4gICAgICAgICAgICBzdG9yZS5yZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHN0b3JlO1xyXG59XHJcblxyXG5leHBvcnQgKiBmcm9tIFwiLi9sb2NhbC1zdG9yYWdlXCI7XHJcbiIsIi8qKlxyXG4gKlxyXG4gKiBBZGRzIGFuIGVsZW1lbnQgdG8gdGhlIGFycmF5IGFzc29jaWF0ZWQgd2l0aCBhIGtleSwgb3IgY3JlYXRlcyBhIG5ldyBhcnJheSBpZiBvbmUgZG9lcyBub3QgZXhpc3QgeWV0LlxyXG4gKlxyXG4gKiBAcGFyYW0ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRoZSB2YWx1ZSB3aGljaCB3aWxsIGJlIGFkZGVkXHJcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1hcEFkZDxUPihtYXA6IE1hcDxzdHJpbmcsIFRbXT4sIGtleTogc3RyaW5nLCB2YWx1ZTogVCk6IE1hcDxzdHJpbmcsIFRbXT4ge1xyXG4gICAgY29uc3QgbmV3TWFwID0gbmV3IE1hcChtYXAuZW50cmllcygpKTtcclxuICAgIGlmIChtYXAuaGFzKGtleSkpIHtcclxuICAgICAgICBjb25zdCBlbnRyeSA9IG1hcC5nZXQoa2V5KTtcclxuICAgICAgICBpZiAoZW50cnkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBlbnRyeS5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgbmV3TWFwLnNldChrZXksIGVudHJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5ld01hcC5zZXQoa2V5LCBbdmFsdWVdKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3TWFwO1xyXG59XHJcblxyXG4vKipcclxuICpcclxuICogQWRkcyBhbGwgZW50cmllcyBmcm9tIGEgbGlzdCB0byB0aGUgbWFwLlxyXG4gKlxyXG4gKiBAcGFyYW0gZ2V0S2V5IEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEga2V5IGZyb20gYSBsaXN0IGVudHJ5XHJcbiAqIEBwYXJhbSBhcnJheSBBIGxpc3Qgb2Ygb2JqZWN0cyB0aGF0IHNob3VsZCBiZSBhZGRlZCB0byB0aGUgbWFwXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbWFwQWRkRnJvbUFycmF5PFQ+KG1hcDogTWFwPHN0cmluZywgVFtdPiwgZ2V0S2V5OiAodmFsdWU6IFQpID0+IHN0cmluZywgYXJyYXk6IFRbXSk6IE1hcDxzdHJpbmcsIFRbXT4ge1xyXG4gICAgbGV0IG5ld01hcCA9IG5ldyBNYXAobWFwLmVudHJpZXMoKSk7XHJcbiAgICBmb3IgKGxldCBpID0gMCwgbiA9IGFycmF5Lmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGVudHJ5ID0gYXJyYXlbaV07XHJcbiAgICAgICAgY29uc3Qga2V5ID0gZ2V0S2V5KGVudHJ5KTtcclxuICAgICAgICBuZXdNYXAgPSBtYXBBZGQobmV3TWFwLCBrZXksIGVudHJ5KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3TWFwO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWFwRnJvbU9iamVjdDxUPihvYmplY3Q6IHsgW2tleTogc3RyaW5nXTogVCB9KTogTWFwPHN0cmluZywgVD4ge1xyXG4gICAgY29uc3QgbmV3TWFwID0gbmV3IE1hcDxzdHJpbmcsIFQ+KCk7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xyXG4gICAgICAgICAgICBuZXdNYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3TWFwO1xyXG59XHJcbiIsImltcG9ydCB7IEZ1bGxOb3RpZmljYXRpb25EYXRhIH0gZnJvbSBcIi4vTm90aWZpY2F0aW9uc1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVaVN0YXRlIHtcclxuICAgIGhhbWJ1cmdlckV4cGFuZGVkOiBib29sZWFuO1xyXG4gICAgc2hvd1R1dG9yaWFsOiBib29sZWFuO1xyXG4gICAgbm90aWZpY2F0aW9uczogRnVsbE5vdGlmaWNhdGlvbkRhdGFbXTtcclxuICAgIG5vdGlmaWNhdGlvbklkOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBkZWZhdWx0U3RhdGU6IFVpU3RhdGUgPSB7XHJcbiAgICBoYW1idXJnZXJFeHBhbmRlZDogZmFsc2UsXHJcbiAgICBzaG93VHV0b3JpYWw6IHRydWUsXHJcbiAgICBub3RpZmljYXRpb25zOiBbXSxcclxuICAgIG5vdGlmaWNhdGlvbklkOiAwLFxyXG59OyIsImV4cG9ydCBjb25zdCBsb2dnZXIgPSAoc3RvcmU6IGFueSkgPT4gKG5leHQ6IGFueSkgPT4gKGFjdGlvbjogYW55KSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcImRpc3BhdGNoaW5nXCIsIGFjdGlvbik7XHJcbiAgICBjb25zdCByZXN1bHQgPSBuZXh0KGFjdGlvbik7XHJcbiAgICBjb25zb2xlLmxvZyhcIm5leHQgc3RhdGVcIiwgc3RvcmUuZ2V0U3RhdGUoKSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG4iLCJpbXBvcnQgeyBDb21wdXRhdGlvblBheWxvYWQsIFBhcnR5UmVzdWx0LCBEaXN0cmljdFJlc3VsdCwgUGFydHlSZXN0UXVvdGllbnRzIH0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCB7IGRpY3Rpb25hcnlUb0FycmF5IH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9kaWN0aW9uYXJ5XCI7XHJcbmltcG9ydCB7IGRpc3RyaWJ1dGVTZWF0cyB9IGZyb20gXCIuXCI7XHJcbmltcG9ydCB7IGRpc3RyaWJ1dGVMZXZlbGluZ1NlYXRzT25EaXN0cmljdHMsIGRpc3RyaWJ1dGVMZXZlbGluZ1NlYXRzT25EaXN0cmljdHNQcmUyMDA1IH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgRGlzdHJpYnV0aW9uUmVzdWx0LCBOYXRpb25hbERpc3RyaWJ1dGlvblJlc3VsdCB9IGZyb20gXCIuLi8uLi9jb21wdXRhdGlvbi9jb21wdXRhdGlvbi1tb2RlbHNcIjtcclxuaW1wb3J0IHsgaXNMYXJnZXN0RnJhY3Rpb25BbGdvcml0aG0sIGlzUXVvdGllbnRBbGdvcml0aG0sIHNob3VsZEFwcGx5MjAwNVJlZm9ybSB9IGZyb20gXCIuL2FsZ29yaXRobS11dGlsaXRpZXNcIjtcclxuXHJcbi8qKlxyXG4gKiBEaXN0cmlidXRlcyB0aGUgbGV2ZWxpbmcgc2VhdHMgb24gdGhlIHBhcnRpZXMgYW5kIG9uIGVhY2ggZGlzdHJpY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBwYXlsb2FkIFRoZSBjb21wdXRhdGlvbiBwYXlsb2FkXHJcbiAqIEBwYXJhbSBwYXJ0eVJlc3VsdHMgVGhlIHBhcnR5IHJlc3VsdHMgZm9yIGVhY2ggcGFydHlcclxuICogQHBhcmFtIGRpc3RyaWN0UGFydHlSZXN1bHRzIFRoZSBwYXJ0eSByZXN1bHRzIGZvciBlYWNoIGRpc3RyaWN0XHJcbiAqIEBwYXJhbSBkaXN0cmljdFJlc3VsdHMgVGhlIGRpc3RyaWN0IHJlc3VsdHNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkaXN0cmlidXRlTGV2ZWxpbmdTZWF0cyhcclxuICAgIHBheWxvYWQ6IENvbXB1dGF0aW9uUGF5bG9hZCxcclxuICAgIHBhcnR5UmVzdWx0czogXy5EaWN0aW9uYXJ5PFBhcnR5UmVzdWx0PixcclxuICAgIGRpc3RyaWN0UGFydHlSZXN1bHRzOiBfLkRpY3Rpb25hcnk8Xy5EaWN0aW9uYXJ5PFBhcnR5UmVzdWx0Pj4sXHJcbiAgICBkaXN0cmljdFJlc3VsdHM6IF8uRGljdGlvbmFyeTxEaXN0cmljdFJlc3VsdD5cclxuKTogUGFydHlSZXN0UXVvdGllbnRzW10ge1xyXG4gICAgY29uc3QgYWxsUGFydHlDb2RlcyA9IFsuLi5PYmplY3Qua2V5cyhwYXJ0eVJlc3VsdHMpXTtcclxuICAgIC8vIEZpbHRlciBvdXQgcGFydGllcyB3aXRoIGxlc3MgdGhhbiB0aGUgdGhyZXNob2xkXHJcbiAgICBjb25zdCB0aHJlc2hvbGRQYXJ0eUNvZGVzID0gYWxsUGFydHlDb2Rlcy5maWx0ZXIoXHJcbiAgICAgICAgKHBhcnR5Q29kZSkgPT4gcGFydHlSZXN1bHRzW3BhcnR5Q29kZV0ucGVyY2VudFZvdGVzID49IHBheWxvYWQuZWxlY3Rpb25UaHJlc2hvbGRcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0TmF0aW9uYWxGaWx0ZXIgPSBuYXRpb25hbERpc3RyaWJ1dGlvbkZpbHRlcih0aHJlc2hvbGRQYXJ0eUNvZGVzLCBwYXlsb2FkLCBwYXJ0eVJlc3VsdHMpO1xyXG5cclxuICAgIGNvbnN0IGxldmVsaW5nUGFydHlDb2RlcyA9IHJlc3VsdE5hdGlvbmFsRmlsdGVyLmxldmVsaW5nUGFydHlDb2RlcztcclxuXHJcbiAgICBjb25zdCBsZXZlbGluZ1NlYXREaXN0cmlidXRpb24gPSBmaW5hbExldmVsaW5nU2VhdERpc3RyaWJ1dGlvbihcclxuICAgICAgICBsZXZlbGluZ1BhcnR5Q29kZXMsXHJcbiAgICAgICAgcGFydHlSZXN1bHRzLFxyXG4gICAgICAgIHBheWxvYWQsXHJcbiAgICAgICAgcmVzdWx0TmF0aW9uYWxGaWx0ZXIubmF0aW9uYWxEaXN0cmlidXRpb25cclxuICAgICk7XHJcblxyXG4gICAgZm9yIChjb25zdCBwYXJ0eUNvZGUgaW4gbGV2ZWxpbmdTZWF0RGlzdHJpYnV0aW9uLnNlYXRzV29uKSB7XHJcbiAgICAgICAgaWYgKGxldmVsaW5nU2VhdERpc3RyaWJ1dGlvbi5zZWF0c1dvbi5oYXNPd25Qcm9wZXJ0eShwYXJ0eUNvZGUpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxldmVsaW5nU2VhdHMgPSBsZXZlbGluZ1NlYXREaXN0cmlidXRpb24uc2VhdHNXb25bcGFydHlDb2RlXTtcclxuICAgICAgICAgICAgcGFydHlSZXN1bHRzW3BhcnR5Q29kZV0ubGV2ZWxpbmdTZWF0cyArPSBsZXZlbGluZ1NlYXRzO1xyXG4gICAgICAgICAgICBwYXJ0eVJlc3VsdHNbcGFydHlDb2RlXS50b3RhbFNlYXRzICs9IGxldmVsaW5nU2VhdHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHdvbkxldmVsaW5nUGFydHlDb2RlcyA9IGxldmVsaW5nUGFydHlDb2Rlcy5maWx0ZXIoKHBhcnR5Q29kZSkgPT4gcGFydHlSZXN1bHRzW3BhcnR5Q29kZV0ubGV2ZWxpbmdTZWF0cyA+IDApO1xyXG5cclxuICAgIGxldCBwYXJ0eVJlc3RRdW90aWVudHM6IF8uRGljdGlvbmFyeTxQYXJ0eVJlc3RRdW90aWVudHM+ID0ge307XHJcbiAgICBpZiAoc2hvdWxkQXBwbHkyMDA1UmVmb3JtKHBheWxvYWQucGFyYW1ldGVycy5lbGVjdGlvblllYXIpKSB7XHJcbiAgICAgICAgcGFydHlSZXN0UXVvdGllbnRzID0gZGlzdHJpYnV0ZUxldmVsaW5nU2VhdHNPbkRpc3RyaWN0cyhcclxuICAgICAgICAgICAgcGF5bG9hZCxcclxuICAgICAgICAgICAgd29uTGV2ZWxpbmdQYXJ0eUNvZGVzLFxyXG4gICAgICAgICAgICBwYXJ0eVJlc3VsdHMsXHJcbiAgICAgICAgICAgIGRpc3RyaWN0UGFydHlSZXN1bHRzLFxyXG4gICAgICAgICAgICBkaXN0cmljdFJlc3VsdHNcclxuICAgICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBwYXJ0eVJlc3RRdW90aWVudHMgPSBkaXN0cmlidXRlTGV2ZWxpbmdTZWF0c09uRGlzdHJpY3RzUHJlMjAwNShcclxuICAgICAgICAgICAgcGF5bG9hZCxcclxuICAgICAgICAgICAgd29uTGV2ZWxpbmdQYXJ0eUNvZGVzLFxyXG4gICAgICAgICAgICBwYXJ0eVJlc3VsdHMsXHJcbiAgICAgICAgICAgIGRpc3RyaWN0UGFydHlSZXN1bHRzLFxyXG4gICAgICAgICAgICBkaXN0cmljdFJlc3VsdHNcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGxldmVsaW5nU2VhdERpc3RyaWJ1dGlvbkFycmF5ID0gZGljdGlvbmFyeVRvQXJyYXkocGFydHlSZXN0UXVvdGllbnRzKTtcclxuICAgIHJldHVybiBsZXZlbGluZ1NlYXREaXN0cmlidXRpb25BcnJheTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZpbHRlcnMgb3V0IHBhcnRpZXMgdGhhdCBkbyBub3QgcmVjZWl2ZSBtb3JlIHNlYXRzIGluIHRoZSBuYXRpb25hbCBkaXN0cmlidXRpb24gdGhhbiB0aGUgZGlzdHJpY3QgZGlzdHJpYnV0aW9uLlxyXG4gKiBJdCByZXR1cm5zIHRoZSByZW1haW5pbmcgcGFydHkgY29kZXMgYW5kIHRoZSBmaW5hbCBuYXRpb25hbCBkaXN0cmlidXRpb24gb2Ygc2VhdHMuXHJcbiAqXHJcbiAqIEBwYXJhbSBsZXZlbGluZ1BhcnR5Q29kZXMgVGhlIHBhcnR5IGNvZGVzIHRvIGZpbHRlclxyXG4gKiBAcGFyYW0gcGF5bG9hZCBUaGUgY29tcHV0YXRpb24gcGF5bG9hZFxyXG4gKiBAcGFyYW0gcGFydHlSZXN1bHRzIFRoZSBwYXJ0eSByZXN1bHRzIGZvciBlYWNoIHBhcnR5XHJcbiAqL1xyXG5mdW5jdGlvbiBuYXRpb25hbERpc3RyaWJ1dGlvbkZpbHRlcihcclxuICAgIGxldmVsaW5nUGFydHlDb2Rlczogc3RyaW5nW10sXHJcbiAgICBwYXlsb2FkOiBDb21wdXRhdGlvblBheWxvYWQsXHJcbiAgICBwYXJ0eVJlc3VsdHM6IF8uRGljdGlvbmFyeTxQYXJ0eVJlc3VsdD5cclxuKTogTmF0aW9uYWxEaXN0cmlidXRpb25SZXN1bHQge1xyXG4gICAgbGV0IHRvdGFsVm90ZXMgPSAwO1xyXG4gICAgbGV0IHNlYXRzVG9EaXN0cmlidXRlID0gcGF5bG9hZC5sZXZlbGluZ1NlYXRzO1xyXG4gICAgY29uc3QgbGV2ZWxpbmdQYXJ0aWVzOiBfLkRpY3Rpb25hcnk8UGFydHlSZXN1bHQ+ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IHBhcnR5Q29kZSBvZiBsZXZlbGluZ1BhcnR5Q29kZXMpIHtcclxuICAgICAgICB0b3RhbFZvdGVzICs9IHBhcnR5UmVzdWx0c1twYXJ0eUNvZGVdLnZvdGVzO1xyXG4gICAgICAgIHNlYXRzVG9EaXN0cmlidXRlICs9IHBhcnR5UmVzdWx0c1twYXJ0eUNvZGVdLmRpc3RyaWN0U2VhdHM7XHJcbiAgICAgICAgY29uc3QgcGFydHk6IFBhcnR5UmVzdWx0ID0ge1xyXG4gICAgICAgICAgICBkaXN0cmljdFNlYXRzOiAtMSxcclxuICAgICAgICAgICAgbGV2ZWxpbmdTZWF0czogLTEsXHJcbiAgICAgICAgICAgIHBhcnR5Q29kZSxcclxuICAgICAgICAgICAgcGFydHlOYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICBwZXJjZW50Vm90ZXM6IC0xLFxyXG4gICAgICAgICAgICBwcm9wb3J0aW9uYWxpdHk6IC0xLFxyXG4gICAgICAgICAgICB0b3RhbFNlYXRzOiAtMSxcclxuICAgICAgICAgICAgdm90ZXM6IHBhcnR5UmVzdWx0c1twYXJ0eUNvZGVdLnZvdGVzLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGV2ZWxpbmdQYXJ0aWVzW3BhcnR5Q29kZV0gPSBwYXJ0eTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb21wdXRlIHRoZSBkaXN0cmlidXRpb24gb2YgdGhlIHRvdGFsIG51bWJlciBvZiBzZWF0cyBvbiB0aGUgd2hvbGUgY291bnRyeVxyXG4gICAgY29uc3QgbmF0aW9uYWxEaXN0cmlidXRpb24gPSBkaXN0cmlidXRlU2VhdHMoXHJcbiAgICAgICAgcGF5bG9hZC5hbGdvcml0aG0sXHJcbiAgICAgICAgcGF5bG9hZC5maXJzdERpdmlzb3IsXHJcbiAgICAgICAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIsXHJcbiAgICAgICAgc2VhdHNUb0Rpc3RyaWJ1dGUsXHJcbiAgICAgICAgdG90YWxWb3RlcyxcclxuICAgICAgICBsZXZlbGluZ1BhcnRpZXNcclxuICAgICk7XHJcblxyXG4gICAgLy8gRmlsdGVyIG91dCBwYXJ0aWVzIHRoYXQgZGlkIG5vdCBnYWluIGFueSBzZWF0cyBpbiB0aGUgbmV3IGRpc3RyaWJ1dGlvblxyXG4gICAgY29uc3QgZmlsdGVyZWRMZXZlbGluZ1BhcnR5Q29kZXMgPSBsZXZlbGluZ1BhcnR5Q29kZXMuZmlsdGVyKFxyXG4gICAgICAgIChwKSA9PiBuYXRpb25hbERpc3RyaWJ1dGlvbi5zZWF0c1dvbltwXSA+IHBhcnR5UmVzdWx0c1twXS5kaXN0cmljdFNlYXRzXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGV4aXN0c1VuZmlsdGVyZWRQYXJ0eSA9IGZpbHRlcmVkTGV2ZWxpbmdQYXJ0eUNvZGVzLmxlbmd0aCAhPT0gbGV2ZWxpbmdQYXJ0eUNvZGVzLmxlbmd0aDtcclxuICAgIGlmIChleGlzdHNVbmZpbHRlcmVkUGFydHkpIHtcclxuICAgICAgICByZXR1cm4gbmF0aW9uYWxEaXN0cmlidXRpb25GaWx0ZXIoZmlsdGVyZWRMZXZlbGluZ1BhcnR5Q29kZXMsIHBheWxvYWQsIHBhcnR5UmVzdWx0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuYXRpb25hbERpc3RyaWJ1dGlvbixcclxuICAgICAgICBsZXZlbGluZ1BhcnR5Q29kZXM6IGZpbHRlcmVkTGV2ZWxpbmdQYXJ0eUNvZGVzLFxyXG4gICAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIERpc3RyaWJ1dGVzIHRoZSBsZXZlbGluZyBzZWF0cyBvbiBlYWNoIHBhcnR5LlxyXG4gKlxyXG4gKiBAcGFyYW0gbGV2ZWxpbmdQYXJ0eUNvZGVzIFRoZSBwYXJ0eSBjb2RlcyBmb3IgdGhlIHBhcnRpZXMgdGhhdCBtYXkgd2luIGEgbGV2ZWxpbmcgc2VhdFxyXG4gKiBAcGFyYW0gcGFydHlSZXN1bHRzIFRoZSBwYXJ0eSByZXN1bHRzIGZvciBlYWNoIHBhcnR5XHJcbiAqIEBwYXJhbSBwYXlsb2FkIFRoZSBjb21wdXRhdGlvbiBwYXlsb2FkXHJcbiAqIEBwYXJhbSBuYXRpb25hbERpc3RyaWJ1dGlvbiBUaGUgZmluYWwgbmF0aW9uYWwgZGlzdHJpYnV0aW9uIG9mIHNlYXRzXHJcbiAqL1xyXG5mdW5jdGlvbiBmaW5hbExldmVsaW5nU2VhdERpc3RyaWJ1dGlvbihcclxuICAgIGxldmVsaW5nUGFydHlDb2Rlczogc3RyaW5nW10sXHJcbiAgICBwYXJ0eVJlc3VsdHM6IF8uRGljdGlvbmFyeTxQYXJ0eVJlc3VsdD4sXHJcbiAgICBwYXlsb2FkOiBDb21wdXRhdGlvblBheWxvYWQsXHJcbiAgICBuYXRpb25hbERpc3RyaWJ1dGlvbjogRGlzdHJpYnV0aW9uUmVzdWx0XHJcbik6IERpc3RyaWJ1dGlvblJlc3VsdCB7XHJcbiAgICBpZiAoaXNRdW90aWVudEFsZ29yaXRobShwYXlsb2FkLmFsZ29yaXRobSkpIHtcclxuICAgICAgICByZXR1cm4gZmluYWxRdW90aWVudExldmVsaW5nU2VhdERpc3RyaWJ1dGlvbihsZXZlbGluZ1BhcnR5Q29kZXMsIHBhcnR5UmVzdWx0cywgcGF5bG9hZCk7XHJcbiAgICB9IGVsc2UgaWYgKGlzTGFyZ2VzdEZyYWN0aW9uQWxnb3JpdGhtKHBheWxvYWQuYWxnb3JpdGhtKSkge1xyXG4gICAgICAgIHJldHVybiBmaW5hbExhcmdlc3RGcmFjdGlvbkxldmVsaW5nU2VhdERpc3RyaWJ1dGlvbihsZXZlbGluZ1BhcnR5Q29kZXMsIHBhcnR5UmVzdWx0cywgbmF0aW9uYWxEaXN0cmlidXRpb24pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKHBheWxvYWQuYWxnb3JpdGhtICsgXCIgaXMgbm90IGEga25vd24gcXVvdGllbnQgb3IgbGFyZ2VzdCBmcmFjdGlvbiBhbGdvcml0aG0hXCIpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNlYXRSZXN1bHRzOiBbXSxcclxuICAgICAgICAgICAgc2VhdHNXb246IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEaXN0cmlidXRlcyBsZXZlbGluZyBzZWF0cyBvbiBlYWNoIHBhcnR5IHVzaW5nIG9uZSBvZiB0aGUgcXVvdGllbnQgYWxnb3JpdGhtcy5cclxuICpcclxuICogQHBhcmFtIGxldmVsaW5nUGFydHlDb2RlcyBUaGUgcGFydHkgY29kZXMgZm9yIHRoZSBwYXJ0aWVzIHRoYXQgbWF5IHdpbiBhIGxldmVsaW5nIHNlYXRcclxuICogQHBhcmFtIHBhcnR5UmVzdWx0cyBUaGUgcGFydHkgcmVzdWx0cyBmb3IgZWFjaCBwYXJ0eVxyXG4gKiBAcGFyYW0gcGF5bG9hZCBUaGUgY29tcHV0YXRpb24gcGF5bG9hZFxyXG4gKi9cclxuZnVuY3Rpb24gZmluYWxRdW90aWVudExldmVsaW5nU2VhdERpc3RyaWJ1dGlvbihcclxuICAgIGxldmVsaW5nUGFydHlDb2Rlczogc3RyaW5nW10sXHJcbiAgICBwYXJ0eVJlc3VsdHM6IF8uRGljdGlvbmFyeTxQYXJ0eVJlc3VsdD4sXHJcbiAgICBwYXlsb2FkOiBDb21wdXRhdGlvblBheWxvYWRcclxuKSB7XHJcbiAgICBsZXQgdG90YWxWb3RlcyA9IDA7XHJcbiAgICBjb25zdCBsZXZlbGluZ1BhcnRpZXM6IF8uRGljdGlvbmFyeTxQYXJ0eVJlc3VsdD4gPSB7fTtcclxuICAgIGZvciAoY29uc3QgcGFydHlDb2RlIG9mIGxldmVsaW5nUGFydHlDb2Rlcykge1xyXG4gICAgICAgIHRvdGFsVm90ZXMgKz0gcGFydHlSZXN1bHRzW3BhcnR5Q29kZV0udm90ZXM7XHJcbiAgICAgICAgY29uc3QgcGFydHk6IFBhcnR5UmVzdWx0ID0ge1xyXG4gICAgICAgICAgICBkaXN0cmljdFNlYXRzOiAtMSxcclxuICAgICAgICAgICAgbGV2ZWxpbmdTZWF0czogLTEsXHJcbiAgICAgICAgICAgIHBhcnR5Q29kZSxcclxuICAgICAgICAgICAgcGFydHlOYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICBwZXJjZW50Vm90ZXM6IC0xLFxyXG4gICAgICAgICAgICBwcm9wb3J0aW9uYWxpdHk6IC0xLFxyXG4gICAgICAgICAgICB0b3RhbFNlYXRzOiAtMSxcclxuICAgICAgICAgICAgdm90ZXM6IHBhcnR5UmVzdWx0c1twYXJ0eUNvZGVdLnZvdGVzLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGV2ZWxpbmdQYXJ0aWVzW3BhcnR5Q29kZV0gPSBwYXJ0eTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEaXN0cmlidXRlIHRoZSBsZXZlbGluZyBzZWF0cywgdGFraW5nIHRoZSBkaXN0cmljdCBzZWF0cyBpbnRvIGFjY291bnRcclxuICAgIHJldHVybiBkaXN0cmlidXRlU2VhdHMoXHJcbiAgICAgICAgcGF5bG9hZC5hbGdvcml0aG0sXHJcbiAgICAgICAgcGF5bG9hZC5maXJzdERpdmlzb3IsXHJcbiAgICAgICAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIsXHJcbiAgICAgICAgcGF5bG9hZC5sZXZlbGluZ1NlYXRzLFxyXG4gICAgICAgIHRvdGFsVm90ZXMsXHJcbiAgICAgICAgbGV2ZWxpbmdQYXJ0aWVzLFxyXG4gICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICBwYXJ0eVJlc3VsdHNcclxuICAgICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEaXN0cmlidXRlcyB0aGUgbGV2ZWxpbmcgc2VhdHMgb24gZWFjaCBwYXJ0eSB1c2luZyB0aGUgbGFyZ2VzdCBmcmFjdGlvbiBhbGdvcml0aG0uXHJcbiAqXHJcbiAqIEBwYXJhbSBsZXZlbGluZ1BhcnR5Q29kZXMgVGhlIHBhcnR5IGNvZGVzIGZvciB0aGUgcGFydGllcyB0aGF0IG1heSB3aW4gYSBsZXZlbGluZyBzZWF0XHJcbiAqIEBwYXJhbSBwYXJ0eVJlc3VsdHMgVGhlIHBhcnR5IHJlc3VsdHMgZm9yIGVhY2ggcGFydHlcclxuICogQHBhcmFtIG5hdGlvbmFsRGlzdHJpYnV0aW9uIFRoZSBmaW5hbCBuYXRpb25hbCBkaXN0cmlidXRpb24gb2Ygc2VhdHNcclxuICovXHJcbmZ1bmN0aW9uIGZpbmFsTGFyZ2VzdEZyYWN0aW9uTGV2ZWxpbmdTZWF0RGlzdHJpYnV0aW9uKFxyXG4gICAgbGV2ZWxpbmdQYXJ0eUNvZGVzOiBzdHJpbmdbXSxcclxuICAgIHBhcnR5UmVzdWx0czogXy5EaWN0aW9uYXJ5PFBhcnR5UmVzdWx0PixcclxuICAgIG5hdGlvbmFsRGlzdHJpYnV0aW9uOiBEaXN0cmlidXRpb25SZXN1bHRcclxuKTogRGlzdHJpYnV0aW9uUmVzdWx0IHtcclxuICAgIGNvbnN0IGxldmVsaW5nU2VhdERpc3RyaWJ1dGlvbjogXy5EaWN0aW9uYXJ5PG51bWJlcj4gPSB7fTtcclxuICAgIGxldmVsaW5nUGFydHlDb2Rlcy5mb3JFYWNoKChwYXJ0eUNvZGUpID0+IHtcclxuICAgICAgICBsZXZlbGluZ1NlYXREaXN0cmlidXRpb25bcGFydHlDb2RlXSA9XHJcbiAgICAgICAgICAgIG5hdGlvbmFsRGlzdHJpYnV0aW9uLnNlYXRzV29uW3BhcnR5Q29kZV0gLSBwYXJ0eVJlc3VsdHNbcGFydHlDb2RlXS5kaXN0cmljdFNlYXRzO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZWF0UmVzdWx0czogW10sXHJcbiAgICAgICAgc2VhdHNXb246IGxldmVsaW5nU2VhdERpc3RyaWJ1dGlvbixcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcHV0YXRpb25QYXlsb2FkLCBMYWd1ZURob250UmVzdWx0IH0gZnJvbSBcIi4uXCI7XHJcblxyXG5pbXBvcnQgeyBkaWN0aW9uYXJ5VG9BcnJheSB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZGljdGlvbmFyeVwiO1xyXG5cclxuaW1wb3J0IHsgZGlzdHJpYnV0ZVNlYXRzLCBkaXN0cmlidXRlTGV2ZWxpbmdTZWF0cywgY2FsY3VsYXRlUHJvcG9ydGlvbmFsaXR5LCBmaW5hbGl6ZURpc3RyaWN0Q2FsY3VsYXRpb25zIH0gZnJvbSBcIi5cIjtcclxuaW1wb3J0IHsgZGlzdHJpYnV0ZURpc3RyaWN0U2VhdHNPbkRpc3RyaWN0cyB9IGZyb20gXCIuL3V0aWxzXCI7XHJcbmltcG9ydCB7XHJcbiAgICBjYWxjdWxhdGVGaW5hbFF1b3RpZW50cyxcclxuICAgIGlzUXVvdGllbnRBbGdvcml0aG0sXHJcbiAgICBjb25zdHJ1Y3REaXN0cmljdFJlc3VsdHMsXHJcbiAgICBnZXRWb3Rlc1BlckRpc3RyaWN0LFxyXG4gICAgY29uc3RydWN0UGFydHlSZXN1bHRzLFxyXG4gICAgY29uc3RydWN0RGlzdHJpY3RQYXJ0eVJlc3VsdHMsXHJcbiAgICBzaG91bGRBcHBseTIwMDVSZWZvcm0sXHJcbn0gZnJvbSBcIi4vYWxnb3JpdGhtLXV0aWxpdGllc1wiO1xyXG5pbXBvcnQgeyB0b1N1bSB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvcmVkdWNlXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGFndWVEaG9udChwYXlsb2FkOiBDb21wdXRhdGlvblBheWxvYWQpOiBMYWd1ZURob250UmVzdWx0IHtcclxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGlzdHJpY3Qgc2VhdHMgZm9yIGVhY2ggZGlzdHJpY3RcclxuICAgIGNvbnN0IGRpc3RyaWN0U2VhdHMgPSBkaXN0cmlidXRlRGlzdHJpY3RTZWF0c09uRGlzdHJpY3RzKFxyXG4gICAgICAgIHBheWxvYWQuYXJlYUZhY3RvcixcclxuICAgICAgICAxOSxcclxuICAgICAgICBwYXlsb2FkLmRpc3RyaWN0U2VhdHMsXHJcbiAgICAgICAgcGF5bG9hZC5tZXRyaWNzXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IHRvdGFsVm90ZXMgPSBwYXlsb2FkLnZvdGVzLm1hcCgodm90ZSkgPT4gdm90ZS52b3RlcykucmVkdWNlKHRvU3VtLCAwKTtcclxuICAgIGNvbnN0IGRpc3RyaWN0Vm90ZXMgPSBnZXRWb3Rlc1BlckRpc3RyaWN0KHBheWxvYWQudm90ZXMpO1xyXG4gICAgY29uc3QgcGFydHlSZXN1bHRzID0gY29uc3RydWN0UGFydHlSZXN1bHRzKHBheWxvYWQudm90ZXMsIHRvdGFsVm90ZXMsIHBheWxvYWQucGFydHlNYXApO1xyXG4gICAgY29uc3QgZGlzdHJpY3RQYXJ0eVJlc3VsdHMgPSBjb25zdHJ1Y3REaXN0cmljdFBhcnR5UmVzdWx0cyhwYXlsb2FkLnZvdGVzLCBkaXN0cmljdFZvdGVzLCBwYXlsb2FkLnBhcnR5TWFwKTtcclxuICAgIGNvbnN0IGRpc3RyaWN0UmVzdWx0cyA9IGNvbnN0cnVjdERpc3RyaWN0UmVzdWx0cyhkaXN0cmljdFNlYXRzLCBkaXN0cmljdFZvdGVzLCB0b3RhbFZvdGVzKTtcclxuXHJcbiAgICAvLyBzdC4gbGFndWUgaXRlcmF0ZXMgb3ZlciBlYWNoIGNvdW50eSwgYW5kIGluIHR1cm4sIGVhY2ggcGFydHkgb2YgdGhlIHBhcnR5LCBzbyBmaXJzdCB3ZSBoYXZlIHRvIGNyZWF0ZSBvYmplY3RzIGZvciBwYXJ0eUNvZGVzXHJcbiAgICBmb3IgKGNvbnN0IG1ldHJpYyBvZiBwYXlsb2FkLm1ldHJpY3MpIHtcclxuICAgICAgICBjb25zdCBkaXN0cmlidXRpb25SZXN1bHQgPSBkaXN0cmlidXRlU2VhdHMoXHJcbiAgICAgICAgICAgIHBheWxvYWQuYWxnb3JpdGhtLFxyXG4gICAgICAgICAgICBwYXlsb2FkLmZpcnN0RGl2aXNvcixcclxuICAgICAgICAgICAgcGF5bG9hZC5kaXN0cmljdFRocmVzaG9sZCxcclxuICAgICAgICAgICAgZGlzdHJpY3RTZWF0c1ttZXRyaWMuZGlzdHJpY3RdLFxyXG4gICAgICAgICAgICBkaXN0cmljdFJlc3VsdHNbbWV0cmljLmRpc3RyaWN0XS52b3RlcyxcclxuICAgICAgICAgICAgZGlzdHJpY3RQYXJ0eVJlc3VsdHNbbWV0cmljLmRpc3RyaWN0XVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGRpc3RyaWN0UmVzdWx0c1ttZXRyaWMuZGlzdHJpY3RdLmRpc3RyaWN0U2VhdFJlc3VsdCA9IGRpc3RyaWJ1dGlvblJlc3VsdC5zZWF0UmVzdWx0cztcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIGhvdyBtYW55IGRpc3RyaWN0IHNlYXRzIHRoZSBwYXJ0eSBoYXMgd29uLCBib3RoIG5hdGlvbmFsbHkgYW5kIHdpdGhpbiB0aGUgZGlzdHJpY3RcclxuICAgICAgICBmb3IgKGNvbnN0IHBhcnR5Q29kZSBpbiBkaXN0cmlidXRpb25SZXN1bHQuc2VhdHNXb24pIHtcclxuICAgICAgICAgICAgcGFydHlSZXN1bHRzW3BhcnR5Q29kZV0uZGlzdHJpY3RTZWF0cyArPSBkaXN0cmlidXRpb25SZXN1bHQuc2VhdHNXb25bcGFydHlDb2RlXTtcclxuICAgICAgICAgICAgcGFydHlSZXN1bHRzW3BhcnR5Q29kZV0udG90YWxTZWF0cyArPSBkaXN0cmlidXRpb25SZXN1bHQuc2VhdHNXb25bcGFydHlDb2RlXTtcclxuICAgICAgICAgICAgZGlzdHJpY3RQYXJ0eVJlc3VsdHNbbWV0cmljLmRpc3RyaWN0XVtwYXJ0eUNvZGVdLmRpc3RyaWN0U2VhdHMgKz0gZGlzdHJpYnV0aW9uUmVzdWx0LnNlYXRzV29uW3BhcnR5Q29kZV07XHJcbiAgICAgICAgICAgIGRpc3RyaWN0UGFydHlSZXN1bHRzW21ldHJpYy5kaXN0cmljdF1bcGFydHlDb2RlXS50b3RhbFNlYXRzICs9IGRpc3RyaWJ1dGlvblJlc3VsdC5zZWF0c1dvbltwYXJ0eUNvZGVdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBsZXZlbGluZ1NlYXREaXN0cmlidXRpb24gPSBkaXN0cmlidXRlTGV2ZWxpbmdTZWF0cyhcclxuICAgICAgICBwYXlsb2FkLFxyXG4gICAgICAgIHBhcnR5UmVzdWx0cyxcclxuICAgICAgICBkaXN0cmljdFBhcnR5UmVzdWx0cyxcclxuICAgICAgICBkaXN0cmljdFJlc3VsdHNcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgdG90YWxTZWF0cyA9IHBheWxvYWQuZGlzdHJpY3RTZWF0cyArIHBheWxvYWQubGV2ZWxpbmdTZWF0cztcclxuICAgIGNhbGN1bGF0ZVByb3BvcnRpb25hbGl0eSh0b3RhbFNlYXRzLCBwYXJ0eVJlc3VsdHMsIGRpc3RyaWN0UGFydHlSZXN1bHRzLCBkaXN0cmljdFJlc3VsdHMpO1xyXG4gICAgZmluYWxpemVEaXN0cmljdENhbGN1bGF0aW9ucyhkaXN0cmljdFJlc3VsdHMpO1xyXG5cclxuICAgIGZvciAoY29uc3QgY291bnR5TmFtZSBpbiBkaXN0cmljdFBhcnR5UmVzdWx0cykge1xyXG4gICAgICAgIGRpc3RyaWN0UmVzdWx0c1tjb3VudHlOYW1lXS5wYXJ0eVJlc3VsdHMgPSBkaWN0aW9uYXJ5VG9BcnJheShkaXN0cmljdFBhcnR5UmVzdWx0c1tjb3VudHlOYW1lXSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkaXN0cmljdFJlc3VsdEFycmF5ID0gZGljdGlvbmFyeVRvQXJyYXkoZGlzdHJpY3RSZXN1bHRzKTtcclxuICAgIGNvbnN0IHBhcnR5UmVzdWx0QXJyYXkgPSBkaWN0aW9uYXJ5VG9BcnJheShwYXJ0eVJlc3VsdHMpO1xyXG5cclxuICAgIGNvbnN0IHVzZUFkanVzdGVkUXVvdGllbnRzID1cclxuICAgICAgICBzaG91bGRBcHBseTIwMDVSZWZvcm0ocGF5bG9hZC5wYXJhbWV0ZXJzLmVsZWN0aW9uWWVhcikgJiYgaXNRdW90aWVudEFsZ29yaXRobShwYXlsb2FkLmFsZ29yaXRobSk7XHJcbiAgICBjb25zdCBmaW5hbFF1b3RpZW50cyA9IGNhbGN1bGF0ZUZpbmFsUXVvdGllbnRzKFxyXG4gICAgICAgIHBheWxvYWQuYWxnb3JpdGhtLFxyXG4gICAgICAgIHBheWxvYWQuZmlyc3REaXZpc29yLFxyXG4gICAgICAgIHVzZUFkanVzdGVkUXVvdGllbnRzLFxyXG4gICAgICAgIGRpc3RyaWN0UmVzdWx0c1xyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQ6IExhZ3VlRGhvbnRSZXN1bHQgPSB7XHJcbiAgICAgICAgcGFydHlSZXN1bHRzOiBwYXJ0eVJlc3VsdEFycmF5LFxyXG4gICAgICAgIGRpc3RyaWN0UmVzdWx0czogZGlzdHJpY3RSZXN1bHRBcnJheSxcclxuICAgICAgICBsZXZlbGluZ1NlYXREaXN0cmlidXRpb24sXHJcbiAgICAgICAgZmluYWxRdW90aWVudHMsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4iLCJpbXBvcnQgeyBDb21wdXRhdGlvblN0YXRlLCB1bmxvYWRlZFN0YXRlIH0gZnJvbSBcIi4vY29tcHV0YXRpb24tc3RhdGVcIjtcclxuaW1wb3J0IHsgQ29tcHV0YXRpb25BY3Rpb25UeXBlLCBDb21wdXRhdGlvbkFjdGlvbiB9IGZyb20gXCIuL2NvbXB1dGF0aW9uLWFjdGlvbnNcIjtcclxuaW1wb3J0IHsgY2hlY2tFeGhhdXN0aXZlbHkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzXCI7XHJcbmltcG9ydCB7IEdsb2JhbEFjdGlvblR5cGUgfSBmcm9tIFwiLi4vcmVkdWNlcnMvZ2xvYmFsLWFjdGlvbnNcIjtcclxuXHJcbi8qKlxyXG4gKiBSZWR1Y2VyIGZvciBjb21wdXRhdGlvbnMuIEhhbmRsZXMgYWxsIHN0YXRlIGNoYW5nZXMgdG8gdGhlIGNvbXB1dGF0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RhdGUgLSB0aGUgY3VycmVudCBzdGF0ZSwgd2l0aCBkZWZhdWx0IHBhcmFtZXRlcnMgcGFzc2VkIGluIGlmZiBpdCBpc1xyXG4gKiB1bmRlZmluZWRcclxuICogQHBhcmFtIGFjdGlvbiAtIHRoZSBhY3Rpb24gdG8gYWN0IHVwb24gdGhlIHN0YXRlXHJcbiAqIEByZXR1cm5zIGEgbmV3IHN0YXRlIG11dGF0ZWQgYnkgdGhlIGFjdGlvbiBwYXNzZWQgaW4gYXMgcGFyYW1ldGVyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0YXRpb24oc3RhdGU6IENvbXB1dGF0aW9uU3RhdGUgPSB1bmxvYWRlZFN0YXRlLCBhY3Rpb246IENvbXB1dGF0aW9uQWN0aW9uKTogQ29tcHV0YXRpb25TdGF0ZSB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBDb21wdXRhdGlvbkFjdGlvblR5cGUuSU5JVElBTElaRV9DT01QVVRBVElPTjpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgYWxnb3JpdGhtOiBhY3Rpb24uYWxnb3JpdGhtLFxyXG4gICAgICAgICAgICAgICAgZmlyc3REaXZpc29yOiBhY3Rpb24uZmlyc3REaXZpc29yLFxyXG4gICAgICAgICAgICAgICAgZWxlY3Rpb25UaHJlc2hvbGQ6IGFjdGlvbi5lbGVjdGlvblRocmVzaG9sZCxcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0VGhyZXNob2xkOiBhY3Rpb24uZGlzdHJpY3RUaHJlc2hvbGQsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFNlYXRzOiBhY3Rpb24uZGlzdHJpY3RTZWF0cyxcclxuICAgICAgICAgICAgICAgIGxldmVsaW5nU2VhdHM6IGFjdGlvbi5sZXZlbGluZ1NlYXRzLFxyXG4gICAgICAgICAgICAgICAgYXJlYUZhY3RvcjogYWN0aW9uLmFyZWFGYWN0b3IsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50OiBhY3Rpb24ucmVzdWx0cyxcclxuICAgICAgICAgICAgICAgIGhpc3RvcmljYWw6IGFjdGlvbi5yZXN1bHRzLFxyXG4gICAgICAgICAgICAgICAgY29tcGFyaXNvbjogYWN0aW9uLnJlc3VsdHMsXHJcbiAgICAgICAgICAgICAgICB2b3RlczogYWN0aW9uLnZvdGVzLFxyXG4gICAgICAgICAgICAgICAgbWV0cmljczogYWN0aW9uLm1ldHJpY3MsXHJcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzOiBhY3Rpb24ucGFyYW1ldGVycyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBjYXNlIENvbXB1dGF0aW9uQWN0aW9uVHlwZS5VUERBVEVfQ09NUFVUQVRJT046XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIGFsZ29yaXRobTogYWN0aW9uLmFsZ29yaXRobSxcclxuICAgICAgICAgICAgICAgIGZpcnN0RGl2aXNvcjogYWN0aW9uLmZpcnN0RGl2aXNvcixcclxuICAgICAgICAgICAgICAgIGVsZWN0aW9uVGhyZXNob2xkOiBhY3Rpb24uZWxlY3Rpb25UaHJlc2hvbGQsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFRocmVzaG9sZDogYWN0aW9uLmRpc3RyaWN0VGhyZXNob2xkLFxyXG4gICAgICAgICAgICAgICAgZGlzdHJpY3RTZWF0czogYWN0aW9uLmRpc3RyaWN0U2VhdHMsXHJcbiAgICAgICAgICAgICAgICBsZXZlbGluZ1NlYXRzOiBhY3Rpb24ubGV2ZWxpbmdTZWF0cyxcclxuICAgICAgICAgICAgICAgIGFyZWFGYWN0b3I6IGFjdGlvbi5hcmVhRmFjdG9yLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudDogYWN0aW9uLnJlc3VsdHMsXHJcbiAgICAgICAgICAgICAgICB2b3RlczogYWN0aW9uLnZvdGVzLFxyXG4gICAgICAgICAgICAgICAgbWV0cmljczogYWN0aW9uLm1ldHJpY3MsXHJcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzOiBhY3Rpb24ucGFyYW1ldGVycyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBjYXNlIENvbXB1dGF0aW9uQWN0aW9uVHlwZS5TQVZFX0NPTVBVVEFUSU9OOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICBjb21wYXJpc29uOiBzdGF0ZS5jdXJyZW50LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIGNhc2UgQ29tcHV0YXRpb25BY3Rpb25UeXBlLlJFU0VUX1NBVkVEX0NPTVBVVEFUSU9OOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICBjb21wYXJpc29uOiBzdGF0ZS5oaXN0b3JpY2FsLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIGNhc2UgQ29tcHV0YXRpb25BY3Rpb25UeXBlLlVQREFURV9ISVNUT1JJQ0FMOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICBoaXN0b3JpY2FsOiBhY3Rpb24uaGlzdG9yaWNhbCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBjYXNlIEdsb2JhbEFjdGlvblR5cGUuQ0xFQVJfU1RBVEU6XHJcbiAgICAgICAgICAgIHJldHVybiB1bmxvYWRlZFN0YXRlO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGNoZWNrRXhoYXVzdGl2ZWx5KGFjdGlvbik7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBSZXF1ZXN0ZWREYXRhQWN0aW9uVHlwZSwgUmVxdWVzdGVkRGF0YUFjdGlvbiB9IGZyb20gXCIuL3JlcXVlc3RlZC1kYXRhLWFjdGlvbnNcIjtcclxuaW1wb3J0IHsgUmVxdWVzdGVkRGF0YVN0YXRlLCB1bmxvYWRlZFN0YXRlIH0gZnJvbSBcIi4vcmVxdWVzdGVkLWRhdGEtc3RhdGVcIjtcclxuaW1wb3J0IHsgR2xvYmFsQWN0aW9uVHlwZSB9IGZyb20gXCIuLi9yZWR1Y2Vycy9nbG9iYWwtYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBjaGVja0V4aGF1c3RpdmVseSB9IGZyb20gXCIuLi91dGlsaXRpZXNcIjtcclxuXHJcbmZ1bmN0aW9uIGNoZWNrU3RhdGVMb2FkZWQoc3RhdGU6IFJlcXVlc3RlZERhdGFTdGF0ZSwgYWN0aW9uOiBSZXF1ZXN0ZWREYXRhQWN0aW9uKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIChzdGF0ZS5tZXRyaWNzLmxlbmd0aCA+IDAgfHwgYWN0aW9uLnR5cGUgPT09IFJlcXVlc3RlZERhdGFBY3Rpb25UeXBlLklOSVRJQUxJWkVfUkVRVUVTVEVEX01FVFJJQ1MpICYmXHJcbiAgICAgICAgKHN0YXRlLnBhcmFtZXRlcnMubGVuZ3RoID4gMCB8fCBhY3Rpb24udHlwZSA9PT0gUmVxdWVzdGVkRGF0YUFjdGlvblR5cGUuSU5JVElBTElaRV9SRVFVRVNURURfUEFSQU1FVEVSUykgJiZcclxuICAgICAgICAoc3RhdGUudm90ZXMubGVuZ3RoID4gMCB8fCBhY3Rpb24udHlwZSA9PT0gUmVxdWVzdGVkRGF0YUFjdGlvblR5cGUuSU5JVElBTElaRV9SRVFVRVNURURfVk9URVMpICYmXHJcbiAgICAgICAgKE9iamVjdC5rZXlzKHN0YXRlLnBhcnR5TWFwKS5sZW5ndGggPiAwIHx8XHJcbiAgICAgICAgICAgIGFjdGlvbi50eXBlID09PSBSZXF1ZXN0ZWREYXRhQWN0aW9uVHlwZS5JTklUSUFMSVpFX1JFUVVFU1RFRF9QQVJUWV9NQVApXHJcbiAgICApO1xyXG59XHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHN0YXRlIC0gdGhlIGN1cnJlbnQgc3RhdGUsIHdpdGggZGVmYXVsdCBwYXJhbWV0ZXJzIGlmZiBpdCBpc1xyXG4gKiB1bmRlZmluZWQuXHJcbiAqIEBwYXJhbSBhY3Rpb24gLSB0aGUgYWN0aW9uIHRvIGFjdCB1cG9uIHRoZSBzdGF0ZS5cclxuICogQHJldHVybnMgYSBuZXcgc3RhdGUgbXV0YXRlZCBieSB0aGUgYWN0aW9uIHBhc3NlZCBpbiBhcyBwYXJhbWV0ZXIuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVxdWVzdGVkRGF0YShcclxuICAgIHN0YXRlOiBSZXF1ZXN0ZWREYXRhU3RhdGUgPSB1bmxvYWRlZFN0YXRlLFxyXG4gICAgYWN0aW9uOiBSZXF1ZXN0ZWREYXRhQWN0aW9uXHJcbik6IFJlcXVlc3RlZERhdGFTdGF0ZSB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBSZXF1ZXN0ZWREYXRhQWN0aW9uVHlwZS5JTklUSUFMSVpFX1JFUVVFU1RFRF9WT1RFUzpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgdm90ZXM6IGFjdGlvbi52b3RlcyxcclxuICAgICAgICAgICAgICAgIGRhdGFMb2FkZWQ6IGNoZWNrU3RhdGVMb2FkZWQoc3RhdGUsIGFjdGlvbiksXHJcbiAgICAgICAgICAgICAgICBlbmFibGVBdXRvU2F2ZTogY2hlY2tTdGF0ZUxvYWRlZChzdGF0ZSwgYWN0aW9uKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBjYXNlIFJlcXVlc3RlZERhdGFBY3Rpb25UeXBlLklOSVRJQUxJWkVfUkVRVUVTVEVEX01FVFJJQ1M6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIG1ldHJpY3M6IGFjdGlvbi5tZXRyaWNzLFxyXG4gICAgICAgICAgICAgICAgZGF0YUxvYWRlZDogY2hlY2tTdGF0ZUxvYWRlZChzdGF0ZSwgYWN0aW9uKSxcclxuICAgICAgICAgICAgICAgIGVuYWJsZUF1dG9TYXZlOiBjaGVja1N0YXRlTG9hZGVkKHN0YXRlLCBhY3Rpb24pLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIGNhc2UgUmVxdWVzdGVkRGF0YUFjdGlvblR5cGUuSU5JVElBTElaRV9SRVFVRVNURURfUEFSQU1FVEVSUzpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyczogYWN0aW9uLnBhcmFtZXRlcnMsXHJcbiAgICAgICAgICAgICAgICBkYXRhTG9hZGVkOiBjaGVja1N0YXRlTG9hZGVkKHN0YXRlLCBhY3Rpb24pLFxyXG4gICAgICAgICAgICAgICAgZW5hYmxlQXV0b1NhdmU6IGNoZWNrU3RhdGVMb2FkZWQoc3RhdGUsIGFjdGlvbiksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgY2FzZSBSZXF1ZXN0ZWREYXRhQWN0aW9uVHlwZS5JTklUSUFMSVpFX1JFUVVFU1RFRF9QQVJUWV9NQVA6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIHBhcnR5TWFwOiBhY3Rpb24ucGFydHlNYXAsXHJcbiAgICAgICAgICAgICAgICBkYXRhTG9hZGVkOiBjaGVja1N0YXRlTG9hZGVkKHN0YXRlLCBhY3Rpb24pLFxyXG4gICAgICAgICAgICAgICAgZW5hYmxlQXV0b1NhdmU6IGNoZWNrU3RhdGVMb2FkZWQoc3RhdGUsIGFjdGlvbiksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgY2FzZSBHbG9iYWxBY3Rpb25UeXBlLkNMRUFSX1NUQVRFOlxyXG4gICAgICAgICAgICByZXR1cm4gdW5sb2FkZWRTdGF0ZTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBjaGVja0V4aGF1c3RpdmVseShhY3Rpb24pO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcHV0YXRpb25NZW51QWN0aW9uVHlwZSwgQ29tcHV0YXRpb25NZW51QWN0aW9uIH0gZnJvbSBcIi4vY29tcHV0YXRpb24tbWVudS1hY3Rpb25zXCI7XHJcbmltcG9ydCB7IENvbXB1dGF0aW9uTWVudVN0YXRlLCB1bmxvYWRlZFN0YXRlIH0gZnJvbSBcIi4vY29tcHV0YXRpb24tbWVudS1zdGF0ZVwiO1xyXG5pbXBvcnQgeyBjaGVja0V4aGF1c3RpdmVseSB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXNcIjtcclxuaW1wb3J0IHsgR2xvYmFsQWN0aW9uVHlwZSB9IGZyb20gXCIuLi8uLi9yZWR1Y2Vycy9nbG9iYWwtYWN0aW9uc1wiO1xyXG5cclxuLyoqXHJcbiAqIFJlZHVjZXIgZm9yIHRoZSBjb21wdXRhdGlvbiBtZW51LiBIYW5kbGVzIGFsbCBzdGF0ZSBjaGFuZ2VzIHRvIHRoZVxyXG4gKiBjb21wdXRhdGlvbiBtZW51LlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RhdGUgLSB0aGUgY3VycmVudCBzdGF0ZSwgd2l0aCBkZWZhdWx0IHBhcmFtZXRlcnMgcGFzc2VkIGluIGlmZiBpdCBpc1xyXG4gKiB1bmRlZmluZWRcclxuICogQHBhcmFtIGFjdGlvbiAtIHRoZSBhY3Rpb24gdG8gYWN0IHVwb24gdGhlIHN0YXRlXHJcbiAqIEByZXR1cm5zIGEgbmV3IHN0YXRlIG11dGF0ZWQgYnkgdGhlIGFjdGlvbiBwYXNzZWQgaW4gYXMgcGFyYW1ldGVyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0YXRpb25NZW51KFxyXG4gICAgc3RhdGU6IENvbXB1dGF0aW9uTWVudVN0YXRlID0gdW5sb2FkZWRTdGF0ZSxcclxuICAgIGFjdGlvbjogQ29tcHV0YXRpb25NZW51QWN0aW9uXHJcbik6IENvbXB1dGF0aW9uTWVudVN0YXRlIHtcclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICBjYXNlIENvbXB1dGF0aW9uTWVudUFjdGlvblR5cGUuSU5JVElBTElaRV9DT01QVVRBVElPTl9NRU5VOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICBlbGVjdGlvblllYXJzOiBhY3Rpb24uZWxlY3Rpb25ZZWFycyxcclxuICAgICAgICAgICAgICAgIHllYXI6IGFjdGlvbi55ZWFyLFxyXG4gICAgICAgICAgICAgICAgYWxnb3JpdGhtOiBhY3Rpb24uYWxnb3JpdGhtLFxyXG4gICAgICAgICAgICAgICAgZmlyc3REaXZpc29yOiBhY3Rpb24uZmlyc3REaXZpc29yLFxyXG4gICAgICAgICAgICAgICAgZWxlY3Rpb25UaHJlc2hvbGQ6IGFjdGlvbi5lbGVjdGlvblRocmVzaG9sZCxcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0VGhyZXNob2xkOiBhY3Rpb24uZGlzdHJpY3RUaHJlc2hvbGQsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFNlYXRzOiBhY3Rpb24uZGlzdHJpY3RTZWF0cyxcclxuICAgICAgICAgICAgICAgIGxldmVsaW5nU2VhdHM6IGFjdGlvbi5sZXZlbGluZ1NlYXRzLFxyXG4gICAgICAgICAgICAgICAgYXJlYUZhY3RvcjogYWN0aW9uLmFyZWFGYWN0b3IsXHJcbiAgICAgICAgICAgICAgICBhdXRvQ29tcHV0ZTogYWN0aW9uLmF1dG9Db21wdXRlLFxyXG4gICAgICAgICAgICAgICAgY29tcGFyaXNvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobTogYWN0aW9uLmFsZ29yaXRobSxcclxuICAgICAgICAgICAgICAgICAgICBhcmVhRmFjdG9yOiBhY3Rpb24uYXJlYUZhY3RvcixcclxuICAgICAgICAgICAgICAgICAgICBkaXN0cmljdFNlYXRzOiBhY3Rpb24uZGlzdHJpY3RTZWF0cyxcclxuICAgICAgICAgICAgICAgICAgICBlbGVjdGlvblRocmVzaG9sZDogYWN0aW9uLmVsZWN0aW9uVGhyZXNob2xkLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3RyaWN0VGhyZXNob2xkOiBhY3Rpb24uZGlzdHJpY3RUaHJlc2hvbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3REaXZpc29yOiBhY3Rpb24uZmlyc3REaXZpc29yLFxyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsaW5nU2VhdHM6IGFjdGlvbi5sZXZlbGluZ1NlYXRzLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBjYXNlIENvbXB1dGF0aW9uTWVudUFjdGlvblR5cGUuVVBEQVRFX0NPTVBVVEFUSU9OX01FTlU6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIHllYXI6IGFjdGlvbi55ZWFyLFxyXG4gICAgICAgICAgICAgICAgYWxnb3JpdGhtOiBhY3Rpb24uYWxnb3JpdGhtLFxyXG4gICAgICAgICAgICAgICAgZmlyc3REaXZpc29yOiBhY3Rpb24uZmlyc3REaXZpc29yLFxyXG4gICAgICAgICAgICAgICAgZWxlY3Rpb25UaHJlc2hvbGQ6IGFjdGlvbi5lbGVjdGlvblRocmVzaG9sZCxcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0VGhyZXNob2xkOiBhY3Rpb24uZGlzdHJpY3RUaHJlc2hvbGQsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFNlYXRzOiBhY3Rpb24uZGlzdHJpY3RTZWF0cyxcclxuICAgICAgICAgICAgICAgIGxldmVsaW5nU2VhdHM6IGFjdGlvbi5sZXZlbGluZ1NlYXRzLFxyXG4gICAgICAgICAgICAgICAgYXJlYUZhY3RvcjogYWN0aW9uLmFyZWFGYWN0b3IsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgY2FzZSBDb21wdXRhdGlvbk1lbnVBY3Rpb25UeXBlLlNBVkVfU0VUVElOR1M6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIGNvbXBhcmlzb246IHtcclxuICAgICAgICAgICAgICAgICAgICBhbGdvcml0aG06IHN0YXRlLmFsZ29yaXRobSxcclxuICAgICAgICAgICAgICAgICAgICBhcmVhRmFjdG9yOiBzdGF0ZS5hcmVhRmFjdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3RyaWN0U2VhdHM6IHN0YXRlLmRpc3RyaWN0U2VhdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlY3Rpb25UaHJlc2hvbGQ6IHN0YXRlLmVsZWN0aW9uVGhyZXNob2xkLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3RyaWN0VGhyZXNob2xkOiBzdGF0ZS5kaXN0cmljdFRocmVzaG9sZCxcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdERpdmlzb3I6IHN0YXRlLmZpcnN0RGl2aXNvcixcclxuICAgICAgICAgICAgICAgICAgICBsZXZlbGluZ1NlYXRzOiBzdGF0ZS5sZXZlbGluZ1NlYXRzLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBjYXNlIENvbXB1dGF0aW9uTWVudUFjdGlvblR5cGUuUkVTRVRfU0FWRURfU0VUVElOR1M6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIGFsZ29yaXRobTogc3RhdGUuY29tcGFyaXNvbi5hbGdvcml0aG0sXHJcbiAgICAgICAgICAgICAgICBhcmVhRmFjdG9yOiBzdGF0ZS5jb21wYXJpc29uLmFyZWFGYWN0b3IsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFNlYXRzOiBzdGF0ZS5jb21wYXJpc29uLmRpc3RyaWN0U2VhdHMsXHJcbiAgICAgICAgICAgICAgICBlbGVjdGlvblRocmVzaG9sZDogc3RhdGUuY29tcGFyaXNvbi5lbGVjdGlvblRocmVzaG9sZCxcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0VGhyZXNob2xkOiBzdGF0ZS5jb21wYXJpc29uLmRpc3RyaWN0VGhyZXNob2xkLFxyXG4gICAgICAgICAgICAgICAgZmlyc3REaXZpc29yOiBzdGF0ZS5jb21wYXJpc29uLmZpcnN0RGl2aXNvcixcclxuICAgICAgICAgICAgICAgIGxldmVsaW5nU2VhdHM6IHN0YXRlLmNvbXBhcmlzb24ubGV2ZWxpbmdTZWF0cyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBjYXNlIENvbXB1dGF0aW9uTWVudUFjdGlvblR5cGUuVE9HR0xFX0FVVE9fQ09NUFVURTpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgYXV0b0NvbXB1dGU6IGFjdGlvbi5hdXRvQ29tcHV0ZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBjYXNlIEdsb2JhbEFjdGlvblR5cGUuQ0xFQVJfU1RBVEU6XHJcbiAgICAgICAgICAgIHJldHVybiB1bmxvYWRlZFN0YXRlO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGNoZWNrRXhoYXVzdGl2ZWx5KGFjdGlvbik7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQnV0dG9uUHJvcHMge1xyXG4gICAgdGl0bGU6IHN0cmluZztcclxuICAgIG9uUHJlc3M/OiAoKSA9PiBhbnk7XHJcbiAgICBhY2Nlc3NpYmlsaXR5TGFiZWw/OiBzdHJpbmc7XHJcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgICB0eXBlOiBcImJ1dHRvblwiIHwgXCJzdWJtaXRcIiB8IFwicmVzZXRcIiB8IHVuZGVmaW5lZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJ1dHRvbjxUUD4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VFAgJiBCdXR0b25Qcm9wcywge30+IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5TGFiZWx9XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLm9uUHJlc3N9XHJcbiAgICAgICAgICAgICAgICB0eXBlPXt0aGlzLnByb3BzLnR5cGV9XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BidG4ke3RoaXMucHJvcHMuY2xhc3NOYW1lID8gXCIgXCIgKyB0aGlzLnByb3BzLmNsYXNzTmFtZSA6IFwiXCJ9YH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMudGl0bGV9XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNtYXJ0TnVtZXJpY0lucHV0UHJvcHMge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgdGl0bGU6IHN0cmluZztcclxuICAgIG9uQ2hhbmdlOiAoc3RyaW5nVmFsdWU6IHN0cmluZywgbnVtZXJpY1ZhbHVlOiBudW1iZXIpID0+IGFueTtcclxuICAgIHZhbHVlOiBzdHJpbmc7XHJcbiAgICBkZWZhdWx0VmFsdWU6IG51bWJlcjtcclxuICAgIG1pbjogbnVtYmVyO1xyXG4gICAgbWF4OiBudW1iZXI7XHJcbiAgICBvcmlnaW5hbFZhbHVlPzogc3RyaW5nO1xyXG4gICAgaW50ZWdlcj86IGJvb2xlYW47XHJcbiAgICBzbGlkZXI/OiBib29sZWFuO1xyXG4gICAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xyXG4gICAgaGlkZGVuPzogYm9vbGVhbjtcclxuICAgIHRvb2x0aXA/OiBSZWFjdC5SZWFjdE5vZGU7XHJcbiAgICBpc0hpZGRlblRvdWNoPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNtYXJ0TnVtZXJpY0lucHV0PFQgZXh0ZW5kcyBTbWFydE51bWVyaWNJbnB1dFByb3BzPiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxULCB7fT4ge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWxpZGF0ZUlucHV0KHRoaXMucHJvcHMudmFsdWUpO1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmdXYXNDaGFuZ2VkID0gdGhpcy5wcm9wcy5vcmlnaW5hbFZhbHVlICYmIHRoaXMucHJvcHMub3JpZ2luYWxWYWx1ZSAhPT0gdGhpcy5wcm9wcy52YWx1ZTtcclxuICAgICAgICBjb25zdCBpc0hpZGRlblRvdWNoID0gdGhpcy5wcm9wcy5pc0hpZGRlblRvdWNoID09PSB0cnVlID8gXCJpcy1oaWRkZW4tdG91Y2hcIiA6IFwiXCI7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBoaWRkZW49e3RoaXMucHJvcHMuaGlkZGVufSBjbGFzc05hbWU9e1wiZmllbGQgXCIgKyBpc0hpZGRlblRvdWNofT5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPXt0aGlzLnByb3BzLm5hbWV9IGNsYXNzTmFtZT1cImxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMudGl0bGV9IHt0aGlzLnByb3BzLnRvb2x0aXB9XHJcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0IGlzLXByaW1hcnkgaXMtZnVsbHdpZHRoXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT17XCJudW1iZXJcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17dGhpcy5wcm9wcy5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy51cGRhdGVOdW1lcmljfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dmFsdWUubnVtZXJpY1ZhbHVlLnRvU3RyaW5nKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZS5zdHJpbmdWYWx1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluPXt0aGlzLnByb3BzLm1pbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcD17dGhpcy5wcm9wcy5pbnRlZ2VyID8gMSA6IDAuMX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4PXt0aGlzLnByb3BzLm1heH1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5zbGlkZXIgJiYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImlzLXByaW1hcnkgaXMtZnVsbHdpZHRoXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9e1wicmFuZ2VcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZVNsaWRlcn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZS5udW1lcmljVmFsdWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW49e3RoaXMucHJvcHMubWlufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcD17dGhpcy5wcm9wcy5pbnRlZ2VyID8gMSA6IDAuMX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heD17dGhpcy5wcm9wcy5tYXh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAge3NldHRpbmdXYXNDaGFuZ2VkICYmIDxwIGNsYXNzTmFtZT1cImhlbHBcIj5PcmlnaW5hbHQ6IHt0aGlzLnByb3BzLm9yaWdpbmFsVmFsdWV9PC9wPn1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVOdW1lcmljID0gKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy52YWxpZGF0ZUlucHV0KGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZShpbnB1dC5zdHJpbmdWYWx1ZSwgaW5wdXQubnVtZXJpY1ZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgdXBkYXRlU2xpZGVyID0gKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5wcm9wcy5pbnRlZ2VyID8gcGFyc2VJbnQoZXZlbnQudGFyZ2V0LnZhbHVlKSA6IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGV2ZW50LnRhcmdldC52YWx1ZSwgdmFsdWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YWxpZGF0ZUlucHV0KGlucHV0OiBzdHJpbmcpOiB7IHN0cmluZ1ZhbHVlOiBzdHJpbmc7IG51bWVyaWNWYWx1ZTogbnVtYmVyIH0ge1xyXG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gUmVnRXhwKC8oXi0kKXwoXi0/XFxkKyhcXC5cXGQqKT8kKS8pO1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIGxldCB2YWx1ZTogbnVtYmVyO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5oaWRkZW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgbnVtZXJpY1ZhbHVlOiBkZWZhdWx0VmFsdWUsIHN0cmluZ1ZhbHVlOiBpbnB1dCB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlZ2V4LnRlc3QoaW5wdXQpID09PSBmYWxzZSAmJiBpbnB1dCAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAvLyBNYXRjaGVzIGFueSBudW1iZXJzIGFzIHdlbGwgYXMgXCJcIiwgXCItXCIgYW5kIFwiMy5cIlxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUlucHV0KHRoaXMucHJvcHMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlucHV0LmluZGV4T2YoXCItXCIpID09PSAwICYmIHRoaXMucHJvcHMubWluID49IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVJbnB1dCh0aGlzLnByb3BzLnZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpbnB1dCA9PT0gXCJcIiB8fCBpbnB1dCA9PT0gXCItXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgc3RyaW5nVmFsdWU6IGlucHV0LCBudW1lcmljVmFsdWU6IGRlZmF1bHRWYWx1ZSB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlucHV0LmluZGV4T2YoXCIuXCIpICE9PSAtMSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5pbnRlZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUlucHV0KHRoaXMucHJvcHMudmFsdWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmluZGV4T2YoXCIuXCIpID09PSBpbnB1dC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJlZml4ID0gaW5wdXQuc3Vic3RyaW5nKDAsIGlucHV0LmluZGV4T2YoXCIuXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KHByZWZpeCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdChpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KGlucHV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSA+PSB0aGlzLnByb3BzLm1pbiAmJiB2YWx1ZSA8PSB0aGlzLnByb3BzLm1heCkge1xyXG4gICAgICAgICAgICByZXR1cm4geyBzdHJpbmdWYWx1ZTogaW5wdXQsIG51bWVyaWNWYWx1ZTogdmFsdWUgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUlucHV0KHRoaXMucHJvcHMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgU21hcnROdW1lcmljSW5wdXRQcm9wcywgU21hcnROdW1lcmljSW5wdXQgfSBmcm9tIFwiLi4vU21hcnROdW1lcmljSW5wdXRcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU21hcnROdW1lcmljSW5wdXRXaXRoTGFiZWxQcm9wcyBleHRlbmRzIFNtYXJ0TnVtZXJpY0lucHV0UHJvcHMge1xyXG4gICAgbGFiZWw6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNtYXJ0TnVtZXJpY0lucHV0V2l0aExhYmVsIGV4dGVuZHMgU21hcnROdW1lcmljSW5wdXQ8U21hcnROdW1lcmljSW5wdXRXaXRoTGFiZWxQcm9wcz4ge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWxpZGF0ZUlucHV0KHRoaXMucHJvcHMudmFsdWUpO1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmdXYXNDaGFuZ2VkID0gdGhpcy5wcm9wcy5vcmlnaW5hbFZhbHVlICYmIHRoaXMucHJvcHMub3JpZ2luYWxWYWx1ZSAhPT0gdGhpcy5wcm9wcy52YWx1ZTtcclxuICAgICAgICBjb25zdCBsYWJlbCA9IHRoaXMucHJvcHMubGFiZWw7XHJcbiAgICAgICAgY29uc3QgaXNIaWRkZW5Ub3VjaCA9IHRoaXMucHJvcHMuaXNIaWRkZW5Ub3VjaCA9PT0gdHJ1ZSA/IFwiaXMtaGlkZGVuLXRvdWNoXCIgOiBcIlwiO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgaGlkZGVuPXt0aGlzLnByb3BzLmhpZGRlbn0gY2xhc3NOYW1lPXtcImZpZWxkIFwiICsgaXNIaWRkZW5Ub3VjaH0+XHJcbiAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj17dGhpcy5wcm9wcy5uYW1lfSBjbGFzc05hbWU9XCJsYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLnRpdGxlfSB7dGhpcy5wcm9wcy50b29sdGlwfVxyXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbCBoYXMtaWNvbnMtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW5wdXQgaXMtcHJpbWFyeSBpcy1mdWxsd2lkdGhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPXtcIm51bWJlclwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXt0aGlzLnByb3BzLm5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLm5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZU51bWVyaWN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt2YWx1ZS5udW1lcmljVmFsdWUudG9TdHJpbmcoKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlLnN0cmluZ1ZhbHVlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW49e3RoaXMucHJvcHMubWlufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwPXt0aGlzLnByb3BzLmludGVnZXIgPyAxIDogMC4xfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXg9e3RoaXMucHJvcHMubWF4fVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLnNsaWRlciAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaXMtcHJpbWFyeSBpcy1mdWxsd2lkdGhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT17XCJyYW5nZVwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMudXBkYXRlU2xpZGVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlLm51bWVyaWNWYWx1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbj17dGhpcy5wcm9wcy5taW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwPXt0aGlzLnByb3BzLmludGVnZXIgPyAxIDogMC4xfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4PXt0aGlzLnByb3BzLm1heH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImljb24gaGFzLXRleHQtZGFyayBpcy1tZWRpdW0gaXMtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+e2xhYmVsfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIHtzZXR0aW5nV2FzQ2hhbmdlZCAmJiA8cCBjbGFzc05hbWU9XCJoZWxwXCI+T3JpZ2luYWx0OiB7dGhpcy5wcm9wcy5vcmlnaW5hbFZhbHVlfTwvcD59XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRvb2x0aXBJbmZvUHJvcHMge1xyXG4gICAgdGV4dDogc3RyaW5nO1xyXG4gICAgdXJsPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVG9vbHRpcEluZm8gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VG9vbHRpcEluZm9Qcm9wcywge30+IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpY29uIGhhcy10b29sdGlwLW11bHRpbGluZSBoYXMtdG9vbHRpcC1hcnJvd1wiIGRhdGEtdG9vbHRpcD17dGhpcy5wcm9wcy50ZXh0fT5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9e3RoaXMucHJvcHMudXJsfSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub3JlZmVycmVyIG5vb3BlbmVyXCI+XHJcbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXMgZmEtaW5mby1jaXJjbGUgaGFzLXRleHQtcHJpbWFyeVwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFRvb2x0aXBJbmZvUHJvcHMgfSBmcm9tIFwiLi9Ub29sdGlwSW5mb1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRvb2x0aXBJbmZvUmlnaHQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VG9vbHRpcEluZm9Qcm9wcywge30+IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaWNvbiBoYXMtdG9vbHRpcC1tdWx0aWxpbmUgaGFzLXRvb2x0aXAtYXJyb3cgaGFzLXRvb2x0aXAtcmlnaHRcIlxyXG4gICAgICAgICAgICAgICAgZGF0YS10b29sdGlwPXt0aGlzLnByb3BzLnRleHR9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9e3RoaXMucHJvcHMudXJsfSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub3JlZmVycmVyIG5vb3BlbmVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLWluZm8tY2lyY2xlIGhhcy10ZXh0LXByaW1hcnlcIiAvPlxyXG4gICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGF2aW5pYVNWR0xvZ29Qcm9wcyB7XHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGF2aW5pYVNWR0xvZ28gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8TGF2aW5pYVNWR0xvZ29Qcm9wcywge30+IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCB7IHRpdGxlIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGF2aW5pYS1sb2dvXCI+XHJcbiAgICAgICAgICAgICAgICA8c3ZnIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiB2aWV3Qm94PVwiMCAwIDE2NCA0OFwiIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRleHQgZm9udFNpemU9XCIyNlwiIHg9XCI1NFwiIHk9XCIzNFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7dGl0bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtMzIuODMxIC03NS4xMDEpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIm0zNS4zNjQgODEuMDM5aDQyLjA5NWwtMjAuOTA0LTUuNjAxMnpcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJtMzUuMzY0IDg0LjE3OWg0MS45NjFsMC45MzMwNSAwLjUzODd2Mi40MDEzbC0wLjc2NzIgMC43NjcyaC00Mi4wNmwtMC43ODQ1LTAuNzg0NTF2LTIuMjU0NXpcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJtMzguNjM4IDg4Ljk5aC0zLjQ3NDV2MS4wNjkxbDEuMDYyMiAwLjYxMzI3aDEuNTQzN2wwLjk2NzEzLTAuNTU4Mzh6XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwibTQ0LjM5OCA4OC45NTFoLTMuNDc0NXYxLjA2OTFsMS4wNjIyIDAuNjEzMjdoMS41NDM3bDAuOTY3MTMtMC41NTgzOHpcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJtNDkuOTQzIDg4Ljk1MWgtMy40NzQ1djEuMDY5MWwxLjA2MjIgMC42MTMyN2gxLjU0MzdsMC45NjcxMy0wLjU1ODM4elwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIm01NS41MDMgODguOTRoLTMuNDc0NXYxLjA2OTFsMS4wNjIyIDAuNjEzMjdoMS41NDM3bDAuOTY3MTMtMC41NTgzOHpcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJtNjEuMDUyIDg4Ljk0aC0zLjQ3NDV2MS4wNjkxbDEuMDYyMiAwLjYxMzI3aDEuNTQzN2wwLjk2NzEzLTAuNTU4Mzh6XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwibTY2LjcyNCA4OC45NWgtMy40NzQ1djEuMDY5MWwxLjA2MjIgMC42MTMyN2gxLjU0MzdsMC45NjcxMy0wLjU1ODM4elwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIm03Mi4yMiA4OC45NWgtMy40NzQ1djEuMDY5MWwxLjA2MjIgMC42MTMyN2gxLjU0MzdsMC45NjcxMy0wLjU1ODM4elwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIm03Ny44NTMgODguOTVoLTMuNDc0NXYxLjA2OTFsMS4wNjIyIDAuNjEzMjdoMS41NDM3bDAuOTY3MTMtMC41NTgzOHpcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJtMzcuNTkxIDkxLjgwNyAwLjkzMDE4IDIxLjkxMWgtMC40OTA5M3YwLjQ2NTA5aC0yLjI0Nzl2LTAuNDM5MjVoLTAuNDM5MjVsMC45MzAxOC0yMS45Mzd6XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwibTQzLjMwNSA5MS44MDcgMC45MzAxOCAyMS45MTFoLTAuNDkwOTN2MC40NjUwOWgtMi4yNDc5di0wLjQzOTI1aC0wLjQzOTI1bDAuOTMwMTgtMjEuOTM3elwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIm00OC44MjYgOTEuNzgxIDAuOTMwMTggMjEuOTExaC0wLjQ5MDkzdjAuNDY1MDloLTIuMjQ3OXYtMC40MzkyNWgtMC40MzkyNWwwLjkzMDE4LTIxLjkzN3pcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJtNTQuNDUgOTEuNzU1IDAuOTMwMTggMjEuOTExaC0wLjQ5MDkzdjAuNDY1MDloLTIuMjQ3OXYtMC40MzkyNWgtMC40MzkyNWwwLjkzMDE4LTIxLjkzN3pcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJtNjAuMTA1IDkxLjc1NSAwLjkzMDE4IDIxLjkxMWgtMC40OTA5M3YwLjQ2NTA5aC0yLjI0Nzl2LTAuNDM5MjVoLTAuNDM5MjVsMC45MzAxOC0yMS45Mzd6XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwibTY1LjY4MSA5MS43NTUgMC45MzAxNyAyMS45MTFoLTAuNDkwOTN2MC40NjUwOWgtMi4yNDc5di0wLjQzOTI1aC0wLjQzOTI1bDAuOTMwMTgtMjEuOTM3elwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIm03MS4xNzcgOTEuNzAzIDAuOTMwMTggMjEuOTExaC0wLjQ5MDkzdjAuNDY1MDloLTIuMjQ3OXYtMC40MzkyNWgtMC40MzkyNWwwLjkzMDE4LTIxLjkzN3pcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJtNzYuNzU0IDkxLjc1NSAwLjkzMDE4IDIxLjkxMWgtMC40OTA5M3YwLjQ2NTA5aC0yLjI0Nzl2LTAuNDM5MjVoLTAuNDM5MjVsMC45MzAxOC0yMS45Mzd6XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwibTc5LjI3NyAxMTkuNDItNDUuODkxIDhlLTNzLTEuMTY5My0wLjQ5MzMgMC4zODM2OC0zLjI1MjFsNDUuMTI0LThlLTMgMC4yNjQ1OC0xLjllLTRjMS44MTc2IDIuNzU4NiAwLjM4MzY4IDMuMjUyMyAwLjM4MzY4IDMuMjUyM3pcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJtMzQuMjI2IDgzLjA3OS0wLjU0ODExLTAuNTQ4MTEgMC41OTM3OS0wLjU5Mzc5aDQ0LjQ1bDAuNTQ4MTEgMC41NDgxMS0wLjU5Mzc4IDAuNTkzNzl6XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZz5cclxuICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFJvb3RTdGF0ZSB9IGZyb20gXCIuLi8uLi9yZWR1Y2Vyc1wiO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IENvbXB1dGF0aW9uTWVudVByb3BzLCBDb21wdXRhdGlvbk1lbnUgfSBmcm9tIFwiLi9Db21wdXRhdGlvbk1lbnVcIjtcclxuaW1wb3J0IHsgdXBkYXRlQ29tcHV0YXRpb25NZW51LCB0b2dnbGVBdXRvQ29tcHV0ZSwgc2F2ZVNldHRpbmdzLCByZXNldFNhdmVkU2V0dGluZ3MgfSBmcm9tIFwiLlwiO1xyXG5pbXBvcnQge1xyXG4gICAgQ29tcHV0YXRpb25QYXlsb2FkLFxyXG4gICAgdXBkYXRlQ29tcHV0YXRpb24sXHJcbiAgICByZXNldFNhdmVkQ29tcHV0YXRpb24sXHJcbiAgICB1cGRhdGVIaXN0b3JpY2FsLFxyXG4gICAgc2F2ZUNvbXBhcmlzb24sXHJcbiAgICBjb21wdXRhdGlvbkRlZmF1bHRzLFxyXG59IGZyb20gXCIuLi8uLi9jb21wdXRhdGlvblwiO1xyXG5pbXBvcnQgeyBWb3RlcywgTWV0cmljcywgUGFyYW1ldGVycyB9IGZyb20gXCIuLi8uLi9yZXF1ZXN0ZWQtZGF0YS9yZXF1ZXN0ZWQtZGF0YS1tb2RlbHNcIjtcclxuaW1wb3J0IHsgQ29tcHV0YXRpb25NZW51UGF5bG9hZCB9IGZyb20gXCIuL2NvbXB1dGF0aW9uLW1lbnUtbW9kZWxzXCI7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoXHJcbiAgICBzdGF0ZTogUm9vdFN0YXRlXHJcbik6IFBpY2s8XHJcbiAgICBDb21wdXRhdGlvbk1lbnVQcm9wcyxcclxuICAgIHwgXCJjb21wdXRhdGlvblBheWxvYWRcIlxyXG4gICAgfCBcInNldHRpbmdzUGF5bG9hZFwiXHJcbiAgICB8IFwic2hvd0NvbXBhcmlzb25cIlxyXG4gICAgfCBcInBhcmFtZXRlcnNcIlxyXG4gICAgfCBcIm1ldHJpY3NcIlxyXG4gICAgfCBcInZvdGVzXCJcclxuICAgIHwgXCJtZXJnZURpc3RyaWN0c1wiXHJcbiAgICB8IFwidXNlMjAyMURpc3RyaWJ1dGlvblwiXHJcbj4gPT4gKHtcclxuICAgIGNvbXB1dGF0aW9uUGF5bG9hZDoge1xyXG4gICAgICAgIGFsZ29yaXRobTogc3RhdGUuY29tcHV0YXRpb25TdGF0ZS5hbGdvcml0aG0sXHJcbiAgICAgICAgZmlyc3REaXZpc29yOiBzdGF0ZS5jb21wdXRhdGlvblN0YXRlLmZpcnN0RGl2aXNvcixcclxuICAgICAgICBlbGVjdGlvblRocmVzaG9sZDogc3RhdGUuY29tcHV0YXRpb25TdGF0ZS5lbGVjdGlvblRocmVzaG9sZCxcclxuICAgICAgICBkaXN0cmljdFRocmVzaG9sZDogc3RhdGUuY29tcHV0YXRpb25TdGF0ZS5kaXN0cmljdFRocmVzaG9sZCxcclxuICAgICAgICBkaXN0cmljdFNlYXRzOiBzdGF0ZS5jb21wdXRhdGlvblN0YXRlLmRpc3RyaWN0U2VhdHMsXHJcbiAgICAgICAgbGV2ZWxpbmdTZWF0czogc3RhdGUuY29tcHV0YXRpb25TdGF0ZS5sZXZlbGluZ1NlYXRzLFxyXG4gICAgICAgIGFyZWFGYWN0b3I6IHN0YXRlLmNvbXB1dGF0aW9uU3RhdGUuYXJlYUZhY3RvcixcclxuICAgICAgICB2b3Rlczogc3RhdGUuY29tcHV0YXRpb25TdGF0ZS52b3RlcyxcclxuICAgICAgICBtZXRyaWNzOiBzdGF0ZS5jb21wdXRhdGlvblN0YXRlLm1ldHJpY3MsXHJcbiAgICAgICAgcGFyYW1ldGVyczogc3RhdGUuY29tcHV0YXRpb25TdGF0ZS5wYXJhbWV0ZXJzLFxyXG4gICAgICAgIHBhcnR5TWFwOiBzdGF0ZS5yZXF1ZXN0ZWREYXRhU3RhdGUucGFydHlNYXAsXHJcbiAgICB9LFxyXG4gICAgc2V0dGluZ3NQYXlsb2FkOiB7XHJcbiAgICAgICAgZWxlY3Rpb25ZZWFyczogc3RhdGUuc2V0dGluZ3NTdGF0ZS5lbGVjdGlvblllYXJzLFxyXG4gICAgICAgIHllYXI6IHN0YXRlLnNldHRpbmdzU3RhdGUueWVhcixcclxuICAgICAgICBhbGdvcml0aG06IHN0YXRlLnNldHRpbmdzU3RhdGUuYWxnb3JpdGhtLFxyXG4gICAgICAgIGZpcnN0RGl2aXNvcjogc3RhdGUuc2V0dGluZ3NTdGF0ZS5maXJzdERpdmlzb3IsXHJcbiAgICAgICAgZWxlY3Rpb25UaHJlc2hvbGQ6IHN0YXRlLnNldHRpbmdzU3RhdGUuZWxlY3Rpb25UaHJlc2hvbGQsXHJcbiAgICAgICAgZGlzdHJpY3RUaHJlc2hvbGQ6IHN0YXRlLnNldHRpbmdzU3RhdGUuZGlzdHJpY3RUaHJlc2hvbGQsXHJcbiAgICAgICAgZGlzdHJpY3RTZWF0czogc3RhdGUuc2V0dGluZ3NTdGF0ZS5kaXN0cmljdFNlYXRzLFxyXG4gICAgICAgIGxldmVsaW5nU2VhdHM6IHN0YXRlLnNldHRpbmdzU3RhdGUubGV2ZWxpbmdTZWF0cyxcclxuICAgICAgICBhdXRvQ29tcHV0ZTogc3RhdGUuc2V0dGluZ3NTdGF0ZS5hdXRvQ29tcHV0ZSxcclxuICAgICAgICBmb3JjZUNvbXB1dGU6IGZhbHNlLFxyXG4gICAgICAgIGFyZWFGYWN0b3I6IHN0YXRlLnNldHRpbmdzU3RhdGUuYXJlYUZhY3RvcixcclxuICAgICAgICBjb21wYXJpc29uOiBzdGF0ZS5zZXR0aW5nc1N0YXRlLmNvbXBhcmlzb24sXHJcbiAgICB9LFxyXG4gICAgc2hvd0NvbXBhcmlzb246IHN0YXRlLnByZXNlbnRhdGlvbk1lbnVTdGF0ZS5zaG93Q29tcGFyaXNvbixcclxuICAgIHBhcmFtZXRlcnM6IHN0YXRlLnJlcXVlc3RlZERhdGFTdGF0ZS5wYXJhbWV0ZXJzLFxyXG4gICAgbWV0cmljczogc3RhdGUucmVxdWVzdGVkRGF0YVN0YXRlLm1ldHJpY3MsXHJcbiAgICB2b3Rlczogc3RhdGUucmVxdWVzdGVkRGF0YVN0YXRlLnZvdGVzLFxyXG4gICAgbWVyZ2VEaXN0cmljdHM6IHN0YXRlLnByZXNlbnRhdGlvbk1lbnVTdGF0ZS5tZXJnZURpc3RyaWN0cyxcclxuICAgIHVzZTIwMjFEaXN0cmlidXRpb246IHN0YXRlLnByZXNlbnRhdGlvbk1lbnVTdGF0ZS51c2UyMDIxRGlzdHJpYnV0aW9uLFxyXG59KTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChcclxuICAgIGRpc3BhdGNoOiBhbnlcclxuKTogUGljazxcclxuICAgIENvbXB1dGF0aW9uTWVudVByb3BzLFxyXG4gICAgfCBcInVwZGF0ZUNhbGN1bGF0aW9uXCJcclxuICAgIHwgXCJ1cGRhdGVTZXR0aW5nc1wiXHJcbiAgICB8IFwidG9nZ2xlQXV0b0NvbXB1dGVcIlxyXG4gICAgfCBcInJlc2V0VG9IaXN0b3JpY2FsU2V0dGluZ3NcIlxyXG4gICAgfCBcInJlc2V0Q29tcGFyaXNvblwiXHJcbiAgICB8IFwicmVzZXRIaXN0b3JpY2FsXCJcclxuICAgIHwgXCJzYXZlQ29tcGFyaXNvblwiXHJcbj4gPT4gKHtcclxuICAgIHVwZGF0ZUNhbGN1bGF0aW9uOiAoY29tcHV0YXRpb25QYXlsb2FkOiBDb21wdXRhdGlvblBheWxvYWQsIGF1dG9Db21wdXRlOiBib29sZWFuLCBmb3JjZUNvbXB1dGU6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBpZiAoYXV0b0NvbXB1dGUgfHwgZm9yY2VDb21wdXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQ6IENvbXB1dGF0aW9uUGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgIGFsZ29yaXRobTogY29tcHV0YXRpb25QYXlsb2FkLmFsZ29yaXRobSxcclxuICAgICAgICAgICAgICAgIGZpcnN0RGl2aXNvcjogY29tcHV0YXRpb25QYXlsb2FkLmZpcnN0RGl2aXNvcixcclxuICAgICAgICAgICAgICAgIGVsZWN0aW9uVGhyZXNob2xkOiBjb21wdXRhdGlvblBheWxvYWQuZWxlY3Rpb25UaHJlc2hvbGQsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFRocmVzaG9sZDogY29tcHV0YXRpb25QYXlsb2FkLmRpc3RyaWN0VGhyZXNob2xkLFxyXG4gICAgICAgICAgICAgICAgZGlzdHJpY3RTZWF0czogY29tcHV0YXRpb25QYXlsb2FkLmRpc3RyaWN0U2VhdHMsXHJcbiAgICAgICAgICAgICAgICBsZXZlbGluZ1NlYXRzOiBjb21wdXRhdGlvblBheWxvYWQubGV2ZWxpbmdTZWF0cyxcclxuICAgICAgICAgICAgICAgIGFyZWFGYWN0b3I6IGNvbXB1dGF0aW9uUGF5bG9hZC5hcmVhRmFjdG9yLFxyXG4gICAgICAgICAgICAgICAgdm90ZXM6IGNvbXB1dGF0aW9uUGF5bG9hZC52b3RlcyxcclxuICAgICAgICAgICAgICAgIG1ldHJpY3M6IGNvbXB1dGF0aW9uUGF5bG9hZC5tZXRyaWNzLFxyXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyczogY29tcHV0YXRpb25QYXlsb2FkLnBhcmFtZXRlcnMsXHJcbiAgICAgICAgICAgICAgICBwYXJ0eU1hcDogY29tcHV0YXRpb25QYXlsb2FkLnBhcnR5TWFwLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCB1cGRhdGVDYWxjdWxhdGlvbkFjdGlvbiA9IHVwZGF0ZUNvbXB1dGF0aW9uKHBheWxvYWQpO1xyXG4gICAgICAgICAgICBkaXNwYXRjaCh1cGRhdGVDYWxjdWxhdGlvbkFjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHVwZGF0ZVNldHRpbmdzOiAoc2V0dGluZ3NQYXlsb2FkOiBDb21wdXRhdGlvbk1lbnVQYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlU2V0dGluZ3NBY3Rpb24gPSB1cGRhdGVDb21wdXRhdGlvbk1lbnUoc2V0dGluZ3NQYXlsb2FkKTtcclxuICAgICAgICBkaXNwYXRjaCh1cGRhdGVTZXR0aW5nc0FjdGlvbik7XHJcbiAgICB9LFxyXG4gICAgdG9nZ2xlQXV0b0NvbXB1dGU6IChpc0NoZWNrZWQ6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBjb25zdCB0b2dnbGVBdXRvQ29tcHV0ZUFjdGlvbiA9IHRvZ2dsZUF1dG9Db21wdXRlKGlzQ2hlY2tlZCk7XHJcbiAgICAgICAgZGlzcGF0Y2godG9nZ2xlQXV0b0NvbXB1dGVBY3Rpb24pO1xyXG4gICAgfSxcclxuICAgIHJlc2V0VG9IaXN0b3JpY2FsU2V0dGluZ3M6IChcclxuICAgICAgICBzZXR0aW5nc1BheWxvYWQ6IENvbXB1dGF0aW9uTWVudVBheWxvYWQsXHJcbiAgICAgICAgdm90ZXM6IFZvdGVzW10sXHJcbiAgICAgICAgbWV0cmljczogTWV0cmljc1tdLFxyXG4gICAgICAgIHBhcmFtZXRlcnM6IFBhcmFtZXRlcnMsXHJcbiAgICAgICAgcGFydHlNYXA6IF8uRGljdGlvbmFyeTxzdHJpbmc+XHJcbiAgICApID0+IHtcclxuICAgICAgICBjb25zdCBmaXJzdERpdmlzb3IgPSBwYXJhbWV0ZXJzLmFsZ29yaXRobS5wYXJhbWV0ZXJzW1wiRmlyc3QgRGl2aXNvclwiXVxyXG4gICAgICAgICAgICA/IHBhcmFtZXRlcnMuYWxnb3JpdGhtLnBhcmFtZXRlcnNbXCJGaXJzdCBEaXZpc29yXCJdXHJcbiAgICAgICAgICAgIDogY29tcHV0YXRpb25EZWZhdWx0cy5maXJzdERpdmlzb3I7XHJcblxyXG4gICAgICAgIGlmIChzZXR0aW5nc1BheWxvYWQuYXV0b0NvbXB1dGUpIHtcclxuICAgICAgICAgICAgY29uc3QgcGF5bG9hZDogQ29tcHV0YXRpb25QYXlsb2FkID0ge1xyXG4gICAgICAgICAgICAgICAgYWxnb3JpdGhtOiBwYXJhbWV0ZXJzLmFsZ29yaXRobS5hbGdvcml0aG0sXHJcbiAgICAgICAgICAgICAgICBmaXJzdERpdmlzb3IsXHJcbiAgICAgICAgICAgICAgICBlbGVjdGlvblRocmVzaG9sZDogcGFyYW1ldGVycy50aHJlc2hvbGQsXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdFRocmVzaG9sZDogMCxcclxuICAgICAgICAgICAgICAgIGRpc3RyaWN0U2VhdHM6IHBhcmFtZXRlcnMuZGlzdHJpY3RTZWF0cyxcclxuICAgICAgICAgICAgICAgIGxldmVsaW5nU2VhdHM6IHBhcmFtZXRlcnMubGV2ZWxpbmdTZWF0cyxcclxuICAgICAgICAgICAgICAgIGFyZWFGYWN0b3I6IHBhcmFtZXRlcnMuYXJlYUZhY3RvcixcclxuICAgICAgICAgICAgICAgIHZvdGVzLFxyXG4gICAgICAgICAgICAgICAgbWV0cmljcyxcclxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMsXHJcbiAgICAgICAgICAgICAgICBwYXJ0eU1hcCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgdXBkYXRlSGlzdG9yaWNhbEFjdGlvbiA9IHVwZGF0ZUhpc3RvcmljYWwodm90ZXMsIG1ldHJpY3MsIHBhcmFtZXRlcnMsIHBhcnR5TWFwKTtcclxuICAgICAgICAgICAgZGlzcGF0Y2godXBkYXRlSGlzdG9yaWNhbEFjdGlvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZUNhbGN1bGF0aW9uQWN0aW9uID0gdXBkYXRlQ29tcHV0YXRpb24ocGF5bG9hZCk7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHVwZGF0ZUNhbGN1bGF0aW9uQWN0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld1NldHRpbmdzUGF5bG9hZDogQ29tcHV0YXRpb25NZW51UGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgLi4uc2V0dGluZ3NQYXlsb2FkLFxyXG4gICAgICAgICAgICBhbGdvcml0aG06IHBhcmFtZXRlcnMuYWxnb3JpdGhtLmFsZ29yaXRobSxcclxuICAgICAgICAgICAgZmlyc3REaXZpc29yOiBmaXJzdERpdmlzb3IudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgZWxlY3Rpb25UaHJlc2hvbGQ6IHBhcmFtZXRlcnMudGhyZXNob2xkLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgIGRpc3RyaWN0VGhyZXNob2xkOiBcIjBcIixcclxuICAgICAgICAgICAgZGlzdHJpY3RTZWF0czogcGFyYW1ldGVycy5kaXN0cmljdFNlYXRzLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgIGxldmVsaW5nU2VhdHM6IHBhcmFtZXRlcnMubGV2ZWxpbmdTZWF0cy50b1N0cmluZygpLFxyXG4gICAgICAgICAgICBhcmVhRmFjdG9yOiBwYXJhbWV0ZXJzLmFyZWFGYWN0b3IudG9TdHJpbmcoKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZVNldHRpbmdzQWN0aW9uID0gdXBkYXRlQ29tcHV0YXRpb25NZW51KG5ld1NldHRpbmdzUGF5bG9hZCk7XHJcbiAgICAgICAgZGlzcGF0Y2godXBkYXRlU2V0dGluZ3NBY3Rpb24pO1xyXG4gICAgICAgIGNvbnN0IHNhdmVTZXR0aW5nc0FjdGlvbiA9IHNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgIGRpc3BhdGNoKHNhdmVTZXR0aW5nc0FjdGlvbik7XHJcbiAgICB9LFxyXG4gICAgcmVzZXRDb21wYXJpc29uOiAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzZXRTYXZlZENvbXB1dGF0aW9uQWN0aW9uID0gcmVzZXRTYXZlZENvbXB1dGF0aW9uKCk7XHJcbiAgICAgICAgZGlzcGF0Y2gocmVzZXRTYXZlZENvbXB1dGF0aW9uQWN0aW9uKTtcclxuICAgICAgICBjb25zdCByZXNldFNhdmVkU2V0dGluZ3NBY3Rpb24gPSByZXNldFNhdmVkU2V0dGluZ3MoKTtcclxuICAgICAgICBkaXNwYXRjaChyZXNldFNhdmVkU2V0dGluZ3NBY3Rpb24pO1xyXG4gICAgfSxcclxuICAgIHJlc2V0SGlzdG9yaWNhbDogKHZvdGVzOiBWb3Rlc1tdLCBtZXRyaWNzOiBNZXRyaWNzW10sIHBhcmFtZXRlcnM6IFBhcmFtZXRlcnMsIHBhcnR5TWFwOiBfLkRpY3Rpb25hcnk8c3RyaW5nPikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZUhpc3RvcmljYWxBY3Rpb24gPSB1cGRhdGVIaXN0b3JpY2FsKHZvdGVzLCBtZXRyaWNzLCBwYXJhbWV0ZXJzLCBwYXJ0eU1hcCk7XHJcbiAgICAgICAgZGlzcGF0Y2godXBkYXRlSGlzdG9yaWNhbEFjdGlvbik7XHJcbiAgICB9LFxyXG4gICAgc2F2ZUNvbXBhcmlzb246ICgpID0+IHtcclxuICAgICAgICBjb25zdCBzYXZlQ29tcGFyaXNvbkFjdGlvbiA9IHNhdmVDb21wYXJpc29uKCk7XHJcbiAgICAgICAgZGlzcGF0Y2goc2F2ZUNvbXBhcmlzb25BY3Rpb24pO1xyXG4gICAgICAgIGNvbnN0IHNhdmVTZXR0aW5nc0FjdGlvbiA9IHNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgIGRpc3BhdGNoKHNhdmVTZXR0aW5nc0FjdGlvbik7XHJcbiAgICB9LFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBDb25uZWN0ZWRDb21wdXRhdGlvbk1lbnUgPSBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShDb21wdXRhdGlvbk1lbnUgYXMgYW55KTtcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFByZXNlbnRhdGlvblNlbGVjdGlvbiB9IGZyb20gXCIuL1ByZXNlbnRhdGlvblNlbGVjdGlvbi9QcmVzZW50YXRpb25TZWxlY3Rpb25cIjtcclxuaW1wb3J0IHsgQ29ubmVjdGVkUHJlc2VudGF0aW9uU2V0dGluZ3MgfSBmcm9tIFwiLi9QcmVzZW50YXRpb25TZXR0aW5ncy9Db25uZWN0ZWRQcmVzZW50YXRpb25TZXR0aW5nc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFByZXNlbnRhdGlvbk1lbnUgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcclxuICAgIHB1YmxpYyByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxQcmVzZW50YXRpb25TZWxlY3Rpb24gLz5cclxuICAgICAgICAgICAgICAgIDxDb25uZWN0ZWRQcmVzZW50YXRpb25TZXR0aW5ncyAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IHVubG9hZGVkU3RhdGUsIFByZXNlbnRhdGlvbk1lbnVTdGF0ZSB9IGZyb20gXCIuL3ByZXNlbnRhdGlvbi1tZW51LXN0YXRlXCI7XHJcbmltcG9ydCB7IFByZXNlbnRhdGlvbk1lbnVBY3Rpb25UeXBlLCBQcmVzZW50YXRpb25NZW51QWN0aW9uIH0gZnJvbSBcIi4vcHJlc2VudGF0aW9uLW1lbnUtYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBjaGVja0V4aGF1c3RpdmVseSB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXNcIjtcclxuaW1wb3J0IHsgR2xvYmFsQWN0aW9uVHlwZSB9IGZyb20gXCIuLi8uLi9yZWR1Y2Vycy9nbG9iYWwtYWN0aW9uc1wiO1xyXG5cclxuLyoqXHJcbiAqIFJlZHVjZXIgZm9yIHRoZSBwcmVzZW50YXRpb24gbWVudS4gSGFuZGxlcyBhbGwgc3RhdGUgY2hhbmdlcyB0byB0aGUgcHJlc2VudGF0aW9uIG1lbnUuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdGF0ZSAtIHRoZSBjdXJyZW50IHN0YXRlLCB3aXRoIGRlZmF1bHQgcGFyYW1ldGVycyBpZmYgaXQgaXNcclxuICogdW5kZWZpbmVkLlxyXG4gKiBAcGFyYW0gYWN0aW9uIC0gdGhlIGFjdGlvbiB0byBhY3QgdXBvbiB0aGUgc3RhdGUuXHJcbiAqIEByZXR1cm5zIGEgbmV3IHN0YXRlIG11dGF0ZWQgYnkgdGhlIGFjdGlvbiBwYXNzZWQgaW4gYXMgcGFyYW1ldGVyLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHByZXNlbnRhdGlvbk1lbnUoXHJcbiAgICBzdGF0ZTogUHJlc2VudGF0aW9uTWVudVN0YXRlID0gdW5sb2FkZWRTdGF0ZSxcclxuICAgIGFjdGlvbjogUHJlc2VudGF0aW9uTWVudUFjdGlvblxyXG4pOiBQcmVzZW50YXRpb25NZW51U3RhdGUge1xyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgICAgIGNhc2UgUHJlc2VudGF0aW9uTWVudUFjdGlvblR5cGUuSU5JVElBTElaRV9QUkVTRU5UQVRJT046XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRQcmVzZW50YXRpb246IGFjdGlvbi5pbml0aWFsUHJlc2VudGF0aW9uLFxyXG4gICAgICAgICAgICAgICAgZGVjaW1hbHM6IGFjdGlvbi5kZWNpbWFscyxcclxuICAgICAgICAgICAgICAgIGRlY2ltYWxzTnVtYmVyOiBhY3Rpb24uZGVjaW1hbHNOdW1iZXIsXHJcbiAgICAgICAgICAgICAgICBzaG93UGFydGllc1dpdGhvdXRTZWF0czogYWN0aW9uLnNob3dQYXJ0aWVzV2l0aG91dFNlYXRzLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIGNhc2UgUHJlc2VudGF0aW9uTWVudUFjdGlvblR5cGUuQ0hBTkdFX1BSRVNFTlRBVElPTjpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudFByZXNlbnRhdGlvbjogYWN0aW9uLnByZXNlbnRhdGlvblNlbGVjdGVkLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIGNhc2UgUHJlc2VudGF0aW9uTWVudUFjdGlvblR5cGUuQ0hBTkdFX0RFQ0lNQUxTOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICBkZWNpbWFsczogYWN0aW9uLmRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgZGVjaW1hbHNOdW1iZXI6IGFjdGlvbi5kZWNpbWFsc051bWJlcixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBjYXNlIFByZXNlbnRhdGlvbk1lbnVBY3Rpb25UeXBlLlNIT1dfUEFSVElFU19OT19TRUFUUzpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgc2hvd1BhcnRpZXNXaXRob3V0U2VhdHM6IGFjdGlvbi5zaG93UGFydGllc1dpdGhvdXRTZWF0cyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBjYXNlIFByZXNlbnRhdGlvbk1lbnVBY3Rpb25UeXBlLlNFTEVDVF9ESVNUUklDVDpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgZGlzdHJpY3RTZWxlY3RlZDogYWN0aW9uLmRpc3RyaWN0U2VsZWN0ZWQsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgY2FzZSBQcmVzZW50YXRpb25NZW51QWN0aW9uVHlwZS5DSEFOR0VfRElTUFJPUE9SVElPTkFMSVRZX0lOREVYOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICBkaXNwcm9wb3J0aW9uYWxpdHlJbmRleDogYWN0aW9uLmluZGV4LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIGNhc2UgUHJlc2VudGF0aW9uTWVudUFjdGlvblR5cGUuVE9HR0xFX1NIT1dfQ09NUEFSSVNPTjpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgc2hvd0NvbXBhcmlzb246IGFjdGlvbi5zaG93Q29tcGFyaXNvbixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBjYXNlIFByZXNlbnRhdGlvbk1lbnVBY3Rpb25UeXBlLlRPR0dMRV9TSE9XX0ZJTFRFUlM6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIHNob3dGaWx0ZXJzOiBhY3Rpb24uc2hvd0ZpbHRlcnMsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgY2FzZSBQcmVzZW50YXRpb25NZW51QWN0aW9uVHlwZS5UT0dHTEVfTUVSR0VfRElTVFJJQ1RTOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICBtZXJnZURpc3RyaWN0czogYWN0aW9uLm1lcmdlRGlzdHJpY3RzLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIGNhc2UgUHJlc2VudGF0aW9uTWVudUFjdGlvblR5cGUuVE9HR0xFX1VTRV8yMDIxX0RJU1RSSUJVVElPTjpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgdXNlMjAyMURpc3RyaWJ1dGlvbjogYWN0aW9uLnVzZTIwMjFEaXN0cmlidXRpb24sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgY2FzZSBHbG9iYWxBY3Rpb25UeXBlLkNMRUFSX1NUQVRFOiBcclxuICAgICAgICAgICAgcmV0dXJuIHVubG9hZGVkU3RhdGU7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgY2hlY2tFeGhhdXN0aXZlbHkoYWN0aW9uKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFByZXNlbnRhdGlvblNlbGVjdGlvbkJ1dHRvbiwgUHJlc2VudGF0aW9uU2VsZWN0aW9uQnV0dG9uUHJvcHMgfSBmcm9tIFwiLi9QcmVzZW50YXRpb25TZWxlY3Rpb25CdXR0b25cIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBjaGFuZ2VQcmVzZW50YXRpb24gfSBmcm9tIFwiLi4vLi4vcHJlc2VudGF0aW9uLW1lbnUtYWN0aW9uc1wiO1xyXG5cclxuaW50ZXJmYWNlIERpc3BhdGNoUHJvcHMge1xyXG4gICAgb25QcmVzczogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoOiBhbnksIG93blByb3BzOiBQcmVzZW50YXRpb25TZWxlY3Rpb25CdXR0b25Qcm9wcyk6IERpc3BhdGNoUHJvcHMgPT4gKHtcclxuICAgIG9uUHJlc3M6ICgpID0+IHtcclxuICAgICAgICBjb25zdCBhY3Rpb24gPSBjaGFuZ2VQcmVzZW50YXRpb24ob3duUHJvcHMucHJlc2VudGF0aW9uU2VsZWN0ZWQpO1xyXG4gICAgICAgIGRpc3BhdGNoKGFjdGlvbik7XHJcbiAgICB9LFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBDb25uZWN0ZWRQcmVzZW50YXRpb25TZWxlY3Rpb25CdXR0b24gPSBjb25uZWN0KFxyXG4gICAgbnVsbCxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG4pKFByZXNlbnRhdGlvblNlbGVjdGlvbkJ1dHRvbiBhcyBhbnkpO1xyXG4iLCJpbXBvcnQgeyBMYXlvdXRQcm9wcywgTGF5b3V0IH0gZnJvbSBcIi4vTGF5b3V0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgcmVxdWVzdCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXBpLXJlcXVlc3RzXCI7XHJcbmltcG9ydCB7IFZvdGVzLCBNZXRyaWNzLCBSYXdQYXJhbWV0ZXJzLCBQYXJhbWV0ZXJzIH0gZnJvbSBcIi4uL3JlcXVlc3RlZC1kYXRhL3JlcXVlc3RlZC1kYXRhLW1vZGVsc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgaW5pdGlhbGl6ZVJlcXVlc3RlZFZvdGVzLFxyXG4gICAgaW5pdGlhbGl6ZVJlcXVlc3RlZE1ldHJpY3MsXHJcbiAgICBpbml0aWFsaXplUmVxdWVzdGVkUGFyYW1ldGVycyxcclxuICAgIGluaXRpYWxpemVSZXF1ZXN0ZWRQYXJ0eU1hcCxcclxufSBmcm9tIFwiLi4vcmVxdWVzdGVkLWRhdGFcIjtcclxuaW1wb3J0IHsgaW5pdGlhbGl6ZUNvbXB1dGF0aW9uIH0gZnJvbSBcIi4uL2NvbXB1dGF0aW9uXCI7XHJcbmltcG9ydCB7IGluaXRpYWxpemVDb21wdXRhdGlvbk1lbnUgfSBmcm9tIFwiLi9Db21wdXRhdGlvbk1lbnVcIjtcclxuaW1wb3J0IHsgaW5pdGlhbGl6ZVByZXNlbnRhdGlvbiB9IGZyb20gXCIuL1ByZXNlbnRhdGlvbk1lbnVcIjtcclxuaW1wb3J0IHsgc3RhdGVJc0ludmFsaWQgfSBmcm9tIFwiLi4vc3RvcmUvdmVyc2lvblwiO1xyXG5pbXBvcnQgeyByYXdQYXJhbWV0ZXJzVG9QYXJhbWV0ZXJzQ29udmVydGVyIH0gZnJvbSBcIi4uL3JlcXVlc3RlZC1kYXRhL3JlcXVlc3RlZC1kYXRhLXV0aWxpdGllc1wiO1xyXG5pbXBvcnQgeyBSb290U3RhdGUgfSBmcm9tIFwiLi4vcmVkdWNlcnNcIjtcclxuaW1wb3J0IHsgY2xlYXJTdGF0ZSB9IGZyb20gXCIuLi9yZWR1Y2Vycy9nbG9iYWwtYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25UeXBlLCBOb3RpZmljYXRpb25EYXRhIH0gZnJvbSBcIi4vTm90aWZpY2F0aW9uc1wiO1xyXG5pbXBvcnQgeyBhZGROb3RpZmljYXRpb24sIHRvZ2dsZUhhbWJ1cmdlciB9IGZyb20gXCIuL3VpLWFjdGlvbnNcIjtcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogUm9vdFN0YXRlKTogUGljazxMYXlvdXRQcm9wcywgXCJkYXRhTG9hZGVkXCIgfCBcImhhbWJ1cmdlckV4cGFuZGVkXCI+ID0+ICh7XHJcbiAgICBkYXRhTG9hZGVkOiBzdGF0ZS5yZXF1ZXN0ZWREYXRhU3RhdGUuZGF0YUxvYWRlZCxcclxuICAgIGhhbWJ1cmdlckV4cGFuZGVkOiBzdGF0ZS51aVN0YXRlLmhhbWJ1cmdlckV4cGFuZGVkLFxyXG59KTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChcclxuICAgIGRpc3BhdGNoOiBhbnlcclxuKTogUGljazxMYXlvdXRQcm9wcywgXCJpbml0aWFsaXplU3RhdGVcIiB8IFwidG9nZ2xlSGFtYnVyZ2VyXCIgfCBcImNsZWFyU3RhdGVcIiB8IFwic2hvd05vdGlmaWNhdGlvblwiPiA9PiAoe1xyXG4gICAgaW5pdGlhbGl6ZVN0YXRlOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgdm90ZXNVcmkgPSBwcm9jZXNzLmVudi5BUElfVjMgKyBcInZvdGVzP3BhcnR5Q29kZT1BTEwmZGlzdHJpY3Q9QUxMXCI7XHJcbiAgICAgICAgY29uc3QgbWV0cmljc1VyaSA9IHByb2Nlc3MuZW52LkFQSV9WMyArIFwibWV0cmljcz9kaXN0cmljdD1BTExcIjtcclxuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzVXJpID0gcHJvY2Vzcy5lbnYuQVBJX1YzICsgXCJwYXJhbWV0ZXJzXCI7XHJcbiAgICAgICAgY29uc3QgeWVhcnNVcmkgPSBwcm9jZXNzLmVudi5BUElfVjMgKyBcInllYXJzXCI7XHJcbiAgICAgICAgY29uc3QgcGFydHlNYXBVcmkgPSBwcm9jZXNzLmVudi5BUElfVjMgKyBcInBhcnRpZXNcIjtcclxuXHJcbiAgICAgICAgaWYgKHN0YXRlSXNJbnZhbGlkKCkpIHtcclxuICAgICAgICAgICAgbGV0IHZvdGVzOiBWb3Rlc1tdID0gW107XHJcbiAgICAgICAgICAgIGxldCBtZXRyaWNzOiBNZXRyaWNzW10gPSBbXTtcclxuICAgICAgICAgICAgbGV0IHJhd1BhcmFtZXRlcnM6IFJhd1BhcmFtZXRlcnNbXSA9IFtdO1xyXG4gICAgICAgICAgICBsZXQgcGFydHlNYXA6IF8uRGljdGlvbmFyeTxzdHJpbmc+ID0ge307XHJcbiAgICAgICAgICAgIGxldCBudW1iZXJZZWFyczogbnVtYmVyW10gPSBbXTtcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB2b3RlcyA9IGF3YWl0IHJlcXVlc3Q8QXJyYXk8Vm90ZXM+Pih2b3Rlc1VyaSk7XHJcbiAgICAgICAgICAgICAgICBtZXRyaWNzID0gYXdhaXQgcmVxdWVzdDxBcnJheTxNZXRyaWNzPj4obWV0cmljc1VyaSk7XHJcbiAgICAgICAgICAgICAgICByYXdQYXJhbWV0ZXJzID0gYXdhaXQgcmVxdWVzdDxBcnJheTxSYXdQYXJhbWV0ZXJzPj4ocGFyYW1ldGVyc1VyaSk7XHJcbiAgICAgICAgICAgICAgICBwYXJ0eU1hcCA9IGF3YWl0IHJlcXVlc3Q8Xy5EaWN0aW9uYXJ5PHN0cmluZz4+KHBhcnR5TWFwVXJpKTtcclxuICAgICAgICAgICAgICAgIG51bWJlclllYXJzID0gYXdhaXQgcmVxdWVzdDxBcnJheTxudW1iZXI+Pih5ZWFyc1VyaSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub3RpZmljYXRpb246IE5vdGlmaWNhdGlvbkRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogYEtsYXJ0ZSBpa2tlIMOlIGxhc3RlIG5lZCB2YWxnZGF0YSBmcmEgQVBJZXQsIHByw7h2IGlnamVuIHNlbmVyZS4gRmVpbG1lbGRpbmdlbiB2YXI6ICR7ZXJyb3IubWVzc2FnZX1gLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IE5vdGlmaWNhdGlvblR5cGUuREFOR0VSLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFkZE5vdGlmaWNhdGlvbkFjdGlvbiA9IGFkZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goYWRkTm90aWZpY2F0aW9uQWN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgaW5pdGlhbGl6ZVJlcXVlc3RlZFZvdGVzQWN0aW9uID0gaW5pdGlhbGl6ZVJlcXVlc3RlZFZvdGVzKHZvdGVzKTtcclxuICAgICAgICAgICAgZGlzcGF0Y2goaW5pdGlhbGl6ZVJlcXVlc3RlZFZvdGVzQWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGluaXRpYWxpemVSZXF1ZXN0ZWRNZXRyaWNzQWN0aW9uID0gaW5pdGlhbGl6ZVJlcXVlc3RlZE1ldHJpY3MobWV0cmljcyk7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKGluaXRpYWxpemVSZXF1ZXN0ZWRNZXRyaWNzQWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSByYXdQYXJhbWV0ZXJzLm1hcDxQYXJhbWV0ZXJzPigocmF3KSA9PiByYXdQYXJhbWV0ZXJzVG9QYXJhbWV0ZXJzQ29udmVydGVyKHJhdykpO1xyXG4gICAgICAgICAgICBjb25zdCBpbml0aWFsaXplUmVxdWVzdGVkUGFyYW1ldGVyc0FjdGlvbiA9IGluaXRpYWxpemVSZXF1ZXN0ZWRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgICAgICBkaXNwYXRjaChpbml0aWFsaXplUmVxdWVzdGVkUGFyYW1ldGVyc0FjdGlvbik7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpbml0aWFsaXplUmVxdWVzdGVkUGFydHlNYXBBY3Rpb24gPSBpbml0aWFsaXplUmVxdWVzdGVkUGFydHlNYXAocGFydHlNYXApO1xyXG4gICAgICAgICAgICBkaXNwYXRjaChpbml0aWFsaXplUmVxdWVzdGVkUGFydHlNYXBBY3Rpb24pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZWxlY3Rpb25ZZWFyID0gbnVtYmVyWWVhcnNbMF07XHJcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ1llYXJzID0gbnVtYmVyWWVhcnMubWFwKCh5ZWFyKSA9PiB5ZWFyLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICBjb25zdCBpbml0aWFsaXplU2V0dGluZ3NBY3Rpb24gPSBpbml0aWFsaXplQ29tcHV0YXRpb25NZW51KHN0cmluZ1llYXJzLCBwYXJhbWV0ZXJzWzBdKTtcclxuICAgICAgICAgICAgZGlzcGF0Y2goaW5pdGlhbGl6ZVNldHRpbmdzQWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGluaXRpYWxpemVQcmVzZW50YXRpb25BY3Rpb24gPSBpbml0aWFsaXplUHJlc2VudGF0aW9uKCk7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKGluaXRpYWxpemVQcmVzZW50YXRpb25BY3Rpb24pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaW5pdGlhbGl6ZUNvbXB1dGF0aW9uQWN0aW9uID0gaW5pdGlhbGl6ZUNvbXB1dGF0aW9uKFxyXG4gICAgICAgICAgICAgICAgZWxlY3Rpb25ZZWFyLFxyXG4gICAgICAgICAgICAgICAgdm90ZXMsXHJcbiAgICAgICAgICAgICAgICBtZXRyaWNzLFxyXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycyxcclxuICAgICAgICAgICAgICAgIHBhcnR5TWFwXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKGluaXRpYWxpemVDb21wdXRhdGlvbkFjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBjbGVhclN0YXRlOiAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2xlYXJTdGF0ZUFjdGlvbiA9IGNsZWFyU3RhdGUoKTtcclxuICAgICAgICBkaXNwYXRjaChjbGVhclN0YXRlQWN0aW9uKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2hvd05vdGlmaWNhdGlvbjogKHR5cGU6IE5vdGlmaWNhdGlvblR5cGUsIHRleHQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uRGF0YSA9IHtcclxuICAgICAgICAgICAgdGV4dCxcclxuICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGFkZE5vdGlmaWNhdGlvbkFjdGlvbiA9IGFkZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24pO1xyXG4gICAgICAgIGRpc3BhdGNoKGFkZE5vdGlmaWNhdGlvbkFjdGlvbik7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICB0b2dnbGVIYW1idXJnZXI6IChoYW1idXJnZXJFeHBhbmRlZDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIGRpc3BhdGNoKHRvZ2dsZUhhbWJ1cmdlcihoYW1idXJnZXJFeHBhbmRlZCkpO1xyXG4gICAgfSxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgQ29ubmVjdGVkTGF5b3V0ID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoTGF5b3V0IGFzIGFueSk7XHJcbiIsImltcG9ydCB7IFJvb3RTdGF0ZSB9IGZyb20gXCIuLi8uLi9yZWR1Y2Vyc1wiO1xyXG5pbXBvcnQgeyBQcmVzZW50YXRpb24sIFByZXNlbnRhdGlvblByb3BzIH0gZnJvbSBcIi4vUHJlc2VudGF0aW9uXCI7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgc2VsZWN0RGlzdHJpY3QgfSBmcm9tIFwiLi4vUHJlc2VudGF0aW9uTWVudVwiO1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBSb290U3RhdGUpOiBQYXJ0aWFsPFByZXNlbnRhdGlvblByb3BzPiA9PiB7XHJcbiAgICBjb25zdCB5ZWFyID0gcGFyc2VJbnQoc3RhdGUuc2V0dGluZ3NTdGF0ZS55ZWFyKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY29tcGFyaXNvblBhcnR5UmVzdWx0czogc3RhdGUuY29tcHV0YXRpb25TdGF0ZS5jb21wYXJpc29uLnBhcnR5UmVzdWx0cyxcclxuICAgICAgICByZXN1bHRzOiBzdGF0ZS5jb21wdXRhdGlvblN0YXRlLmN1cnJlbnQsXHJcbiAgICAgICAgY3VycmVudFByZXNlbnRhdGlvbjogc3RhdGUucHJlc2VudGF0aW9uTWVudVN0YXRlLmN1cnJlbnRQcmVzZW50YXRpb24sXHJcbiAgICAgICAgZGVjaW1hbHM6IHN0YXRlLnByZXNlbnRhdGlvbk1lbnVTdGF0ZS5kZWNpbWFsc051bWJlcixcclxuICAgICAgICBzaG93UGFydGllc1dpdGhvdXRTZWF0czogc3RhdGUucHJlc2VudGF0aW9uTWVudVN0YXRlLnNob3dQYXJ0aWVzV2l0aG91dFNlYXRzLFxyXG4gICAgICAgIGRpc3RyaWN0U2VsZWN0ZWQ6IHN0YXRlLnByZXNlbnRhdGlvbk1lbnVTdGF0ZS5kaXN0cmljdFNlbGVjdGVkLFxyXG4gICAgICAgIGRpc3Byb3BvcnRpb25hbGl0eUluZGV4OiBzdGF0ZS5wcmVzZW50YXRpb25NZW51U3RhdGUuZGlzcHJvcG9ydGlvbmFsaXR5SW5kZXgsXHJcbiAgICAgICAgc2hvd0NvbXBhcmlzb246IHN0YXRlLnByZXNlbnRhdGlvbk1lbnVTdGF0ZS5zaG93Q29tcGFyaXNvbixcclxuICAgICAgICB5ZWFyLFxyXG4gICAgICAgIGFsZ29yaXRobTogc3RhdGUuY29tcHV0YXRpb25TdGF0ZS5hbGdvcml0aG0sXHJcbiAgICAgICAgdGhyZXNob2xkOiBzdGF0ZS5jb21wdXRhdGlvblN0YXRlLmVsZWN0aW9uVGhyZXNob2xkLFxyXG4gICAgICAgIHNob3dGaWx0ZXJzOiBzdGF0ZS5wcmVzZW50YXRpb25NZW51U3RhdGUuc2hvd0ZpbHRlcnMsXHJcbiAgICAgICAgcGFydHlNYXA6IHN0YXRlLnJlcXVlc3RlZERhdGFTdGF0ZS5wYXJ0eU1hcCxcclxuICAgIH0gYXMgUHJlc2VudGF0aW9uUHJvcHM7XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2g6IGFueSk6IFBhcnRpYWw8UHJlc2VudGF0aW9uUHJvcHM+ID0+ICh7XHJcbiAgICBzZWxlY3REaXN0cmljdDogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MU2VsZWN0RWxlbWVudD4pID0+IHtcclxuICAgICAgICBkaXNwYXRjaChzZWxlY3REaXN0cmljdChldmVudC50YXJnZXQudmFsdWUpKTtcclxuICAgIH0sXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IENvbm5lY3RlZFByZXNlbnRhdGlvbiA9IGNvbm5lY3QoXHJcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgICBtYXBEaXNwYXRjaFRvUHJvcHNcclxuKShQcmVzZW50YXRpb24gYXMgYW55KTtcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBSZWFjdFRhYmxlIGZyb20gXCJyZWFjdC10YWJsZVwiO1xyXG5pbXBvcnQgeyBEaXN0cmljdFJlc3VsdCwgQWxnb3JpdGhtVHlwZSB9IGZyb20gXCIuLi8uLi8uLi9jb21wdXRhdGlvblwiO1xyXG5pbXBvcnQgeyB0b01pbiwgdG9NYXgsIHRvTWVhbiwgdG9TdW0gfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL3JlZHVjZVwiO1xyXG5pbXBvcnQgeyBnZXRNb3N0VnVsbmVyYWJsZVNlYXRCeVF1b3RpZW50IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxpdGllcy9kaXN0cmljdFwiO1xyXG5pbXBvcnQgeyBub3J3ZWdpYW4gfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL3J0XCI7XHJcbmltcG9ydCB7IGlzUXVvdGllbnRBbGdvcml0aG0gfSBmcm9tIFwiLi4vLi4vLi4vY29tcHV0YXRpb24vbG9naWNcIjtcclxuaW1wb3J0IHsgVnVsbmVyYWJsZURpc3RyaWN0U2VhdFRleHQgfSBmcm9tIFwiLi9WdWxuZXJhYmxlRGlzdHJpY3RTZWF0VGV4dFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEaXN0cmljdE92ZXJ2aWV3UHJvcHMge1xyXG4gICAgZGlzdHJpY3RSZXN1bHRzOiBEaXN0cmljdFJlc3VsdFtdO1xyXG4gICAgZGlzdHJpY3RXaWR0aDogbnVtYmVyO1xyXG4gICAgZGVjaW1hbHM6IG51bWJlcjtcclxuICAgIGFsZ29yaXRobTogQWxnb3JpdGhtVHlwZTtcclxuICAgIHBhcnR5TWFwOiBfLkRpY3Rpb25hcnk8c3RyaW5nPjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERpc3RyaWN0T3ZlcnZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8RGlzdHJpY3RPdmVydmlld1Byb3BzLCB7fT4ge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLnByb3BzLmRpc3RyaWN0UmVzdWx0cztcclxuICAgICAgICBjb25zdCBkZWNpbWFscyA9IHRoaXMucHJvcHMuZGVjaW1hbHM7XHJcbiAgICAgICAgY29uc3QgaGlnaGVzdFZvdGluZ1Bvd2VyID0gZGF0YS5tYXAoKHZhbHVlKSA9PiB2YWx1ZS52b3Rlc1BlclNlYXQpLnJlZHVjZSh0b01pbik7XHJcbiAgICAgICAgY29uc3QgbG93ZXN0Vm90aW5nUG93ZXIgPSBkYXRhLm1hcCgodmFsdWUpID0+IHZhbHVlLnZvdGVzUGVyU2VhdCkucmVkdWNlKHRvTWF4KTtcclxuICAgICAgICBjb25zdCBhdmVyYWdlVm90aW5nUG93ZXIgPSBkYXRhLm1hcCgodmFsdWUpID0+IHZhbHVlLnZvdGVzUGVyU2VhdCkucmVkdWNlKHRvTWVhbik7XHJcbiAgICAgICAgY29uc3QgaGlnaGVzdFZzQXZlcmFnZUluUGVyY2VudGFnZSA9ICgxIC8gaGlnaGVzdFZvdGluZ1Bvd2VyIC8gKDEgLyBhdmVyYWdlVm90aW5nUG93ZXIpKSAqIDEwMDtcclxuICAgICAgICBjb25zdCBsb3dlc3RWc0F2ZXJhZ2VJblBlcmNlbnRhZ2UgPSAoMSAvIGxvd2VzdFZvdGluZ1Bvd2VyIC8gKDEgLyBhdmVyYWdlVm90aW5nUG93ZXIpKSAqIDEwMDtcclxuICAgICAgICBjb25zdCBtb3N0V2VpZ2h0ZWREaXN0cmljdCA9IGRhdGEuZmluZCgoZW50cnkpID0+IGVudHJ5LnZvdGVzUGVyU2VhdCA9PT0gaGlnaGVzdFZvdGluZ1Bvd2VyKSEubmFtZTtcclxuICAgICAgICBjb25zdCBsZWFzdFdlaWdodGVkRGlzdHJpY3QgPSBkYXRhLmZpbmQoKGVudHJ5KSA9PiBlbnRyeS52b3Rlc1BlclNlYXQgPT09IGxvd2VzdFZvdGluZ1Bvd2VyKSEubmFtZTtcclxuICAgICAgICBjb25zdCBjYWxjdWxhdGVWdWxuZXJhYmxlID0gaXNRdW90aWVudEFsZ29yaXRobSh0aGlzLnByb3BzLmFsZ29yaXRobSk7XHJcbiAgICAgICAgY29uc3QgbW9zdFZ1bG5lcmFibGUgPSBjYWxjdWxhdGVWdWxuZXJhYmxlID8gZ2V0TW9zdFZ1bG5lcmFibGVTZWF0QnlRdW90aWVudChkYXRhKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQgaGFzLWJhY2tncm91bmQtcHJpbWFyeSBoYXMtdGV4dC1saWdodCBpcy1zaXplLTVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJjYXJkLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAge1wiRW4gc3RlbW1lIGkgXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHttb3N0V2VpZ2h0ZWREaXN0cmljdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAge1wiIGhhZGRlIG1lc3QgdmVrdCwgb2cgdGVsdGUgXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtoaWdoZXN0VnNBdmVyYWdlSW5QZXJjZW50YWdlLnRvRml4ZWQoZGVjaW1hbHMpICsgXCIlXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcIiBhdiBlbiBnamVubm9tc25pdHRsaWcgc3RlbW1lXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcIiwgbWVucyBlbiBzdGVtbWUgaSBcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAge2xlYXN0V2VpZ2h0ZWREaXN0cmljdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAge1wiIGhhZGRlIG1pbnN0IHZla3QsIG9nIGJhcmUgdGVsdGUgXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtsb3dlc3RWc0F2ZXJhZ2VJblBlcmNlbnRhZ2UudG9GaXhlZChkZWNpbWFscykgKyBcIiUuXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxWdWxuZXJhYmxlRGlzdHJpY3RTZWF0VGV4dCBtb3N0VnVsbmVyYWJsZT17bW9zdFZ1bG5lcmFibGV9IHBhcnR5TWFwPXt0aGlzLnByb3BzLnBhcnR5TWFwfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxSZWFjdFRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiLWhpZ2hsaWdodCAtc3RyaXBlZCBoYXMtdGV4dC1jZW50ZXJlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBhZ2VTaXplPXt0aGlzLnByb3BzLmRpc3RyaWN0UmVzdWx0cy5sZW5ndGh9XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZVNpemU9e3RoaXMucHJvcHMuZGlzdHJpY3RSZXN1bHRzLmxlbmd0aH1cclxuICAgICAgICAgICAgICAgICAgICBzaG93UGFnaW5hdGlvbkJvdHRvbT17ZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YT17ZGF0YX1cclxuICAgICAgICAgICAgICAgICAgICB7Li4ubm9yd2VnaWFufVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnM9e1tcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiBcIkZ5bGtlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjogXCJuYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogdGhpcy5wcm9wcy5kaXN0cmljdFdpZHRoICogMTAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb290ZXI6IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5BbGxlIGZ5bGtlcjwvc3Ryb25nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlYWRlcjogXCJTdGVtbWVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjogXCJ2b3Rlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9vdGVyOiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+e2RhdGEubWFwKCh2YWx1ZSkgPT4gdmFsdWUudm90ZXMpLnJlZHVjZSh0b1N1bSwgMCl9PC9zdHJvbmc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiBcIkRpc3RyaWt0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjogXCJkaXN0cmljdFNlYXRzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb290ZXI6IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz57ZGF0YS5tYXAoKHZhbHVlKSA9PiB2YWx1ZS5kaXN0cmljdFNlYXRzKS5yZWR1Y2UodG9TdW0sIDApfTwvc3Ryb25nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlYWRlcjogXCJVdGpldm5pbmdcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yOiBcImxldmVsaW5nU2VhdHNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvb3RlcjogKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPntkYXRhLm1hcCgodmFsdWUpID0+IHZhbHVlLmxldmVsaW5nU2VhdHMpLnJlZHVjZSh0b1N1bSwgMCl9PC9zdHJvbmc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiBcIlN1bVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IFwidG90YWxTZWF0c1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9vdGVyOiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+e2RhdGEubWFwKCh2YWx1ZSkgPT4gdmFsdWUudG90YWxTZWF0cykucmVkdWNlKHRvU3VtLCAwKX08L3N0cm9uZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiBcIlN0ZW1tZXIvbWFuZGF0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjogXCJ2b3Rlc1BlclNlYXRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvb3RlcjogKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPnthdmVyYWdlVm90aW5nUG93ZXIudG9GaXhlZChkZWNpbWFscyl9PC9zdHJvbmc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBdfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQYXJ0eU5hbWVQcm9wcyB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBwYXJ0eU1hcDogXy5EaWN0aW9uYXJ5PHN0cmluZz4gfCB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQYXJ0eU5hbWUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UGFydHlOYW1lUHJvcHMsIHt9PiB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3QgcGFydHlNYXAgPSB0aGlzLnByb3BzLnBhcnR5TWFwO1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLnByb3BzLm5hbWU7XHJcbiAgICAgICAgY29uc3QgZGlzcGxheU5hbWUgPSBwYXJ0eU1hcCA/IHBhcnR5TWFwW25hbWVdIDogbmFtZTtcclxuICAgICAgICByZXR1cm4gPGI+e2Rpc3BsYXlOYW1lfTwvYj47XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBSZWFjdFRhYmxlIGZyb20gXCJyZWFjdC10YWJsZVwiO1xyXG5pbXBvcnQgeyBQYXJ0eVJlc3VsdCB9IGZyb20gXCIuLi8uLi8uLi9jb21wdXRhdGlvblwiO1xyXG5pbXBvcnQgeyB0b1N1bSB9IGZyb20gXCIuLi8uLi8uLi91dGlsaXRpZXMvcmVkdWNlXCI7XHJcbmltcG9ydCB7IERpc3Byb3BvcnRpb25hbGl0eUluZGV4IH0gZnJvbSBcIi4uL3ByZXNlbnRhdGlvbi1tb2RlbHNcIjtcclxuaW1wb3J0IHsgY2hlY2tFeGhhdXN0aXZlbHkgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzXCI7XHJcbmltcG9ydCB7IHJvdW5kTnVtYmVyIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxpdGllcy9udW1iZXJcIjtcclxuaW1wb3J0IHtcclxuICAgIHNlbGVjdEZpbHRlcldpdGhPcHRpb25zLFxyXG4gICAgdGhyZXNob2xkRmlsdGVyTWV0aG9kLFxyXG4gICAgYWxsR3JlYXRlclRoYW5FcXVhbHNNZXRob2QsXHJcbiAgICBwb3NpdGl2ZU9yTmVnYXRpdmVGaWx0ZXJNZXRob2QsXHJcbiAgICBjYXNlSW5zZW5zaXRpdmVGaWx0ZXJNZXRob2QsXHJcbiAgICB6ZXJvTm90WmVyb0ZpbHRlck1ldGhvZCxcclxuICAgIG5vcndlZ2lhbixcclxufSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL3J0XCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEVsZWN0aW9uT3ZlcnZpZXdQcm9wcyB7XHJcbiAgICBwYXJ0eVJlc3VsdHM6IFBhcnR5UmVzdWx0W107XHJcbiAgICBjb21wYXJpc29uUGFydHlSZXN1bHRzOiBQYXJ0eVJlc3VsdFtdO1xyXG4gICAgZGVjaW1hbHM6IG51bWJlcjtcclxuICAgIHRocmVzaG9sZDogbnVtYmVyO1xyXG4gICAgcGFydHlOYW1lV2lkdGg6IG51bWJlcjtcclxuICAgIGRpc3Byb3BvcnRpb25hbGl0eUluZGV4OiBEaXNwcm9wb3J0aW9uYWxpdHlJbmRleDtcclxuICAgIHNob3dQYXJ0aWVzV2l0aG91dFNlYXRzOiBib29sZWFuO1xyXG4gICAgc2hvd0ZpbHRlcnM6IGJvb2xlYW47XHJcbn1cclxuXHJcbmludGVyZmFjZSBFbGVjdGlvbk92ZXJ2aWV3RGF0dW0gZXh0ZW5kcyBQYXJ0eVJlc3VsdCB7XHJcbiAgICB0b3RhbFNlYXREaWZmZXJlbmNlOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFbGVjdGlvbk92ZXJ2aWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEVsZWN0aW9uT3ZlcnZpZXdQcm9wcywge30+IHtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIGZvciBtYWtpbmcgZGF0YS4gQ3JlYXRlcyBhIFBhcnR5UmVzdWx0IHdpdGggYW4gYWRkaXRpb25hbCBmaWVsZCxcclxuICAgICAqIHNvIHRoYXQgZGlmZmVyZW5jZSBjYW4gYmUgZGlzcGxheWVkIGJhc2VkIG9uIHRoZSBjb21wYXJpc29uLlxyXG4gICAgICovXHJcbiAgICBtYWtlRGF0YSA9ICgpOiBFbGVjdGlvbk92ZXJ2aWV3RGF0dW1bXSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGF0YTogRWxlY3Rpb25PdmVydmlld0RhdHVtW10gPSBbXTtcclxuICAgICAgICBjb25zdCBjdXJyZW50cyA9IHRoaXMucHJvcHMucGFydHlSZXN1bHRzO1xyXG4gICAgICAgIGNvbnN0IGNvbXBhcmlzb25zID0gdGhpcy5wcm9wcy5jb21wYXJpc29uUGFydHlSZXN1bHRzO1xyXG4gICAgICAgIGNvbnN0IHNob3VsZENhbGN1bGF0ZURpZmZlcmVuY2UgPSBjdXJyZW50cy5sZW5ndGggPT09IGNvbXBhcmlzb25zLmxlbmd0aDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpZmZlcmVuY2UgPSBzaG91bGRDYWxjdWxhdGVEaWZmZXJlbmNlID8gY3VycmVudHNbaV0udG90YWxTZWF0cyAtIGNvbXBhcmlzb25zW2ldLnRvdGFsU2VhdHMgOiAwO1xyXG4gICAgICAgICAgICBjb25zdCBkYXR1bTogRWxlY3Rpb25PdmVydmlld0RhdHVtID0ge1xyXG4gICAgICAgICAgICAgICAgLi4udGhpcy5wcm9wcy5wYXJ0eVJlc3VsdHNbaV0sXHJcbiAgICAgICAgICAgICAgICB0b3RhbFNlYXREaWZmZXJlbmNlOiBkaWZmZXJlbmNlLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBkYXRhLnB1c2goZGF0dW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRW5zdXJlcyB0aGF0IHBhcnRpZXMgdGhhdCBoYXZlIHJvd3Mgb3IgdXNlZCB0byBoYXZlIHJvd3MgYXJlIHNob3duLlxyXG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5zaG93UGFydGllc1dpdGhvdXRTZWF0cykge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YS5maWx0ZXIoKGRhdHVtKSA9PiBkYXR1bS50b3RhbFNlYXRzID4gMCB8fCBkYXR1bS50b3RhbFNlYXREaWZmZXJlbmNlICE9PSAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXRpbGl0eSBmb3IgY2hlY2tpbmcgd2hldGhlciB0aGUgZGlmZmVyZW5jZSBjb2x1bW4gc2hvdWxkIGJlIGRpc3BsYXllZCxcclxuICAgICAqIGllIC0tIGFyZSB0aGVyZSBhbnkgZGlmZmVyZW5jZXM/XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGRhdGEgdGhlIGRhdGEsIHJlcXVpcmVkIHRvIGZpZ3VyZSBvdXQgaWYgdGhlcmUgaXMgYSBkaWZmZXJlbmNlLlxyXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGVyZSBpcyBhIGRpZmZlcmVuY2UsIGVsc2UgZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIHNob3VsZFNob3dEaWZmZXJlbmNlID0gKGRhdGE6IEVsZWN0aW9uT3ZlcnZpZXdEYXR1bVtdKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGRhdGEuc29tZSgoZGF0dW0pID0+IGRhdHVtLnRvdGFsU2VhdERpZmZlcmVuY2UgIT09IDApO1xyXG4gICAgfTtcclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMubWFrZURhdGEoKTtcclxuICAgICAgICBjb25zdCBwcm9wb3J0aW9uYWxpdGllcyA9IHRoaXMucHJvcHMuc2hvd1BhcnRpZXNXaXRob3V0U2VhdHNcclxuICAgICAgICAgICAgPyBkYXRhLm1hcCgodmFsdWUpID0+IHZhbHVlLnByb3BvcnRpb25hbGl0eSlcclxuICAgICAgICAgICAgOiBkYXRhLmZpbHRlcigoZGF0dW0pID0+IGRhdHVtLnRvdGFsU2VhdHMgPiAwKS5tYXAoKHZhbHVlKSA9PiB2YWx1ZS5wcm9wb3J0aW9uYWxpdHkpO1xyXG4gICAgICAgIGNvbnN0IGRlY2ltYWxzID0gdGhpcy5wcm9wcy5kZWNpbWFscztcclxuICAgICAgICBsZXQgaW5kZXg6IG51bWJlcjtcclxuICAgICAgICBsZXQgbGFiZWw6IHN0cmluZztcclxuICAgICAgICBjb25zdCBMU3EgPSBNYXRoLnNxcnQocHJvcG9ydGlvbmFsaXRpZXMubWFwKCh2YWx1ZSkgPT4gdmFsdWUgKiB2YWx1ZSkucmVkdWNlKHRvU3VtLCAwKSAvIDIpO1xyXG4gICAgICAgIGNvbnN0IExIID0gcHJvcG9ydGlvbmFsaXRpZXMubWFwKCh2YWx1ZSkgPT4gTWF0aC5hYnModmFsdWUpKS5yZWR1Y2UodG9TdW0sIDApIC8gMjtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMucHJvcHMuZGlzcHJvcG9ydGlvbmFsaXR5SW5kZXgpIHtcclxuICAgICAgICAgICAgY2FzZSBEaXNwcm9wb3J0aW9uYWxpdHlJbmRleC5MT09TRU1PUkVfSEFOQlk6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsID0gXCJMLUhcIjtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gTEg7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIERpc3Byb3BvcnRpb25hbGl0eUluZGV4LkdBTExBR0hFUjoge1xyXG4gICAgICAgICAgICAgICAgbGFiZWwgPSBcIkxTcVwiO1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBMU3E7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICBjaGVja0V4aGF1c3RpdmVseSh0aGlzLnByb3BzLmRpc3Byb3BvcnRpb25hbGl0eUluZGV4KTtcclxuICAgICAgICAgICAgICAgIGxhYmVsID0gXCJFcnJvclwiO1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhbGxUcnVlRmFsc2VPcHRpb25zID0gW1xyXG4gICAgICAgICAgICB7IHZhbHVlOiBcImFsbFwiLCB0aXRsZTogXCJBbGxlXCIgfSxcclxuICAgICAgICAgICAgeyB2YWx1ZTogXCJ0cnVlXCIsIHRpdGxlOiBcIj4gMFwiIH0sXHJcbiAgICAgICAgICAgIHsgdmFsdWU6IFwiZmFsc2VcIiwgdGl0bGU6IFwiPSAwXCIgfSxcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBjb25zdCB0aHJlc2hvbGRPcHRpb25zID0gW1xyXG4gICAgICAgICAgICB7IHZhbHVlOiBcImFsbFwiLCB0aXRsZTogXCJBbGxlXCIgfSxcclxuICAgICAgICAgICAgeyB2YWx1ZTogXCJndGVxXCIsIHRpdGxlOiBg4omlICR7dGhpcy5wcm9wcy50aHJlc2hvbGR9JWAgfSxcclxuICAgICAgICAgICAgeyB2YWx1ZTogXCJsdFwiLCB0aXRsZTogYDwgJHt0aGlzLnByb3BzLnRocmVzaG9sZH0lYCB9LFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGNvbnN0IHRocmVzaG9sZElzWmVyb09wdGlvbnMgPSBbXHJcbiAgICAgICAgICAgIHsgdmFsdWU6IFwiYWxsXCIsIHRpdGxlOiBcIkFsbGVcIiB9LFxyXG4gICAgICAgICAgICB7IHZhbHVlOiBcImd0ZXFcIiwgdGl0bGU6IFwi4omlIDBcIiB9LFxyXG4gICAgICAgICAgICB7IHZhbHVlOiBcImx0XCIsIHRpdGxlOiBcIjwgMFwiIH0sXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgPFJlYWN0VGFibGVcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCItaGlnaGxpZ2h0IC1zdHJpcGVkIGhhcy10ZXh0LWNlbnRlcmVkXCJcclxuICAgICAgICAgICAgICAgICAgICBtdWx0aVNvcnQ9e2ZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE9e2RhdGF9XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyYWJsZT17dGhpcy5wcm9wcy5zaG93RmlsdGVyc31cclxuICAgICAgICAgICAgICAgICAgICBzaG93UGFnaW5hdGlvbj17dGhpcy5wcm9wcy5zaG93RmlsdGVycyA/IGRhdGEubGVuZ3RoID4gOCA6IGRhdGEubGVuZ3RoID4gMTB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd1BhZ2VTaXplT3B0aW9ucz17ZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZVNpemU9e3RoaXMucHJvcHMuc2hvd0ZpbHRlcnMgPyA4IDogZGF0YS5sZW5ndGggPiAxMCA/IDEwIDogZGF0YS5sZW5ndGh9XHJcbiAgICAgICAgICAgICAgICAgICAgey4uLm5vcndlZ2lhbn1cclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zPXtbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlYWRlcjogXCJQYXJ0aVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IFwicGFydHlDb2RlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJNZXRob2Q6IGNhc2VJbnNlbnNpdGl2ZUZpbHRlck1ldGhvZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvb3RlcjogPHN0cm9uZz5VdHZhbGc8L3N0cm9uZz4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDZWxsOiAocm93KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdy5vcmlnaW5hbC5wYXJ0eU5hbWUgPyAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhYmJyIHRpdGxlPXtyb3cub3JpZ2luYWwucGFydHlOYW1lfT57cm93LnZhbHVlfTwvYWJicj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cudmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiBcIlN0ZW1tZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yOiBcInZvdGVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvb3RlcjogPHN0cm9uZz57ZGF0YS5tYXAoKHZhbHVlKSA9PiB2YWx1ZS52b3RlcykucmVkdWNlKHRvU3VtLCAwKX08L3N0cm9uZz4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlYWRlcjogXCIlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogXCIlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWx0ZXI6IHNlbGVjdEZpbHRlcldpdGhPcHRpb25zKHRocmVzaG9sZE9wdGlvbnMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyTWV0aG9kOiB0aHJlc2hvbGRGaWx0ZXJNZXRob2QodGhpcy5wcm9wcy50aHJlc2hvbGQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IChkOiBFbGVjdGlvbk92ZXJ2aWV3RGF0dW0pID0+IHJvdW5kTnVtYmVyKGQucGVyY2VudFZvdGVzLCBkZWNpbWFscyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlYWRlcjogXCJEaXN0cmlrdFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IFwiZGlzdHJpY3RTZWF0c1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsdGVyOiBzZWxlY3RGaWx0ZXJXaXRoT3B0aW9ucyhhbGxUcnVlRmFsc2VPcHRpb25zKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlck1ldGhvZDogYWxsR3JlYXRlclRoYW5FcXVhbHNNZXRob2QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb290ZXI6IDxzdHJvbmc+e2RhdGEubWFwKCh2YWx1ZSkgPT4gdmFsdWUuZGlzdHJpY3RTZWF0cykucmVkdWNlKHRvU3VtLCAwKX08L3N0cm9uZz4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWFkZXI6IFwiVXRqZXZuaW5nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjogXCJsZXZlbGluZ1NlYXRzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWx0ZXI6IHNlbGVjdEZpbHRlcldpdGhPcHRpb25zKGFsbFRydWVGYWxzZU9wdGlvbnMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyTWV0aG9kOiBhbGxHcmVhdGVyVGhhbkVxdWFsc01ldGhvZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvb3RlcjogPHN0cm9uZz57ZGF0YS5tYXAoKHZhbHVlKSA9PiB2YWx1ZS5sZXZlbGluZ1NlYXRzKS5yZWR1Y2UodG9TdW0sIDApfTwvc3Ryb25nPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiBcIlN1bVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IFwidG90YWxTZWF0c1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb290ZXI6IDxzdHJvbmc+e2RhdGEubWFwKCh2YWx1ZSkgPT4gdmFsdWUudG90YWxTZWF0cykucmVkdWNlKHRvU3VtLCAwKX08L3N0cm9uZz4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlYWRlcjogXCJEaWZmZXJhbnNlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjogXCJ0b3RhbFNlYXREaWZmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWx0ZXI6IHNlbGVjdEZpbHRlcldpdGhPcHRpb25zKGFsbFRydWVGYWxzZU9wdGlvbnMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyTWV0aG9kOiB6ZXJvTm90WmVyb0ZpbHRlck1ldGhvZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRoaXMuc2hvdWxkU2hvd0RpZmZlcmVuY2UoZGF0YSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlYWRlcjogXCJQcm9wLiAlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJwcm9wb3J0aW9uYWxpdHlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yOiAoZDogRWxlY3Rpb25PdmVydmlld0RhdHVtKSA9PiByb3VuZE51bWJlcihkLnByb3BvcnRpb25hbGl0eSwgZGVjaW1hbHMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsdGVyOiBzZWxlY3RGaWx0ZXJXaXRoT3B0aW9ucyh0aHJlc2hvbGRJc1plcm9PcHRpb25zKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlck1ldGhvZDogcG9zaXRpdmVPck5lZ2F0aXZlRmlsdGVyTWV0aG9kKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb290ZXI6IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGFiZWx9OiB7aW5kZXgudG9GaXhlZCh0aGlzLnByb3BzLmRlY2ltYWxzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXX1cclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U29ydGVkPXtbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcInRvdGFsU2VhdHNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFJlYWN0VGFibGUsIHsgQ29sdW1uIH0gZnJvbSBcInJlYWN0LXRhYmxlXCI7XHJcbmltcG9ydCB7IFBhcnR5UmVzdFF1b3RpZW50cyB9IGZyb20gXCIuLi8uLi8uLi9jb21wdXRhdGlvblwiO1xyXG5pbXBvcnQgeyBub3J3ZWdpYW5MZXZlbGluZyB9IGZyb20gXCIuLi8uLi8uLi91dGlsaXRpZXMvcnRcIjtcclxuXHJcbmludGVyZmFjZSBMZXZlbGxpbmdTZWF0T3ZlcnZpZXdQcm9wcyB7XHJcbiAgICBsZXZlbGxpbmdTZWF0UXVvdGllbnRzOiBQYXJ0eVJlc3RRdW90aWVudHNbXTtcclxufVxyXG5cclxuaW50ZXJmYWNlIExldmVsbGluZ1NlYXREYXRhIHtcclxuICAgIHBhcnR5Q29kZTogc3RyaW5nO1xyXG4gICAgc2VhdHNXb246IHN0cmluZ1tdO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGV2ZWxsaW5nU2VhdE92ZXJ2aWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PExldmVsbGluZ1NlYXRPdmVydmlld1Byb3BzPiB7XHJcbiAgICBtYWtlRGF0YSgpOiBMZXZlbGxpbmdTZWF0RGF0YVtdIHtcclxuICAgICAgICBjb25zdCBxdW90aWVudHNBcnJheSA9IHRoaXMucHJvcHMubGV2ZWxsaW5nU2VhdFF1b3RpZW50cztcclxuICAgICAgICBjb25zdCBwYXJ0aWVzID0gcXVvdGllbnRzQXJyYXkubWFwKChxdW90aWVudHMpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHF1b3RpZW50cy5wYXJ0eUNvZGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3Qgc2VhdERhdGE6IExldmVsbGluZ1NlYXREYXRhW10gPSBbXTtcclxuICAgICAgICBwYXJ0aWVzLmZvckVhY2goKHBhcnR5KSA9PiB7XHJcbiAgICAgICAgICAgIHNlYXREYXRhLnB1c2goeyBwYXJ0eUNvZGU6IHBhcnR5LCBzZWF0c1dvbjogW10gfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcXVvdGllbnRzQXJyYXkuZm9yRWFjaCgocGFydHkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudEluZGV4ID0gc2VhdERhdGEuZmluZEluZGV4KChkYXRhKSA9PiBkYXRhLnBhcnR5Q29kZSA9PT0gcGFydHkucGFydHlDb2RlKTtcclxuICAgICAgICAgICAgcGFydHkubGV2ZWxpbmdTZWF0cy5mb3JFYWNoKChxdW90aWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHF1b3RpZW50LnNlYXROdW1iZXIgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWF0RGF0YVtjdXJyZW50SW5kZXhdLnNlYXRzV29uLnB1c2gocXVvdGllbnQuZGlzdHJpY3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gc2VhdERhdGE7XHJcbiAgICB9XHJcbiAgICBnZXRDb2x1bW5zKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbHVtbnM6IENvbHVtbltdID0gW107XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMubWFrZURhdGEoKTtcclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vc3RTZWF0c0luZGV4ID0gdGhpcy5maW5kTW9zdFNlYXRzV29uKGRhdGEpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFbbW9zdFNlYXRzSW5kZXhdLnNlYXRzV29uLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zdCBjdXJyZW50ID0gZGF0YVtpXTtcclxuICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiBgJHtpICsgMX0uYCxcclxuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjogYHNlYXRzV29uWyR7aX1dYCxcclxuICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogMTUwLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFNldCB0aGUgZmlyc3QgY29sdW1uXHJcbiAgICAgICAgICAgIGNvbHVtbnMudW5zaGlmdCh7XHJcbiAgICAgICAgICAgICAgICBIZWFkZXI6IFwiUGFydGlcIixcclxuICAgICAgICAgICAgICAgIGFjY2Vzc29yOiBcInBhcnR5Q29kZVwiLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbHVtbnM7XHJcbiAgICB9XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMubWFrZURhdGEoKTtcclxuICAgICAgICBjb25zdCBjb2x1bW5zID0gdGhpcy5nZXRDb2x1bW5zKCk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgPFJlYWN0VGFibGVcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCItaGlnaGxpZ2h0IC1zdHJpcGVkIGhhcy10ZXh0LWNlbnRlcmVkXCJcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBtaW5IZWlnaHQ6IDEwMCB9fVxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE9e2RhdGF9XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1ucz17Y29sdW1uc31cclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UGFnZVNpemU9e2RhdGEubGVuZ3RoID4gMTAgPyAxMCA6IGRhdGEubGVuZ3RofVxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VTaXplPXtkYXRhLmxlbmd0aCA+IDEwID8gMTAgOiBkYXRhLmxlbmd0aH1cclxuICAgICAgICAgICAgICAgICAgICBzaG93UGFnZVNpemVPcHRpb25zPXtmYWxzZX1cclxuICAgICAgICAgICAgICAgICAgICBzaG93UGFnaW5hdGlvbj17ZGF0YS5sZW5ndGggPiAxMCA/IHRydWUgOiBmYWxzZX1cclxuICAgICAgICAgICAgICAgICAgICB7Li4ubm9yd2VnaWFuTGV2ZWxpbmd9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGZpbmRNb3N0U2VhdHNXb24oZGF0YTogTGV2ZWxsaW5nU2VhdERhdGFbXSkge1xyXG4gICAgICAgIGNvbnN0IHNlYXRzV29uID0gZGF0YS5tYXAoKGRhdHVtKSA9PiBkYXR1bS5zZWF0c1dvbi5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiBzZWF0c1dvbi5pbmRleE9mKE1hdGgubWF4KC4uLnNlYXRzV29uKSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBSZWFjdFRhYmxlLCB7IENvbHVtbiB9IGZyb20gXCJyZWFjdC10YWJsZVwiO1xyXG5pbXBvcnQgeyBEaXN0cmljdFJlc3VsdCB9IGZyb20gXCIuLi8uLi8uLi9jb21wdXRhdGlvbi9jb21wdXRhdGlvbi1tb2RlbHNcIjtcclxuaW1wb3J0IHsgbm9yd2VnaWFuIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxpdGllcy9ydFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTZWF0RGlzdHJpYnV0aW9uUHJvcHMge1xyXG4gICAgZGlzdHJpY3RSZXN1bHRzOiBEaXN0cmljdFJlc3VsdFtdO1xyXG4gICAgZGlzdHJpY3RXaWR0aDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU2VhdERpc3RyaWJ1dGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxTZWF0RGlzdHJpYnV0aW9uUHJvcHMsIHt9PiB7XHJcbiAgICBnZW5lcmF0ZUNvbHVtbnMoKTogQ29sdW1uW10ge1xyXG4gICAgICAgIGNvbnN0IGNvbHVtbnM6IENvbHVtbltdID0gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBIZWFkZXI6IFwiRnlsa2VcIixcclxuICAgICAgICAgICAgICAgIGFjY2Vzc29yOiBcIm5hbWVcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLnByb3BzLmRpc3RyaWN0V2lkdGggKiAxMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGRpc3RyaWN0UmVzdWx0IG9mIHRoaXMucHJvcHMuZGlzdHJpY3RSZXN1bHRzKSB7XHJcbiAgICAgICAgICAgIGRpc3RyaWN0UmVzdWx0LnBhcnR5UmVzdWx0cy5zb3J0KCh2LCB0KSA9PiB2LnBhcnR5Q29kZS5sb2NhbGVDb21wYXJlKHQucGFydHlDb2RlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5kaXN0cmljdFJlc3VsdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBwYXJ0eUluZGV4ID0gMDsgcGFydHlJbmRleCA8IHRoaXMucHJvcHMuZGlzdHJpY3RSZXN1bHRzWzBdLnBhcnR5UmVzdWx0cy5sZW5ndGg7IHBhcnR5SW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMucHJvcHMuZGlzdHJpY3RSZXN1bHRzWzBdLnBhcnR5UmVzdWx0c1twYXJ0eUluZGV4XTtcclxuICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiBlbGVtZW50LnBhcnR5Q29kZSxcclxuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjogYHBhcnR5UmVzdWx0c1ske3BhcnR5SW5kZXh9XS50b3RhbFNlYXRzYCxcclxuICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogNTAsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbHVtbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICAgICAgICAgIDxSZWFjdFRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiLWhpZ2hsaWdodCAtc3RyaXBlZCBoYXMtdGV4dC1jZW50ZXJlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBhZ2VTaXplPXsxOX1cclxuICAgICAgICAgICAgICAgICAgICBzaG93UGFnaW5hdGlvbkJvdHRvbT17ZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YT17dGhpcy5wcm9wcy5kaXN0cmljdFJlc3VsdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1ucz17dGhpcy5nZW5lcmF0ZUNvbHVtbnMoKX1cclxuICAgICAgICAgICAgICAgICAgICB7Li4ubm9yd2VnaWFufVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3RUYWJsZSBmcm9tIFwicmVhY3QtdGFibGVcIjtcclxuaW1wb3J0IHsgRGlzdHJpY3RSZXN1bHQsIFBhcnR5UmVzdWx0LCBTZWF0UmVzdWx0LCBBbGdvcml0aG1UeXBlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXB1dGF0aW9uL2NvbXB1dGF0aW9uLW1vZGVsc1wiO1xyXG5pbXBvcnQgeyB0b1N1bSB9IGZyb20gXCIuLi8uLi8uLi91dGlsaXRpZXMvcmVkdWNlXCI7XHJcbmltcG9ydCB7IERpc3Byb3BvcnRpb25hbGl0eUluZGV4IH0gZnJvbSBcIi4uL3ByZXNlbnRhdGlvbi1tb2RlbHNcIjtcclxuaW1wb3J0IHsgY2hlY2tFeGhhdXN0aXZlbHkgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzXCI7XHJcbmltcG9ydCB7IERpc3RyaWN0U2VsZWN0IH0gZnJvbSBcIi4vRGlzdHJpY3RTZWxlY3RcIjtcclxuaW1wb3J0IHsgbm9yd2VnaWFuIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxpdGllcy9ydFwiO1xyXG5pbXBvcnQgeyByb3VuZE51bWJlciB9IGZyb20gXCIuLi8uLi8uLi91dGlsaXRpZXMvbnVtYmVyXCI7XHJcbmltcG9ydCB7IEluZm9Cb3ggfSBmcm9tIFwiLi9JbmZvQm94XCI7XHJcbmltcG9ydCB7XHJcbiAgICBnZXRWb3Rlc1RvVnVsbmVyYWJsZVNlYXRNYXAsXHJcbiAgICBnZXRRdW90aWVudHNUb1Z1bG5lcmFibGVTZWF0TWFwLFxyXG4gICAgZ2V0VnVsbmVyYWJsZVNlYXRCeVF1b3RpZW50LFxyXG4gICAgZ2V0VnVsbmVyYWJsZVNlYXRCeVZvdGVzLFxyXG59IGZyb20gXCIuLi8uLi8uLi91dGlsaXRpZXMvZGlzdHJpY3RcIjtcclxuaW1wb3J0IHsgaXNRdW90aWVudEFsZ29yaXRobSB9IGZyb20gXCIuLi8uLi8uLi9jb21wdXRhdGlvbi9sb2dpY1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTaW5nbGVEaXN0cmljdFByb3BzIHtcclxuICAgIGRpc3RyaWN0UmVzdWx0czogRGlzdHJpY3RSZXN1bHRbXTtcclxuICAgIGRpc3RyaWN0U2VsZWN0ZWQ6IHN0cmluZztcclxuICAgIHNlbGVjdERpc3RyaWN0OiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4gdm9pZDtcclxuICAgIGRlY2ltYWxzOiBudW1iZXI7XHJcbiAgICBkaXNwcm9wb3J0aW9uYWxpdHlJbmRleDogRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXg7XHJcbiAgICBhbGdvcml0aG06IEFsZ29yaXRobVR5cGU7XHJcbiAgICBwYXJ0eU1hcDogXy5EaWN0aW9uYXJ5PHN0cmluZz47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaW5nbGVEaXN0cmljdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxTaW5nbGVEaXN0cmljdFByb3BzLCB7fT4ge1xyXG4gICAgZ2V0RGlzdHJpY3RSZXN1bHQgPSAobmFtZTogc3RyaW5nKTogRGlzdHJpY3RSZXN1bHQgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkRGlzdHJpY3QgPVxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmRpc3RyaWN0UmVzdWx0cy5maW5kKChkaXN0cmljdCkgPT4gZGlzdHJpY3QubmFtZSA9PT0gbmFtZSkgfHwgdGhpcy5wcm9wcy5kaXN0cmljdFJlc3VsdHNbMF07XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkRGlzdHJpY3Q7XHJcbiAgICB9O1xyXG5cclxuICAgIGdldERhdGEgPSAoKTogUGFydHlSZXN1bHRbXSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGlzdHJpY3RSZXN1bHQgPSB0aGlzLmdldERpc3RyaWN0UmVzdWx0KHRoaXMucHJvcHMuZGlzdHJpY3RTZWxlY3RlZCk7XHJcbiAgICAgICAgcmV0dXJuIGRpc3RyaWN0UmVzdWx0LnBhcnR5UmVzdWx0cztcclxuICAgIH07XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnREaXN0cmljdFJlc3VsdCA9IHRoaXMuZ2V0RGlzdHJpY3RSZXN1bHQodGhpcy5wcm9wcy5kaXN0cmljdFNlbGVjdGVkKTtcclxuICAgICAgICBjb25zdCBjYWxjdWxhdGVWdWxuZXJhYmxlID1cclxuICAgICAgICAgICAgaXNRdW90aWVudEFsZ29yaXRobSh0aGlzLnByb3BzLmFsZ29yaXRobSkgJiYgY3VycmVudERpc3RyaWN0UmVzdWx0LmRpc3RyaWN0U2VhdHMgPiAwO1xyXG4gICAgICAgIGNvbnN0IHZ1bG5lcmFibGVNYXAgPSBjYWxjdWxhdGVWdWxuZXJhYmxlID8gZ2V0Vm90ZXNUb1Z1bG5lcmFibGVTZWF0TWFwKGN1cnJlbnREaXN0cmljdFJlc3VsdCEpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGNvbnN0IHF1b3RpZW50TWFwID0gY2FsY3VsYXRlVnVsbmVyYWJsZSA/IGdldFF1b3RpZW50c1RvVnVsbmVyYWJsZVNlYXRNYXAoY3VycmVudERpc3RyaWN0UmVzdWx0ISkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgY29uc3QgdnVsbmVyYWJsZSA9IGNhbGN1bGF0ZVZ1bG5lcmFibGUgPyBnZXRWdWxuZXJhYmxlU2VhdEJ5UXVvdGllbnQoY3VycmVudERpc3RyaWN0UmVzdWx0ISkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgY29uc3QgdnVsbmVyYWJsZVZvdGVzID0gY2FsY3VsYXRlVnVsbmVyYWJsZSA/IGdldFZ1bG5lcmFibGVTZWF0QnlWb3RlcyhjdXJyZW50RGlzdHJpY3RSZXN1bHQhKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhKCkhO1xyXG4gICAgICAgIGNvbnN0IGRlY2ltYWxzID0gdGhpcy5wcm9wcy5kZWNpbWFscztcclxuICAgICAgICBjb25zdCBwcm9wb3J0aW9uYWxpdGllcyA9IGRhdGEubWFwKCh2YWx1ZSkgPT4gdmFsdWUucHJvcG9ydGlvbmFsaXR5KTtcclxuICAgICAgICBsZXQgbGFiZWw6IHN0cmluZztcclxuICAgICAgICBsZXQgaW5kZXg6IG51bWJlcjtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMucHJvcHMuZGlzcHJvcG9ydGlvbmFsaXR5SW5kZXgpIHtcclxuICAgICAgICAgICAgY2FzZSBEaXNwcm9wb3J0aW9uYWxpdHlJbmRleC5MT09TRU1PUkVfSEFOQlk6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsID0gXCJMLUhcIjtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gcHJvcG9ydGlvbmFsaXRpZXMubWFwKCh2YWx1ZSkgPT4gTWF0aC5hYnModmFsdWUpKS5yZWR1Y2UodG9TdW0sIDApIC8gMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXguR0FMTEFHSEVSOiB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbCA9IFwiTFNxXCI7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IE1hdGguc3FydChwcm9wb3J0aW9uYWxpdGllcy5tYXAoKHZhbHVlKSA9PiB2YWx1ZSAqIHZhbHVlKS5yZWR1Y2UodG9TdW0sIDApIC8gMik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICBjaGVja0V4aGF1c3RpdmVseSh0aGlzLnByb3BzLmRpc3Byb3BvcnRpb25hbGl0eUluZGV4KTtcclxuICAgICAgICAgICAgICAgIGxhYmVsID0gXCJFcnJvclwiO1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICA8RGlzdHJpY3RTZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3REaXN0cmljdD17dGhpcy5wcm9wcy5zZWxlY3REaXN0cmljdH1cclxuICAgICAgICAgICAgICAgICAgICBkaXN0cmljdFNlbGVjdGVkPXt0aGlzLnByb3BzLmRpc3RyaWN0U2VsZWN0ZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdHJpY3RSZXN1bHRzPXt0aGlzLnByb3BzLmRpc3RyaWN0UmVzdWx0c31cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICB7Y2FsY3VsYXRlVnVsbmVyYWJsZSAmJiA8SW5mb0JveCB2dWxuZXJhYmxlPXt2dWxuZXJhYmxlIX0gdnVsbmVyYWJsZVZvdGVzPXt2dWxuZXJhYmxlVm90ZXMhfSBwYXJ0eU1hcD17dGhpcy5wcm9wcy5wYXJ0eU1hcH0vPn1cclxuICAgICAgICAgICAgICAgIDxSZWFjdFRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiLWhpZ2hsaWdodCAtc3RyaXBlZCBoYXMtdGV4dC1jZW50ZXJlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YT17ZGF0YX1cclxuICAgICAgICAgICAgICAgICAgICBwYWdlU2l6ZT17ZGF0YS5sZW5ndGggPD0gMTAgPyBkYXRhLmxlbmd0aCA6IDEwfVxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dQYWdpbmF0aW9uPXtkYXRhLmxlbmd0aCA+IDEwfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnM9e1tcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiBcIlBhcnRpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjogXCJwYXJ0eUNvZGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvb3RlcjogKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlV0dmFsZzwvc3Ryb25nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDZWxsOiAocm93KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdy5vcmlnaW5hbC5wYXJ0eU5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyA8YWJiciB0aXRsZT17cm93Lm9yaWdpbmFsLnBhcnR5TmFtZX0+e3Jvdy52YWx1ZX08L2FiYnI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcm93LnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiBcIlN0ZW1tZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yOiBcInZvdGVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb290ZXI6IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz57ZGF0YS5tYXAoKHZhbHVlKSA9PiB2YWx1ZS52b3RlcykucmVkdWNlKHRvU3VtKX08L3N0cm9uZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWFkZXI6IFwiJVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiJVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IChkOiBQYXJ0eVJlc3VsdCkgPT4gcm91bmROdW1iZXIoZC5wZXJjZW50Vm90ZXMsIGRlY2ltYWxzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiBcIkRpc3RyaWt0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjogXCJkaXN0cmljdFNlYXRzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb290ZXI6IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz57ZGF0YS5tYXAoKHZhbHVlKSA9PiB2YWx1ZS5kaXN0cmljdFNlYXRzKS5yZWR1Y2UodG9TdW0pfTwvc3Ryb25nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlYWRlcjogXCJVdGpldm5pbmdcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yOiBcImxldmVsaW5nU2VhdHNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvb3RlcjogKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPntkYXRhLm1hcCgodmFsdWUpID0+IHZhbHVlLmxldmVsaW5nU2VhdHMpLnJlZHVjZSh0b1N1bSl9PC9zdHJvbmc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiBcIlN1bSBNYW5kYXRlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IFwidG90YWxTZWF0c1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9vdGVyOiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+e2RhdGEubWFwKCh2YWx1ZSkgPT4gdmFsdWUudG90YWxTZWF0cykucmVkdWNlKHRvU3VtKX08L3N0cm9uZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJtYXJnaW5JblZvdGVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWFkZXI6IFwiTWFyZ2luIGkgc3RlbW1lclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IChkOiBQYXJ0eVJlc3VsdCkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnZvdGVzID4gMCAmJiB2dWxuZXJhYmxlTWFwID8gdnVsbmVyYWJsZU1hcC5nZXQoZC5wYXJ0eUNvZGUpIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENlbGw6IChyb3cpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodnVsbmVyYWJsZVZvdGVzICYmIHJvdy5vcmlnaW5hbC5wYXJ0eUNvZGUgPT09IHZ1bG5lcmFibGVWb3Rlcy5wYXJ0eUNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiaGFzLWJhY2tncm91bmQtZGFyayBoYXMtdGV4dC13aGl0ZVwiPntyb3cudmFsdWV9PC9kaXY+O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodnVsbmVyYWJsZVZvdGVzICYmIHJvdy5vcmlnaW5hbC5wYXJ0eUNvZGUgPT09IHZ1bG5lcmFibGVWb3Rlcy53aW5uZXIucGFydHlDb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpY29uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLXRyb3BoeVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb3cudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogY2FsY3VsYXRlVnVsbmVyYWJsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwibGFzdFNlYXRRdW90aWVudFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiBcIlNpc3RlIGt2b3RpZW50XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjogKGQ6IFBhcnR5UmVzdWx0KSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQudm90ZXMgPiAwICYmIHF1b3RpZW50TWFwID8gcXVvdGllbnRNYXAuZ2V0KGQucGFydHlDb2RlKSEudG9GaXhlZChkZWNpbWFscykgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2VsbDogKHJvdykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2dWxuZXJhYmxlICYmIHJvdy5vcmlnaW5hbC5wYXJ0eUNvZGUgPT09IHZ1bG5lcmFibGUucnVubmVyVXAucGFydHlDb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImhhcy1iYWNrZ3JvdW5kLWRhcmsgaGFzLXRleHQtd2hpdGVcIj57cm93LnZhbHVlfTwvZGl2PjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdy52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiBjYWxjdWxhdGVWdWxuZXJhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWFkZXI6IFwiUHJvcC4gJVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IFwicHJvcG9ydGlvbmFsaXR5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb290ZXI6IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsYWJlbH06IHtpbmRleC50b0ZpeGVkKGRlY2ltYWxzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHJvbmc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBdfVxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dQYWdlU2l6ZU9wdGlvbnM9e2ZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgIHsuLi5ub3J3ZWdpYW59XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBnZXRMYXN0U2VhdCA9ICgpOiBTZWF0UmVzdWx0IHwgdW5kZWZpbmVkID0+IHtcclxuICAgICAgICBjb25zdCBkaXN0cmljdFJlc3VsdCA9IHRoaXMuZ2V0RGlzdHJpY3RSZXN1bHQodGhpcy5wcm9wcy5kaXN0cmljdFNlbGVjdGVkKTtcclxuICAgICAgICBpZiAoZGlzdHJpY3RSZXN1bHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRpc3RyaWN0UmVzdWx0LmRpc3RyaWN0U2VhdFJlc3VsdFtkaXN0cmljdFJlc3VsdC5kaXN0cmljdFNlYXRSZXN1bHQubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG59XHJcbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uRGlzcGxheSwgTm90aWZpY2F0aW9uRGlzcGxheVByb3BzIH0gZnJvbSBcIi4vTm90aWZpY2F0aW9uRGlzcGxheVwiO1xyXG5pbXBvcnQgeyByZW1vdmVOb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vdWktYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBSb290U3RhdGUgfSBmcm9tIFwiLi4vLi4vcmVkdWNlcnNcIjtcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogUm9vdFN0YXRlKTogUGljazxOb3RpZmljYXRpb25EaXNwbGF5UHJvcHMsIFwibm90aWZpY2F0aW9uc1wiPiA9PiAoe1xyXG4gICAgbm90aWZpY2F0aW9uczogc3RhdGUudWlTdGF0ZS5ub3RpZmljYXRpb25zLFxyXG59KTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaDogYW55KTogUGljazxOb3RpZmljYXRpb25EaXNwbGF5UHJvcHMsIFwiY2xvc2VcIj4gPT4gKHtcclxuICAgIGNsb3NlOiAoaWQ6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNsb3NlTm90aWZpY2F0aW9uQWN0aW9uID0gcmVtb3ZlTm90aWZpY2F0aW9uKGlkKTtcclxuICAgICAgICBkaXNwYXRjaChjbG9zZU5vdGlmaWNhdGlvbkFjdGlvbik7XHJcbiAgICB9LFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBDb25uZWN0ZWROb3RpZmljYXRpb25EaXNwbGF5ID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoTm90aWZpY2F0aW9uRGlzcGxheSBhcyBhbnkpO1xyXG4iLCJpbXBvcnQgeyBSb290U3RhdGUgfSBmcm9tIFwiLi4vLi4vcmVkdWNlcnNcIjtcclxuaW1wb3J0IHsgVHV0b3JpYWxQcm9wcywgVHV0b3JpYWwgfSBmcm9tIFwiLi9UdXRvcmlhbFwiO1xyXG5pbXBvcnQgeyBoaWRlVHV0b3JpYWwgfSBmcm9tIFwiLi4vdWktYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFJvb3RTdGF0ZSk6IFBpY2s8VHV0b3JpYWxQcm9wcywgXCJzaG93VHV0b3JpYWxcIj4gPT4gKHtcclxuICAgIHNob3dUdXRvcmlhbDogc3RhdGUudWlTdGF0ZS5zaG93VHV0b3JpYWwsXHJcbn0pO1xyXG5cclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoOiBhbnkpOiBQaWNrPFR1dG9yaWFsUHJvcHMsIFwiY2xvc2VUdXRvcmlhbFwiPiA9PiAoe1xyXG4gICAgY2xvc2VUdXRvcmlhbDogKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGhpZGVUdXRvcmlhbEFjdGlvbiA9IGhpZGVUdXRvcmlhbCgpO1xyXG4gICAgICAgIGRpc3BhdGNoKGhpZGVUdXRvcmlhbEFjdGlvbik7XHJcbiAgICB9LFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBDb25uZWN0ZWRUdXRvcmlhbCA9IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFR1dG9yaWFsIGFzIGFueSk7XHJcbiIsImltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyBSb290U3RhdGUgfSBmcm9tIFwiLi9zdGF0ZVwiO1xyXG5pbXBvcnQgeyBjb21wdXRhdGlvbiB9IGZyb20gXCIuLi9jb21wdXRhdGlvblwiO1xyXG5pbXBvcnQgeyByZXF1ZXN0ZWREYXRhIH0gZnJvbSBcIi4uL3JlcXVlc3RlZC1kYXRhXCI7XHJcbmltcG9ydCB7IGNvbXB1dGF0aW9uTWVudSB9IGZyb20gXCIuLi9MYXlvdXQvQ29tcHV0YXRpb25NZW51XCI7XHJcbmltcG9ydCB7IHByZXNlbnRhdGlvbk1lbnUgfSBmcm9tIFwiLi4vTGF5b3V0L1ByZXNlbnRhdGlvbk1lbnVcIjtcclxuaW1wb3J0IHsgdWkgfSBmcm9tIFwiLi4vTGF5b3V0L3VpLXJlZHVjZXJcIjtcclxuXHJcbmV4cG9ydCB7IFJvb3RTdGF0ZSB9O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzPFJvb3RTdGF0ZT4oe1xyXG4gICAgY29tcHV0YXRpb25TdGF0ZTogY29tcHV0YXRpb24sXHJcbiAgICBzZXR0aW5nc1N0YXRlOiBjb21wdXRhdGlvbk1lbnUsXHJcbiAgICBwcmVzZW50YXRpb25NZW51U3RhdGU6IHByZXNlbnRhdGlvbk1lbnUsXHJcbiAgICByZXF1ZXN0ZWREYXRhU3RhdGU6IHJlcXVlc3RlZERhdGEsXHJcbiAgICB1aVN0YXRlOiB1aSxcclxufSk7XHJcbiIsImltcG9ydCB7IFNvcnRlZFJldmVyc2VEaWN0LCBLZXlWYWx1ZVBhaXIgfSBmcm9tIFwiLi9zb3J0ZWQtcmV2ZXJzZS1kaWN0XCI7XHJcbmltcG9ydCB7IGJyZWFrVGllcyB9IGZyb20gXCIuL3V0aWxzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUXVvdGllbnREaWN0aW9uYXJ5IGV4dGVuZHMgU29ydGVkUmV2ZXJzZURpY3Qge1xyXG4gICAgZGVub21pbmF0b3JGdW5jdGlvbjogKHRpbWVzV29uOiBudW1iZXIpID0+IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkZW5vbWluYXRvckZ1bmN0aW9uOiAodGltZXNXb246IG51bWJlcikgPT4gbnVtYmVyKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmRlbm9taW5hdG9yRnVuY3Rpb24gPSBkZW5vbWluYXRvckZ1bmN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgcXVvdGllbnQgb2YgdGhlIHBhcnR5IGFuZCBzb3J0cyBpdCBpbnRvIHRoZSBwYXJ0eSBxdW90aWVudCBkaWN0aW9uYXJ5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJ0eUNvZGUgVGhlIHBhcnR5IGNvZGUgZm9yIGEgcGFydHlcclxuICAgICAqIEBwYXJhbSB2b3RlcyBOdW1iZXIgb2Ygdm90ZXMgdGhlIHBhcnR5IHJlY2VpdmVkXHJcbiAgICAgKiBAcGFyYW0gdGltZXNXb24gTnVtYmVyIG9mIHNlYXRzIHdvbiBieSB0aGUgcGFydHlcclxuICAgICAqL1xyXG4gICAgaW5zZXJ0UGFydHkocGFydHlDb2RlOiBzdHJpbmcsIHZvdGVzOiBudW1iZXIsIHRpbWVzV29uOiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBxdW90aWVudCA9IHZvdGVzIC8gdGhpcy5kZW5vbWluYXRvckZ1bmN0aW9uKHRpbWVzV29uKTtcclxuICAgICAgICB0aGlzLmluc2VydCh7IGtleTogcGFydHlDb2RlLCB2YWx1ZTogcXVvdGllbnQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBwYXJ0eSB3aXRoIHRoZSBoaWdoZXN0IHF1b3RpZW50LlxyXG4gICAgICogQnJlYWtzIHRpZXMgYWNjb3JkaW5nIHRvIHRoZSBOb3J3ZWdpYW4gbGF3cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFydHlWb3RlcyBOdW1iZXIgb2Ygdm90ZXMgcmVjZWl2ZWQgYnkgZWFjaCBwYXJ0eVxyXG4gICAgICovXHJcbiAgICBnZXRXaW5uZXIocGFydHlWb3RlczogXy5EaWN0aW9uYXJ5PG51bWJlcj4pOiBLZXlWYWx1ZVBhaXIge1xyXG4gICAgICAgIGNvbnN0IHdpbm5lcnMgPSB0aGlzLnBvcFRvcCgpO1xyXG4gICAgICAgIGxldCB3aW5uZXI6IEtleVZhbHVlUGFpcjtcclxuXHJcbiAgICAgICAgLy8gSWYgbW9yZSB0aGFuIDEgZGlzdHJpY3RzIHNoYXJlIHRoZSBsZWFkXHJcbiAgICAgICAgaWYgKHdpbm5lcnMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAvLyBTZWxlY3QgYSB3aW5uZXJcclxuICAgICAgICAgICAgd2lubmVyID0gYnJlYWtUaWVzKHdpbm5lcnMsIHBhcnR5Vm90ZXMpO1xyXG5cclxuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBsb3NlcnMgYmFjayBpbnRvIHRoZSBkaXN0cmlidXRpb25cclxuICAgICAgICAgICAgd2lubmVycy5mb3JFYWNoKChlbnRyeSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmtleSAhPT0gd2lubmVyLmtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0KGVudHJ5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2lubmVyID0gd2lubmVyc1swXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB3aW5uZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBxdW90aWVudHMgb2YgZXZlcnkgcGFydHkgYW5kIHNvcnRzIHRoZW0gaW50byB0aGUgcGFydHkgcXVvdGllbnQgZGljdGlvbmFyeS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZGlzdHJpYnV0aW9uIE51bWJlciBvZiBzZWF0cyB3b24gYnkgZWFjaCBwYXJ0eVxyXG4gICAgICogQHBhcmFtIHBhcnR5Vm90ZXMgTnVtYmVyIG9mIHZvdGVzIHJlY2VpdmVkIGJ5IGVhY2ggcGFydHlcclxuICAgICAqL1xyXG4gICAgcG9wdWxhdGVRdW90aWVudHMoZGlzdHJpYnV0aW9uOiBfLkRpY3Rpb25hcnk8bnVtYmVyPiwgcGFydHlWb3RlczogXy5EaWN0aW9uYXJ5PG51bWJlcj4pIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IGluIGRpc3RyaWJ1dGlvbikge1xyXG4gICAgICAgICAgICBpZiAoZGlzdHJpYnV0aW9uLmhhc093blByb3BlcnR5KGVudHJ5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRQYXJ0eShlbnRyeSwgcGFydHlWb3Rlc1tlbnRyeV0sIGRpc3RyaWJ1dGlvbltlbnRyeV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBZZWFyU2VsZWN0UHJvcHMge1xyXG4gICAgZWxlY3Rpb25ZZWFyczogc3RyaW5nW107XHJcbiAgICB5ZWFyOiBzdHJpbmc7XHJcbiAgICB0b29sdGlwPzogUmVhY3QuUmVhY3ROb2RlO1xyXG4gICAgb25ZZWFyQ2hhbmdlOiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFllYXJTZWxlY3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8WWVhclNlbGVjdFByb3BzPiB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImxhYmVsXCIgaHRtbEZvcj1cInllYXJfc2VsZWN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgVmFsZ3Qgw6VyIHt0aGlzLnByb3BzLnRvb2x0aXB9XHJcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWxlY3QgaXMtcHJpbWFyeSBpcy1mdWxsd2lkdGhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJWZWxnIMOlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cInllYXJfc2VsZWN0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnllYXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vblllYXJDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwieWVhclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmVsZWN0aW9uWWVhcnMubWFwKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24ga2V5PXtpbmRleH0gdmFsdWU9e2l0ZW19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2l0ZW19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgQWxnb3JpdGhtVHlwZSB9IGZyb20gXCIuLi8uLi9jb21wdXRhdGlvblwiO1xyXG5pbXBvcnQgeyBnZXRBbGdvcml0aG1OYW1lRnJvbVR5cGUgfSBmcm9tIFwiLi4vLi4vY29tcHV0YXRpb24vbG9naWNcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWxnb3JpdGhtU2VsZWN0UHJvcHMge1xyXG4gICAgYWxnb3JpdGhtOiBBbGdvcml0aG1UeXBlO1xyXG4gICAgZGVmYXVsdEFsZ29yaXRobTogQWxnb3JpdGhtVHlwZTtcclxuICAgIG9uQWxnb3JpdGhtQ2hhbmdlOiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4gdm9pZDtcclxuICAgIHRvb2x0aXA/OiBSZWFjdC5SZWFjdE5vZGU7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBbGdvcml0aG1TZWxlY3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8QWxnb3JpdGhtU2VsZWN0UHJvcHM+IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBzZXR0dGluZ1dhc0NoYW5nZWQgPSB0aGlzLnByb3BzLmFsZ29yaXRobSAhPT0gdGhpcy5wcm9wcy5kZWZhdWx0QWxnb3JpdGhtO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmllbGRcIj5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJsYWJlbFwiIGh0bWxGb3I9XCJhbGdvcml0aG1fc2VsZWN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgVmFsZ3QgbWV0b2RlIHt0aGlzLnByb3BzLnRvb2x0aXB9XHJcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWxlY3QgaXMtcHJpbWFyeSBpcy1mdWxsd2lkdGhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJCZXJlZ25pbmdzbWV0b2RlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiYWxnb3JpdGhtX3NlbGVjdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiY2FsY01ldGhvZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5hbGdvcml0aG19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vbkFsZ29yaXRobUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT17QWxnb3JpdGhtVHlwZS5TQUlOVEVfTEFHVUV9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRBbGdvcml0aG1OYW1lRnJvbVR5cGUoQWxnb3JpdGhtVHlwZS5TQUlOVEVfTEFHVUUpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPXtBbGdvcml0aG1UeXBlLkRfSE9ORFR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRBbGdvcml0aG1OYW1lRnJvbVR5cGUoQWxnb3JpdGhtVHlwZS5EX0hPTkRUKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT17QWxnb3JpdGhtVHlwZS5MQVJHRVNUX0ZSQUNUSU9OX0hBUkV9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRBbGdvcml0aG1OYW1lRnJvbVR5cGUoQWxnb3JpdGhtVHlwZS5MQVJHRVNUX0ZSQUNUSU9OX0hBUkUpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPXtBbGdvcml0aG1UeXBlLkxBUkdFU1RfRlJBQ1RJT05fRFJPT1B9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRBbGdvcml0aG1OYW1lRnJvbVR5cGUoQWxnb3JpdGhtVHlwZS5MQVJHRVNUX0ZSQUNUSU9OX0RST09QKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT17QWxnb3JpdGhtVHlwZS5MQVJHRVNUX0ZSQUNUSU9OX0hBR0VOQkFDSF9CSVNDSE9GRn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2dldEFsZ29yaXRobU5hbWVGcm9tVHlwZShBbGdvcml0aG1UeXBlLkxBUkdFU1RfRlJBQ1RJT05fSEFHRU5CQUNIX0JJU0NIT0ZGKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAge3NldHR0aW5nV2FzQ2hhbmdlZCAmJiA8bGFiZWw+T3JnaW5hbHQ6IHtnZXRBbGdvcml0aG1OYW1lRnJvbVR5cGUodGhpcy5wcm9wcy5kZWZhdWx0QWxnb3JpdGhtKX08L2xhYmVsPn1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXV0b0NvbXB1dGVDaGVja2JveFByb3BzIHtcclxuICAgIGF1dG9Db21wdXRlOiBib29sZWFuO1xyXG4gICAgdG9nZ2xlQXV0b0NvbXB1dGU6IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XHJcbiAgICBjb21wdXRlTWFudWFsbHk6ICgpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBdXRvQ29tcHV0ZUNoZWNrYm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEF1dG9Db21wdXRlQ2hlY2tib3hQcm9wcz4ge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmllbGRcIj5cclxuICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic3dpdGNoXCJcclxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwiYXV0b0NvbXB1dGVcIlxyXG4gICAgICAgICAgICAgICAgICAgIGlkPVwiYXV0b0NvbXB1dGVcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMucHJvcHMuYXV0b0NvbXB1dGV9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMudG9nZ2xlQXV0b0NvbXB1dGV9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJhdXRvQ29tcHV0ZVwiIGNsYXNzTmFtZT1cImNoZWNrYm94XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgT3BwZGF0ZXIgYXV0b21hdGlza1xyXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVzZXRCdXR0b25Qcm9wcyB7XHJcbiAgICByZXN0b3JlVG9EZWZhdWx0OiAoKSA9PiB2b2lkO1xyXG4gICAgaGlnaGxpZ2h0OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzZXRCdXR0b24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UmVzZXRCdXR0b25Qcm9wcz4ge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodEJ1dHRvbiA9IHRoaXMucHJvcHMuaGlnaGxpZ2h0ID8gXCIgaXMtcHJpbWFyeSBpcy1vdXRsaW5lZFwiIDogXCIgaXMtc3RhdGljXCI7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiYnV0dG9uIGlzLWZ1bGx3aWR0aCBoYXMtdGV4dC13ZWlnaHQtYm9sZFwiICsgaGlnaGxpZ2h0QnV0dG9ufVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMucHJvcHMucmVzdG9yZVRvRGVmYXVsdH1cclxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICBUaWxiYWtlc3RpbGwgdGlsIGhpc3RvcmlzayBvcmRuaW5nXHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgU2F2ZUNvbXBhcmlzb25CdXR0b24sIFNhdmVDb21wYXJpc29uQnV0dG9uUHJvcHMgfSBmcm9tIFwiLi9TYXZlQ29tcGFyaXNvbkJ1dHRvblwiO1xyXG5pbXBvcnQgeyBSZXNldENvbXBhcmlzb25CdXR0b25Qcm9wcywgUmVzZXRDb21wYXJpc29uQnV0dG9uIH0gZnJvbSBcIi4vUmVzZXRDb21wYXJpc29uQnV0dG9uXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBhcmlzb25PcHRpb25zUHJvcHMgZXh0ZW5kcyBTYXZlQ29tcGFyaXNvbkJ1dHRvblByb3BzLCBSZXNldENvbXBhcmlzb25CdXR0b25Qcm9wcyB7XHJcbiAgICBzaG93Q29tcGFyaXNvbjogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbXBhcmlzb25PcHRpb25zIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PENvbXBhcmlzb25PcHRpb25zUHJvcHM+IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGhpZGRlbj17IXRoaXMucHJvcHMuc2hvd0NvbXBhcmlzb259PlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImxhYmVsIGhhcy10ZXh0LWNlbnRlcmVkXCI+U2FtbWVubGlrbmluZzwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxSZXNldENvbXBhcmlzb25CdXR0b24gcmVzZXRDb21wYXJpc29uPXt0aGlzLnByb3BzLnJlc2V0Q29tcGFyaXNvbn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8U2F2ZUNvbXBhcmlzb25CdXR0b24gc2F2ZUNvbXBhcmlzb249e3RoaXMucHJvcHMuc2F2ZUNvbXBhcmlzb259IC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2F2ZUNvbXBhcmlzb25CdXR0b25Qcm9wcyB7XHJcbiAgICBzYXZlQ29tcGFyaXNvbjogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNhdmVDb21wYXJpc29uQnV0dG9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFNhdmVDb21wYXJpc29uQnV0dG9uUHJvcHM+IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidXR0b24gaXMtcHJpbWFyeSBpcy1mdWxsd2lkdGhcIlxyXG4gICAgICAgICAgICAgICAgdGl0bGU9e1wiTGFncmUgc2FtbWVubGlrbmluZ1wifVxyXG4gICAgICAgICAgICAgICAgaWQ9XCJzYXZlQ29tcGFyaXNvblwiXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLnNhdmVDb21wYXJpc29ufVxyXG4gICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIExhZ3JlXHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlc2V0Q29tcGFyaXNvbkJ1dHRvblByb3BzIHtcclxuICAgIHJlc2V0Q29tcGFyaXNvbjogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlc2V0Q29tcGFyaXNvbkJ1dHRvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxSZXNldENvbXBhcmlzb25CdXR0b25Qcm9wcz4ge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ1dHRvbiBpcy1wcmltYXJ5IGlzLW91dGxpbmVkIGlzLWZ1bGx3aWR0aFwiXHJcbiAgICAgICAgICAgICAgICB0aXRsZT17XCJHamVub3BwcmV0dCBzYW1tZW5saWtuaW5nXCJ9XHJcbiAgICAgICAgICAgICAgICBpZD1cInJlc2V0Q29tcGFyaXNvblwiXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLnJlc2V0Q29tcGFyaXNvbn1cclxuICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICBHamVub3BwcmV0dFxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb21wdXRlTWFudWFsbHlCdXR0b25Qcm9wcyB7XHJcbiAgICBhdXRvQ29tcHV0ZTogYm9vbGVhbjtcclxuICAgIGNvbXB1dGVNYW51YWxseTogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbXB1dGVNYW51YWxseUJ1dHRvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxDb21wdXRlTWFudWFsbHlCdXR0b25Qcm9wcz4ge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgaGlkZGVuPXt0aGlzLnByb3BzLmF1dG9Db21wdXRlfT5cclxuICAgICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgICAgICBpZD1cImNvbXB1dGVfbWFudWFsbHlcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ1dHRvbiBpcy1wcmltYXJ5IGlzLW91dGxpbmVkIGlzLWZ1bGx3aWR0aCBoYXMtdGV4dC13ZWlnaHQtYm9sZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9e1wiQmVyZWduIG1hbnVlbHRcIn1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLmNvbXB1dGVNYW51YWxseX1cclxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgICAgICBoaWRkZW49e3RoaXMucHJvcHMuYXV0b0NvbXB1dGV9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgQmVyZWduIG1hbnVlbHRcclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFByZXNlbnRhdGlvblR5cGUgfSBmcm9tIFwiLi4vLi4vUHJlc2VudGF0aW9uL3ByZXNlbnRhdGlvbi1tb2RlbHNcIjtcclxuXHJcbmludGVyZmFjZSBTZWxlY3Rpb25JdGVtIHtcclxuICAgIHR5cGU6IFByZXNlbnRhdGlvblR5cGU7XHJcbiAgICBkaXNwbGF5TmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2VsZWN0aW9uTG9va3VwOiBTZWxlY3Rpb25JdGVtW10gPSBbXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogUHJlc2VudGF0aW9uVHlwZS5FbGVjdGlvblRhYmxlLFxyXG4gICAgICAgIGRpc3BsYXlOYW1lOiBcIkxhbmRzb3ZlcnNpa3RcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogUHJlc2VudGF0aW9uVHlwZS5EaXN0cmljdFRhYmxlLFxyXG4gICAgICAgIGRpc3BsYXlOYW1lOiBcIkZ5bGtlc292ZXJzaWt0XCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6IFByZXNlbnRhdGlvblR5cGUuTGV2ZWxsaW5nU2VhdHMsXHJcbiAgICAgICAgZGlzcGxheU5hbWU6IFwiVXRqZXZuaW5nc21hbmRhdGVyXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6IFByZXNlbnRhdGlvblR5cGUuUmVtYWluZGVyUXVvdGllbnRzLFxyXG4gICAgICAgIGRpc3BsYXlOYW1lOiBcIlJlc3Rrdm90aWVudGVyXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6IFByZXNlbnRhdGlvblR5cGUuU2VhdERpc3RyaWJ1dGlvbixcclxuICAgICAgICBkaXNwbGF5TmFtZTogXCJGeWxrZXNmb3JkZWxpbmcgYXYgbWFuZGF0ZXJcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogUHJlc2VudGF0aW9uVHlwZS5TaW5nbGVEaXN0cmljdCxcclxuICAgICAgICBkaXNwbGF5TmFtZTogXCJFbmtlbHRmeWxrZVwiLFxyXG4gICAgfSxcclxuXTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWxlY3Rpb25OYW1lKHR5cGU6IFByZXNlbnRhdGlvblR5cGUpIHtcclxuICAgIHJldHVybiBzZWxlY3Rpb25Mb29rdXAuZmluZCgoc2VsZWN0aW9uKSA9PiBzZWxlY3Rpb24udHlwZSA9PT0gdHlwZSkhLmRpc3BsYXlOYW1lO1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBEaXNwcm9wb3J0aW9uYWxpdHlJbmRleCB9IGZyb20gXCIuLi8uLi9QcmVzZW50YXRpb24vcHJlc2VudGF0aW9uLW1vZGVsc1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEaXNwcm9wb3J0aW9uYWxpdHlTZWxlY3RQcm9wcyB7XHJcbiAgICBoaWRkZW46IGJvb2xlYW47XHJcbiAgICB0b29sdGlwPzogUmVhY3QuUmVhY3ROb2RlO1xyXG4gICAgZGlzcHJvcG9ydGlvbmFsaXR5SW5kZXg6IERpc3Byb3BvcnRpb25hbGl0eUluZGV4O1xyXG4gICAgY2hhbmdlRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXg6IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTFNlbGVjdEVsZW1lbnQ+KSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRGlzcHJvcG9ydGlvbmFsaXR5U2VsZWN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PERpc3Byb3BvcnRpb25hbGl0eVNlbGVjdFByb3BzPiB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBoaWRkZW49e3RoaXMucHJvcHMuaGlkZGVufSBjbGFzc05hbWU9XCJmaWVsZFwiPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImxhYmVsXCIgaHRtbEZvcj1cImRpc3Byb3BvcnRpb25hbGl0eVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIERpc3Byb3BvcnNqb25hbGl0ZXRzaW5kZWtzIHt0aGlzLnByb3BzLnRvb2x0aXB9XHJcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWxlY3QgaXMtcHJpbWFyeSBpcy1mdWxsd2lkdGhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJkaXNwcm9wb3J0aW9uYWxpdHlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMuY2hhbmdlRGlzcHJvcG9ydGlvbmFsaXR5SW5kZXh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5kaXNwcm9wb3J0aW9uYWxpdHlJbmRleH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17RGlzcHJvcG9ydGlvbmFsaXR5SW5kZXguTE9PU0VNT1JFX0hBTkJZfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtEaXNwcm9wb3J0aW9uYWxpdHlJbmRleC5MT09TRU1PUkVfSEFOQll9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9vc2Vtb3JlLUhhbmJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24ga2V5PXtEaXNwcm9wb3J0aW9uYWxpdHlJbmRleC5HQUxMQUdIRVJ9IHZhbHVlPXtEaXNwcm9wb3J0aW9uYWxpdHlJbmRleC5HQUxMQUdIRVJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdhbGxhZ2hlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE5vU2VhdHNDaGVja2JveFByb3BzIHtcclxuICAgIGhpZGRlbjogYm9vbGVhbjtcclxuICAgIHNob3dQYXJ0aWVzV2l0aG91dFNlYXRzOiBib29sZWFuO1xyXG4gICAgdG9nZ2xlU2hvd1BhcnRpZXNXaXRob3V0U2VhdHM6IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBOb1NlYXRzQ2hlY2tib3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8Tm9TZWF0c0NoZWNrYm94UHJvcHM+IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGhpZGRlbj17dGhpcy5wcm9wcy5oaWRkZW59IGNsYXNzTmFtZT1cImZpZWxkXCI+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInN3aXRjaFwiXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJuby1zZWF0cy1zZXR0aW5nXCJcclxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwibm8tc2VhdHMtc2V0dGluZ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5wcm9wcy5zaG93UGFydGllc1dpdGhvdXRTZWF0c31cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy50b2dnbGVTaG93UGFydGllc1dpdGhvdXRTZWF0c31cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiY2hlY2tib3hcIiBodG1sRm9yPVwibm8tc2VhdHMtc2V0dGluZ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIElua2x1ZGVyIHBhcnRpZXIgdXRlbiBtYW5kYXRlclxyXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGFyaXNvbkNoZWNrYm94UHJvcHMge1xyXG4gICAgaGlkZGVuOiBib29sZWFuO1xyXG4gICAgc2hvd0NvbXBhcmlzb246IGJvb2xlYW47XHJcbiAgICB0b2dnbGVDb21wYXJpc29uOiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tcGFyaXNvbkNoZWNrYm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PENvbXBhcmlzb25DaGVja2JveFByb3BzPiB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBoaWRkZW49e3RoaXMucHJvcHMuaGlkZGVufSBjbGFzc05hbWU9XCJmaWVsZFwiPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcclxuICAgICAgICAgICAgICAgICAgICBpZD1cImNvbXBhcmlzb24tY2hlY2tib3hcIlxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU9XCJjb21wYXJpc29uLWNoZWNrYm94XCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzd2l0Y2hcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMucHJvcHMuc2hvd0NvbXBhcmlzb259XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMudG9nZ2xlQ29tcGFyaXNvbn1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiY2hlY2tib3hcIiBodG1sRm9yPVwiY29tcGFyaXNvbi1jaGVja2JveFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIE1hbmRhdGVuZHJpbmdlclxyXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmludGVyZmFjZSBGaWx0ZXJzQ2hlY2tib3hQcm9wcyB7XHJcbiAgICBoaWRkZW46IGJvb2xlYW47XHJcbiAgICBzaG93RmlsdGVyczogYm9vbGVhbjtcclxuICAgIHRvZ2dsZVNob3dGaWx0ZXJzOiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRmlsdGVyc0NoZWNrYm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEZpbHRlcnNDaGVja2JveFByb3BzPiB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiIGhpZGRlbj17dGhpcy5wcm9wcy5oaWRkZW59PlxyXG4gICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzd2l0Y2hcIlxyXG4gICAgICAgICAgICAgICAgICAgIGlkPVwiZmlsdGVycy1zZXR0aW5nXCJcclxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwiZmlsdGVycy1zZXR0aW5nXCJcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnByb3BzLnNob3dGaWx0ZXJzfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnByb3BzLnRvZ2dsZVNob3dGaWx0ZXJzfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiY2hlY2tib3hcIiBodG1sRm9yPVwiZmlsdGVycy1zZXR0aW5nXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgVmlzIHRhYmVsbGZpbHRyZVxyXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmludGVyZmFjZSBNZXJnZURpc3RyaWN0c0NoZWNrYm94UHJvcHMge1xyXG4gICAgaGlkZGVuOiBib29sZWFuO1xyXG4gICAgbWVyZ2VEaXN0cmljdHM6IGJvb2xlYW47XHJcbiAgICB0b2dnbGVNZXJnZURpc3RyaWN0czogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1lcmdlRGlzdHJpY3RzQ2hlY2tib3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8TWVyZ2VEaXN0cmljdHNDaGVja2JveFByb3BzPiB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiIGhpZGRlbj17dGhpcy5wcm9wcy5oaWRkZW59PlxyXG4gICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInN3aXRjaFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJtZXJnZS1zZXR0aW5nXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJtZXJnZS1zZXR0aW5nXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5wcm9wcy5tZXJnZURpc3RyaWN0c31cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMudG9nZ2xlTWVyZ2VEaXN0cmljdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJjaGVja2JveFwiIGh0bWxGb3I9XCJtZXJnZS1zZXR0aW5nXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgU2zDpSBzYW1tZW4gMTkgZnlsa2VyIHRpbCAxMSBmeWxrZXJcclxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbnRlcmZhY2UgVXNlMjAyMURpc3RyaWJ1dGlvbkNoZWNrYm94UHJvcHMge1xyXG4gICAgaGlkZGVuOiBib29sZWFuO1xyXG4gICAgdXNlMjAyMURpc3RyaWJ1dGlvbjogYm9vbGVhbjtcclxuICAgIHRvZ2dsZVVzZTIwMjFEaXN0cmlidXRpb246IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVc2UyMDIxRGlzdHJpYnV0aW9uQ2hlY2tib3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VXNlMjAyMURpc3RyaWJ1dGlvbkNoZWNrYm94UHJvcHM+IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpZWxkXCIgaGlkZGVuPXt0aGlzLnByb3BzLmhpZGRlbn0+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic3dpdGNoXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCIyMDIxLWRpc3RyaWJ1dGlvbi1zZXR0aW5nXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cIjIwMjEtZGlzdHJpYnV0aW9uLXNldHRpbmdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnByb3BzLnVzZTIwMjFEaXN0cmlidXRpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnByb3BzLnRvZ2dsZVVzZTIwMjFEaXN0cmlidXRpb259XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJjaGVja2JveFwiIGh0bWxGb3I9XCIyMDIxLWRpc3RyaWJ1dGlvbi1zZXR0aW5nXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgQnJ1ayBmeWxrZXNkYXRhIGZyYSAyMDIxXHJcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBDb25uZWN0ZWRMYXlvdXQgfSBmcm9tIFwiLi9MYXlvdXRcIjtcclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWltcGxpY2l0LWRlcGVuZGVuY2llc1xyXG5pbXBvcnQgeyBob3QgfSBmcm9tIFwicmVhY3QtaG90LWxvYWRlclwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFwcCA9IGhvdChtb2R1bGUpKCgpID0+IDxDb25uZWN0ZWRMYXlvdXQgLz4pO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgQ29ubmVjdGVkUHJlc2VudGF0aW9uIH0gZnJvbSBcIi4vUHJlc2VudGF0aW9uXCI7XHJcbmltcG9ydCB7IENvbm5lY3RlZENvbXB1dGF0aW9uTWVudSB9IGZyb20gXCIuL0NvbXB1dGF0aW9uTWVudVwiO1xyXG5pbXBvcnQgeyBDb25uZWN0ZWRQcmVzZW50YXRpb25TZXR0aW5ncyB9IGZyb20gXCIuL1ByZXNlbnRhdGlvbk1lbnVcIjtcclxuaW1wb3J0IHsgQ29ubmVjdGVkTmF2aWdhdGlvbiB9IGZyb20gXCIuL05hdmlnYXRpb24vQ29ubmVjdGVkTmF2aWdhdGlvblwiO1xyXG5pbXBvcnQgeyBDb25uZWN0ZWRQcmVzZW50YXRpb25TZWxlY3Rpb24gfSBmcm9tIFwiLi9QcmVzZW50YXRpb25NZW51L1ByZXNlbnRhdGlvblNlbGVjdGlvbi9Db25uZWN0ZWRQcmVzZW50YXRpb25TZWxlY3Rpb25cIjtcclxuaW1wb3J0IHsgQ29ubmVjdGVkTm90aWZpY2F0aW9uRGlzcGxheSwgTm90aWZpY2F0aW9uVHlwZSB9IGZyb20gXCIuL05vdGlmaWNhdGlvbnNcIjtcclxuaW1wb3J0IHsgQ29ubmVjdGVkVHV0b3JpYWwgfSBmcm9tIFwiLi9UdXRvcmlhbFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMYXlvdXRQcm9wcyB7XHJcbiAgICBkYXRhTG9hZGVkOiBib29sZWFuO1xyXG4gICAgaGFtYnVyZ2VyRXhwYW5kZWQ6IGJvb2xlYW47XHJcbiAgICB0b2dnbGVIYW1idXJnZXI6ICh0b2dnbGVkOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gICAgaW5pdGlhbGl6ZVN0YXRlOiAoKSA9PiBhbnk7XHJcbiAgICBjbGVhclN0YXRlOiAoKSA9PiB2b2lkO1xyXG4gICAgc2hvd05vdGlmaWNhdGlvbjogKHR5cGU6IE5vdGlmaWNhdGlvblR5cGUsIHRleHQ6IHN0cmluZykgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExheW91dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxMYXlvdXRQcm9wcywge30+IHtcclxuICAgIGFzeW5jIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLnByb3BzLmluaXRpYWxpemVTdGF0ZSgpO1xyXG4gICAgfVxyXG4gICAgY2xvc2VIYW1idXJnZXIgPSAoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTERpdkVsZW1lbnQsIE1vdXNlRXZlbnQ+KSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaGFtYnVyZ2VyRXhwYW5kZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy50b2dnbGVIYW1idXJnZXIhKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgYXN5bmMgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3I6IEVycm9yLCBlcnJvckluZm86IFJlYWN0LkVycm9ySW5mbykge1xyXG4gICAgICAgIHRoaXMucHJvcHMuY2xlYXJTdGF0ZSgpO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucHJvcHMuaW5pdGlhbGl6ZVN0YXRlKCk7XHJcbiAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uVGV4dCA9IGBEZXQgb3Bwc3RvZCBlbiBmZWlsIHPDpSBMYXZpbmlhIG3DpXR0ZSB0aWxiYWtlc3RpbGxlcy4gRmVpbG1lbGRpbmdlbiB2YXI6ICR7ZXJyb3IubWVzc2FnZX1gO1xyXG4gICAgICAgIHRoaXMucHJvcHMuc2hvd05vdGlmaWNhdGlvbihOb3RpZmljYXRpb25UeXBlLkRBTkdFUiwgbm90aWZpY2F0aW9uVGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBzaG93TG9hZGluZyA9IHRoaXMucHJvcHMuZGF0YUxvYWRlZCA/IFwiXCIgOiBcIiBpcy1hY3RpdmVcIjtcclxuICAgICAgICBjb25zdCBwYWdlTG9hZGVyQ2xhc3MgPSBcInBhZ2Vsb2FkZXIgaXMtc2l6ZS0xXCIgKyBzaG93TG9hZGluZztcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgPENvbm5lY3RlZFR1dG9yaWFsIC8+XHJcbiAgICAgICAgICAgICAgICA8Q29ubmVjdGVkTmF2aWdhdGlvbiAvPlxyXG4gICAgICAgICAgICAgICAgPENvbm5lY3RlZE5vdGlmaWNhdGlvbkRpc3BsYXkgLz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtwYWdlTG9hZGVyQ2xhc3N9IGlkPXtcInBhZ2VfbG9hZGVyXCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRpdGxlIGlzLXNpemUtMlwiPkxhc3RlciBpbm4gTGF2aW5pYS4uLjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2x1bW5zIGlzLWRlc2t0b3Agc2VjdGlvblwiIG9uQ2xpY2s9e3RoaXMuY2xvc2VIYW1idXJnZXJ9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sdW1uIGlzLW5hcnJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29ubmVjdGVkQ29tcHV0YXRpb25NZW51IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2x1bW4gcHJlc2VudGF0aW9uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25uZWN0ZWRQcmVzZW50YXRpb25TZXR0aW5ncyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29ubmVjdGVkUHJlc2VudGF0aW9uU2VsZWN0aW9uIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25uZWN0ZWRQcmVzZW50YXRpb24gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUGFydHlSZXN1bHQgfSBmcm9tIFwiLi4vLi4vLi4vY29tcHV0YXRpb24vY29tcHV0YXRpb24tbW9kZWxzXCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3RUYWJsZSBmcm9tIFwicmVhY3QtdGFibGVcIjtcclxuaW1wb3J0IHsgbm9yd2VnaWFuIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxpdGllcy9ydFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFbGVjdGlvbkNvbXBhcmlzb25Qcm9wcyB7XHJcbiAgICBjb21wYXJpc29uUGFydHlSZXN1bHRzOiBQYXJ0eVJlc3VsdFtdO1xyXG4gICAgY3VycmVudFBhcnR5UmVzdWx0czogUGFydHlSZXN1bHRbXTtcclxufVxyXG5cclxuaW50ZXJmYWNlIENvbXBhcmlzb25cclxuICAgIGV4dGVuZHMgUGljazxQYXJ0eVJlc3VsdCwgXCJwYXJ0eUNvZGVcIiB8IFwiZGlzdHJpY3RTZWF0c1wiIHwgXCJsZXZlbGluZ1NlYXRzXCIgfCBcInRvdGFsU2VhdHNcIiB8IFwicHJvcG9ydGlvbmFsaXR5XCI+IHtcclxuICAgIGRpc3RyaWN0U2VhdHNDb21wYXJpc29uOiBudW1iZXI7XHJcbiAgICBkaXN0cmljdFNlYXRzRGlmZmVyZW5jZTogbnVtYmVyO1xyXG4gICAgbGV2ZWxpbmdTZWF0c0NvbXBhcmlzb246IG51bWJlcjtcclxuICAgIGxldmVsaW5nU2VhdHNEaWZmZXJlbmNlOiBudW1iZXI7XHJcbiAgICB0b3RhbFNlYXRzRGlmZmVyZW5jZTogbnVtYmVyO1xyXG4gICAgdG90YWxTZWF0c0NvbXBhcmlzb246IG51bWJlcjtcclxuICAgIHByb3BvcnRpb25hbGl0eUNvbXBhcmlzb246IG51bWJlcjtcclxuICAgIHByb3BvcnRpb25hbGl0eURpZmZlcmVuY2U6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEVsZWN0aW9uQ29tcGFyaXNvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxFbGVjdGlvbkNvbXBhcmlzb25Qcm9wcz4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgbWV0aG9kIHRvIGdlbmVyYXRlIHRoZSBkYXRhIG9iamVjdCBuZWNlc3NhcnkgZm9yIGNvbXBhcmlzb24uXHJcbiAgICAgKiBOZWVkcyB0byBmaWx0ZXIgd2hpY2ggcGFydGllcyBzdGlsbCBleGlzdCBhbmQgbWF0Y2ggdGhlbSB0byB0aGUgcGFydGllc1xyXG4gICAgICogaW4gdGhlIG9yaWdpbmFsLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJ0eVJlc3VsdHMgLSB0aGUgY3VycmVudCByZXN1bHRzXHJcbiAgICAgKiBAcGFyYW0gY29tcGFyZWRQYXJ0eVJlc3VsdHMgLSByZXN1bHRzIHRvIGNvbXBhcmUgdGhlIGN1cnJlbnQgdG9cclxuICAgICAqL1xyXG4gICAgZ2V0RGF0YSA9IChwYXJ0eVJlc3VsdHM6IFBhcnR5UmVzdWx0W10sIGNvbXBhcmVkUGFydHlSZXN1bHRzOiBQYXJ0eVJlc3VsdFtdKTogQ29tcGFyaXNvbltdID0+IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJdGVyYXRlIHRocm91Z2ggdGhlIGN1cnJlbnQgcmVzdWx0cyBhbmQgZmluZCBhIG1hdGNoIGJ5IHBhcnR5IGNvZGVcclxuICAgICAgICAgKiBmb3IgdGhlIGNvbXBhcmVkLCBhbmQgYWRkIGEgY29tcGFyaXNvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCBjb21wYXJpc29uczogKENvbXBhcmlzb24gfCB1bmRlZmluZWQpW10gPSBwYXJ0eVJlc3VsdHMubWFwKChjdXJyZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBhcmFibGUgPSBjb21wYXJlZFBhcnR5UmVzdWx0cy5maW5kKChjb21wYXJpc29uKSA9PiBjdXJyZW50LnBhcnR5Q29kZSA9PT0gY29tcGFyaXNvbi5wYXJ0eUNvZGUpO1xyXG4gICAgICAgICAgICBpZiAoISFjb21wYXJhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wYXJpc29uOiBDb21wYXJpc29uID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcnR5Q29kZTogY3VycmVudC5wYXJ0eUNvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdHJpY3RTZWF0czogY3VycmVudC5kaXN0cmljdFNlYXRzLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3RyaWN0U2VhdHNDb21wYXJpc29uOiBjb21wYXJhYmxlLmRpc3RyaWN0U2VhdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdHJpY3RTZWF0c0RpZmZlcmVuY2U6IGN1cnJlbnQuZGlzdHJpY3RTZWF0cyAtIGNvbXBhcmFibGUuZGlzdHJpY3RTZWF0cyxcclxuICAgICAgICAgICAgICAgICAgICBsZXZlbGluZ1NlYXRzOiBjdXJyZW50LmxldmVsaW5nU2VhdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWxpbmdTZWF0c0NvbXBhcmlzb246IGNvbXBhcmFibGUubGV2ZWxpbmdTZWF0cyxcclxuICAgICAgICAgICAgICAgICAgICBsZXZlbGluZ1NlYXRzRGlmZmVyZW5jZTogY3VycmVudC5sZXZlbGluZ1NlYXRzIC0gY29tcGFyYWJsZS5sZXZlbGluZ1NlYXRzLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsU2VhdHM6IGN1cnJlbnQudG90YWxTZWF0cyxcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbFNlYXRzQ29tcGFyaXNvbjogY29tcGFyYWJsZS50b3RhbFNlYXRzLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsU2VhdHNEaWZmZXJlbmNlOiBjdXJyZW50LnRvdGFsU2VhdHMgLSBjb21wYXJhYmxlLnRvdGFsU2VhdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcG9ydGlvbmFsaXR5OiBjdXJyZW50LnByb3BvcnRpb25hbGl0eSxcclxuICAgICAgICAgICAgICAgICAgICBwcm9wb3J0aW9uYWxpdHlDb21wYXJpc29uOiBjb21wYXJhYmxlLnByb3BvcnRpb25hbGl0eSxcclxuICAgICAgICAgICAgICAgICAgICBwcm9wb3J0aW9uYWxpdHlEaWZmZXJlbmNlOiBjdXJyZW50LnByb3BvcnRpb25hbGl0eSAtIGNvbXBhcmFibGUucHJvcG9ydGlvbmFsaXR5LFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21wYXJpc29uO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEZpbHRlcmVkIHRvIHJlbW92ZSB0aGUgdW5kZWZpbmVkIG1hcC1yZXN1bHRzLCBhbmQgY2FzdCBkdWUgdG9cclxuICAgICAgICAgKiBjb25zdHJhaW50cyB3aXRoIHR5cGluZy4gQWZ0ZXIgdGhlIGZpbHRlcmluZyB0aGVyZSBpcyBubyB3YXlcclxuICAgICAgICAgKiB0aGVyZSBhcmUgYW55IHVuZGVmaW5lZCBjb21wYXJpc29ucyByZW1haW5pbmcsIGJ1dCB0aGUgdHlwZVxyXG4gICAgICAgICAqIHN5c3RlbSBkb2VzIG5vdCBwaWNrIHVwIG9uIGl0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkID0gY29tcGFyaXNvbnMuZmlsdGVyKChjb21wYXJpc29uKSA9PiBjb21wYXJpc29uICE9PSB1bmRlZmluZWQpIGFzIENvbXBhcmlzb25bXTtcclxuICAgICAgICByZXR1cm4gZmlsdGVyZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhKHRoaXMucHJvcHMuY3VycmVudFBhcnR5UmVzdWx0cywgdGhpcy5wcm9wcy5jb21wYXJpc29uUGFydHlSZXN1bHRzKTtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8UmVhY3RUYWJsZVxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiLWhpZ2hsaWdodCAtc3RyaXBlZCBoYXMtdGV4dC1jZW50ZXJlZFwiXHJcbiAgICAgICAgICAgICAgICBkYXRhPXtkYXRhfVxyXG4gICAgICAgICAgICAgICAgcGFnZVNpemU9e2RhdGEubGVuZ3RoID4gMTAgPyAxMCA6IGRhdGEubGVuZ3RofVxyXG4gICAgICAgICAgICAgICAgY29sdW1ucz17W1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwicGFydHlDb2RlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhlYWRlcjogPGFiYnIgdGl0bGU9XCJQYXJ0aWtvZGVcIj5QYXJ0aTwvYWJicj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yOiAoZDogQ29tcGFyaXNvbikgPT4gZC5wYXJ0eUNvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcInRvdGFsRGlmZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBIZWFkZXI6IDxhYmJyIHRpdGxlPVwiRGlmZmVyYW5zZSBhdiB0b3RhbCBzdW0gbWFuZGF0ZXJcIj5Ub3RhbCBlbmRyaW5nPC9hYmJyPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IChkOiBDb21wYXJpc29uKSA9PiBkLnRvdGFsU2VhdHNEaWZmZXJlbmNlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJkaXN0cmljdERpZmZlcmVuY2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiA8YWJiciB0aXRsZT1cIkRpZmZlcmFuc2UgYXYgZGlzdHJpa3RzbWFuZGF0ZXJcIj5FbmRyaW5nIGRpc3RyaWt0PC9hYmJyPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3I6IChkOiBDb21wYXJpc29uKSA9PiBkLmRpc3RyaWN0U2VhdHNEaWZmZXJlbmNlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJsZXZlbGluZ0RpZmZlcmVuY2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyOiA8YWJiciB0aXRsZT1cIkRpZmZlcmFuc2UgYXYgdXRqZXZuaW5nc21hbmRhdGVyXCI+RW5kcmluZyB1dGpldm5pbmc8L2FiYnI+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvcjogKGQ6IENvbXBhcmlzb24pID0+IGQubGV2ZWxpbmdTZWF0c0RpZmZlcmVuY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAgICAgICBzaG93UGFnaW5hdGlvbj17ZGF0YS5sZW5ndGggPiAxMH1cclxuICAgICAgICAgICAgICAgIHNob3dQYWdlU2l6ZU9wdGlvbnM9e2ZhbHNlfVxyXG4gICAgICAgICAgICAgICAgey4uLm5vcndlZ2lhbn1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBWdWxuZXJhYmxlRGlzdHJpY3RTZWF0IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxpdGllcy9kaXN0cmljdFwiO1xyXG5pbXBvcnQgeyBEaWN0aW9uYXJ5IH0gZnJvbSBcImxvZGFzaFwiO1xyXG5pbXBvcnQgeyBQYXJ0eU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL1BhcnR5TmFtZVwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBWdWxuZXJhYmxlRGlzdHJpY3RTZWF0VGV4dFByb3BzIHtcclxuICAgIG1vc3RWdWxuZXJhYmxlPzogVnVsbmVyYWJsZURpc3RyaWN0U2VhdCB8IHVuZGVmaW5lZDtcclxuICAgIHBhcnR5TWFwOiBEaWN0aW9uYXJ5PHN0cmluZz47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBWdWxuZXJhYmxlRGlzdHJpY3RTZWF0VGV4dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxWdWxuZXJhYmxlRGlzdHJpY3RTZWF0VGV4dFByb3BzLCB7fT4ge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm1vc3RWdWxuZXJhYmxlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnR5TWFwID0gdGhpcy5wcm9wcy5wYXJ0eU1hcDtcclxuICAgICAgICAgICAgY29uc3Qgd2lubmVyUGFydHlDb2RlID0gdGhpcy5wcm9wcy5tb3N0VnVsbmVyYWJsZS53aW5uZXIucGFydHlDb2RlO1xyXG4gICAgICAgICAgICBjb25zdCBydW5uZXJVcFBhcnR5Q29kZSA9IHRoaXMucHJvcHMubW9zdFZ1bG5lcmFibGUucnVubmVyVXAucGFydHlDb2RlO1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgICAgIHtcIiBEZXQgbWVzdCB1dHNhdHRlIHNpc3RlbWFuZGF0ZXQgKHJlbGF0aXZ0IHRpbCBrdm90aWVudCkgdmFyIGkgXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMubW9zdFZ1bG5lcmFibGUuZGlzdHJpY3R9XHJcbiAgICAgICAgICAgICAgICAgICAge1wiIG9nIGJsZSB2dW5uZXQgYXYgXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgPFBhcnR5TmFtZSBuYW1lPXt3aW5uZXJQYXJ0eUNvZGV9IHBhcnR5TWFwPXtwYXJ0eU1hcH0gLz5cclxuICAgICAgICAgICAgICAgICAgICB7XCIuIFwifVxyXG4gICAgICAgICAgICAgICAgICAgIDxQYXJ0eU5hbWUgbmFtZT17cnVubmVyVXBQYXJ0eUNvZGV9IHBhcnR5TWFwPXtwYXJ0eU1hcH0gLz5cclxuICAgICAgICAgICAgICAgICAgICB7XCIgdmlsbGUgdHJlbmd0IFwifVxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLm1vc3RWdWxuZXJhYmxlLm1vcmVWb3Rlc1RvV2luLnRvRml4ZWQoMCl9XHJcbiAgICAgICAgICAgICAgICAgICAge1wiIGZsZXJlIHN0ZW1tZXIgZm9yIMOlIHZpbm5lIGRldC5cIn1cclxuICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBEaXN0cmljdFJlc3VsdCB9IGZyb20gXCIuLi8uLi8uLi9jb21wdXRhdGlvbi9jb21wdXRhdGlvbi1tb2RlbHNcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGlzdHJpY3RTZWxlY3RQcm9wcyB7XHJcbiAgICBzZWxlY3REaXN0cmljdDogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MU2VsZWN0RWxlbWVudD4pID0+IHZvaWQ7XHJcbiAgICBkaXN0cmljdFJlc3VsdHM6IERpc3RyaWN0UmVzdWx0W107XHJcbiAgICBkaXN0cmljdFNlbGVjdGVkOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEaXN0cmljdFNlbGVjdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxEaXN0cmljdFNlbGVjdFByb3BzPiB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWxlY3QgaXMtZnVsbHdpZHRoIGlzLXByaW1hcnkgaXMtbWVkaXVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZGlzdHJpY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMuc2VsZWN0RGlzdHJpY3R9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5kaXN0cmljdFNlbGVjdGVkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5kaXN0cmljdFJlc3VsdHMubWFwKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24ga2V5PXtpbmRleH0gdmFsdWU9e2l0ZW0ubmFtZX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aXRlbS5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFZ1bG5lcmFibGVEaXN0cmljdFNlYXQsIFZ1bG5lcmFibGVWb3RlcyB9IGZyb20gXCIuLi8uLi8uLi91dGlsaXRpZXMvZGlzdHJpY3RcIjtcclxuaW1wb3J0IHsgUGFydHlOYW1lIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9QYXJ0eU5hbWVcIjtcclxuXHJcbmludGVyZmFjZSBJbmZvQm94UHJvcHMge1xyXG4gICAgdnVsbmVyYWJsZTogVnVsbmVyYWJsZURpc3RyaWN0U2VhdDtcclxuICAgIHZ1bG5lcmFibGVWb3RlczogVnVsbmVyYWJsZVZvdGVzO1xyXG4gICAgcGFydHlNYXA6IF8uRGljdGlvbmFyeTxzdHJpbmc+O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSW5mb0JveCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJbmZvQm94UHJvcHM+IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBwYXJ0eU1hcCA9IHRoaXMucHJvcHMucGFydHlNYXA7XHJcbiAgICAgICAgY29uc3QgdnVsbmVyYWJsZSA9IHRoaXMucHJvcHMudnVsbmVyYWJsZTtcclxuICAgICAgICBjb25zdCB2dWxuZXJhYmxlVm90ZXMgPSB0aGlzLnByb3BzLnZ1bG5lcmFibGVWb3RlcztcclxuICAgICAgICBjb25zdCBleHRlbmRlZEluZm8gPVxyXG4gICAgICAgICAgICB2dWxuZXJhYmxlLm1vcmVWb3Rlc1RvV2luID4gdnVsbmVyYWJsZVZvdGVzLm1vcmVWb3Rlc1RvV2luXHJcbiAgICAgICAgICAgICAgICA/IFtcclxuICAgICAgICAgICAgICAgICAgICAgIFwiIGhhZGRlIG7DpnJtZXN0ZSBrdm90aWVudCBvZyB0cmVuZ3RlIFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdnVsbmVyYWJsZS5tb3JlVm90ZXNUb1dpbixcclxuICAgICAgICAgICAgICAgICAgICAgIFwiIGZsZXJlIHN0ZW1tZXIgZm9yIMOlIHZpbm5lIG1hbmRhdGV0LiBcIixcclxuICAgICAgICAgICAgICAgICAgICAgIDxQYXJ0eU5hbWUgbmFtZT17dnVsbmVyYWJsZVZvdGVzLnBhcnR5Q29kZX0gcGFydHlNYXA9e3BhcnR5TWFwfSBrZXk9XCJ2dWxuZXJhYmxlVm90ZXNcIiAvPixcclxuICAgICAgICAgICAgICAgICAgICAgIFwiIGhhZGRlIGRlcmltb3QgbWluc3QgbWFyZ2luIGkgc3RlbW1lciBvZyB0cmVuZ3RlIGJhcmUgXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICB2dWxuZXJhYmxlVm90ZXMubW9yZVZvdGVzVG9XaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBcIiBmbGVyZSBzdGVtbWVyLlwiLFxyXG4gICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICA6IFtcclxuICAgICAgICAgICAgICAgICAgICAgIFwiIGhhZGRlIG7DpnJtZXN0ZSBrdm90aWVudCBvZyB0cmVuZ3RlIFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdnVsbmVyYWJsZS5tb3JlVm90ZXNUb1dpbixcclxuICAgICAgICAgICAgICAgICAgICAgIFwiIGZsZXJlIHN0ZW1tZXIgZm9yIMOlIHRhIG1hbmRhdGV0LiBcIixcclxuICAgICAgICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkIGhhcy1iYWNrZ3JvdW5kLXByaW1hcnkgaGFzLXRleHQtbGlnaHQgaXMtc2l6ZS01XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XCJTaXN0ZW1hbmRhdCBpIFwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7dnVsbmVyYWJsZS5kaXN0cmljdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAge1wiIGdpa2sgdGlsIFwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8UGFydHlOYW1lIG5hbWU9e3Z1bG5lcmFibGUud2lubmVyLnBhcnR5Q29kZX0gcGFydHlNYXA9e3BhcnR5TWFwfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XCIuIFwifSZuYnNwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8UGFydHlOYW1lIG5hbWU9e3Z1bG5lcmFibGUucnVubmVyVXAucGFydHlDb2RlfSBwYXJ0eU1hcD17cGFydHlNYXB9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtleHRlbmRlZEluZm99XHJcbiAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUm9vdFN0YXRlIH0gZnJvbSBcIi4uLy4uL3JlZHVjZXJzXCI7XHJcbmltcG9ydCB7IE5hdmlnYXRpb25Qcm9wcywgTmF2aWdhdGlvbiB9IGZyb20gXCIuL05hdmlnYXRpb25cIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyB0b2dnbGVIYW1idXJnZXIgfSBmcm9tIFwiLi4vdWktYWN0aW9uc1wiO1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBSb290U3RhdGUpOiBOYXZpZ2F0aW9uUHJvcHMgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBoYW1idXJnZXJFeHBhbmRlZDogc3RhdGUudWlTdGF0ZS5oYW1idXJnZXJFeHBhbmRlZCxcclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2g6IGFueSk6IE5hdmlnYXRpb25Qcm9wcyA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHRvZ2dsZUhhbWJ1cmdlcjogKGhhbWJ1cmdlckV4cGFuZGVkOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHRvZ2dsZUhhbWJ1cmdlcihoYW1idXJnZXJFeHBhbmRlZCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IENvbm5lY3RlZE5hdmlnYXRpb24gPSBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShOYXZpZ2F0aW9uKTtcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IExhdmluaWFTVkdMb2dvIH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOYXZpZ2F0aW9uUHJvcHMge1xyXG4gICAgaGFtYnVyZ2VyRXhwYW5kZWQ/OiBib29sZWFuO1xyXG4gICAgdG9nZ2xlSGFtYnVyZ2VyPzogKGhhbWJ1cmdlckV4cGFuZGVkOiBib29sZWFuKSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTmF2aWdhdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxOYXZpZ2F0aW9uUHJvcHM+IHtcclxuICAgIGhhbmRsZUhhbWJ1cmdlckNsaWNrID0gKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxBbmNob3JFbGVtZW50LCBNb3VzZUV2ZW50PikgPT4ge1xyXG4gICAgICAgIHRoaXMucHJvcHMudG9nZ2xlSGFtYnVyZ2VyISh0aGlzLnByb3BzLmhhbWJ1cmdlckV4cGFuZGVkISk7XHJcbiAgICB9O1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCB3aWtpVXJsID0gcHJvY2Vzcy5lbnYuV0lLSTtcclxuICAgICAgICBjb25zdCBzd2FnZ2VyVWlVcmwgPSBwcm9jZXNzLmVudi5TV0FHR0VSVUk7XHJcbiAgICAgICAgY29uc3Qgc3R5bGUgPSB7XHJcbiAgICAgICAgICAgIG1lbnVCdXR0b246IFwibmF2YmFyLWJ1cmdlciBidXJnZXJcIixcclxuICAgICAgICAgICAgbWVudTogXCJuYXZiYXItbWVudVwiLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaGFtYnVyZ2VyRXhwYW5kZWQpIHtcclxuICAgICAgICAgICAgc3R5bGUubWVudUJ1dHRvbiArPSBcIiBpcy1hY3RpdmVcIjtcclxuICAgICAgICAgICAgc3R5bGUubWVudSArPSBcIiBpcy1hY3RpdmVcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPG5hdiBjbGFzc05hbWU9XCJuYXZiYXIgaXMtcHJpbWFyeVwiIHJvbGU9XCJuYXZpZ2F0aW9uXCIgYXJpYS1sYWJlbD1cIm1haW4gbmF2aWdhdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuYXZiYXItYnJhbmRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJuYXZiYXItaXRlbVwiIGhyZWY9XCIuL1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TGF2aW5pYVNWR0xvZ28gdGl0bGU9e1wiTEFWSU5JQVwifSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGUubWVudUJ1dHRvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIm1lbnVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPXt0aGlzLnByb3BzLmhhbWJ1cmdlckV4cGFuZGVkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUhhbWJ1cmdlckNsaWNrfVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwidG9nZ2xlYWJsZS1tZW51XCIgY2xhc3NOYW1lPXtzdHlsZS5tZW51fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdmJhci1zdGFydFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXt3aWtpVXJsfSByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCIgY2xhc3NOYW1lPVwibmF2YmFyLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhqZWxwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmF2YmFyLWl0ZW0gaGFzLWRyb3Bkb3duIGlzLWhvdmVyYWJsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJuYXZiYXItbGlua1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPXt3aWtpVXJsPy5jb25jYXQoXCIjTGF2aW5pYVwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbSBMYXZpbmlhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdmJhci1kcm9wZG93blwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9e3N3YWdnZXJVaVVybH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5hdmJhci1pdGVtXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFQSVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHIgY2xhc3NOYW1lPVwibmF2YmFyLWRpdmlkZXJcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL3d3dy5naXRodWIuY29tL1Byb2plY3QtTGF2aW5pYS9MYXZpbmlhLUNsaWVudC9pc3N1ZXNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmF2YmFyLWl0ZW1cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2kgZW4gdGlsYmFrZW1lbGRpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vd3d3LmdpdGh1Yi5jb20vUHJvamVjdC1MYXZpbmlhXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5hdmJhci1pdGVtXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdpdEh1YlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L25hdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFJvb3RTdGF0ZSB9IGZyb20gXCIuLi8uLi8uLi9yZWR1Y2Vyc1wiO1xyXG5pbXBvcnQgeyBQcmVzZW50YXRpb25TZWxlY3Rpb25Qcm9wcywgUHJlc2VudGF0aW9uU2VsZWN0aW9uIH0gZnJvbSBcIi4vUHJlc2VudGF0aW9uU2VsZWN0aW9uXCI7XHJcbmltcG9ydCB7IGNoYW5nZVByZXNlbnRhdGlvbiB9IGZyb20gXCIuLi9wcmVzZW50YXRpb24tbWVudS1hY3Rpb25zXCI7XHJcbmltcG9ydCB7IFByZXNlbnRhdGlvblR5cGUgfSBmcm9tIFwiLi4vLi4vUHJlc2VudGF0aW9uL3ByZXNlbnRhdGlvbi1tb2RlbHNcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBSb290U3RhdGUpOiBQYXJ0aWFsPFByZXNlbnRhdGlvblNlbGVjdGlvblByb3BzPiA9PiAoe1xyXG4gICAgY3VycmVudFNlbGVjdGlvbjogc3RhdGUucHJlc2VudGF0aW9uTWVudVN0YXRlLmN1cnJlbnRQcmVzZW50YXRpb24sXHJcbn0pO1xyXG5cclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoOiBhbnkpOiBQYXJ0aWFsPFByZXNlbnRhdGlvblNlbGVjdGlvblByb3BzPiA9PiAoe1xyXG4gICAgY2hhbmdlU2VsZWN0aW9uOiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4ge1xyXG4gICAgICAgIGRpc3BhdGNoKGNoYW5nZVByZXNlbnRhdGlvbihldmVudC50YXJnZXQudmFsdWUgYXMgUHJlc2VudGF0aW9uVHlwZSkpO1xyXG4gICAgfSxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgQ29ubmVjdGVkUHJlc2VudGF0aW9uU2VsZWN0aW9uID0gY29ubmVjdChcclxuICAgIG1hcFN0YXRlVG9Qcm9wcyxcclxuICAgIG1hcERpc3BhdGNoVG9Qcm9wc1xyXG4pKFByZXNlbnRhdGlvblNlbGVjdGlvbik7XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb24gfSBmcm9tIFwiLi9Ob3RpZmljYXRpb25cIjtcclxuaW1wb3J0IHsgRnVsbE5vdGlmaWNhdGlvbkRhdGEgfSBmcm9tIFwiLlwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOb3RpZmljYXRpb25EaXNwbGF5UHJvcHMge1xyXG4gICAgbm90aWZpY2F0aW9uczogRnVsbE5vdGlmaWNhdGlvbkRhdGFbXTtcclxuICAgIGNsb3NlOiAoaWQ6IG51bWJlcikgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvbkRpc3BsYXkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8Tm90aWZpY2F0aW9uRGlzcGxheVByb3BzLCB7fT4ge1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvYXN0LWRpc3BsYXlcIj5cclxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLm5vdGlmaWNhdGlvbnMubWFwKChub3RpZmljYXRpb24pID0+IChcclxuICAgICAgICAgICAgICAgICAgICA8Tm90aWZpY2F0aW9uIGRhdGE9e25vdGlmaWNhdGlvbn0gY2xvc2U9e3RoaXMucHJvcHMuY2xvc2V9IGtleT17bm90aWZpY2F0aW9uLmlkfSAvPlxyXG4gICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNoZWNrRXhoYXVzdGl2ZWx5IH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllc1wiO1xyXG5pbXBvcnQgeyBGdWxsTm90aWZpY2F0aW9uRGF0YSwgTm90aWZpY2F0aW9uVHlwZSB9IGZyb20gXCIuL25vdGlmaWNhdGlvbi1tb2RlbHNcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTm90aWZpY2F0aW9uUHJvcHMge1xyXG4gICAgZGF0YTogRnVsbE5vdGlmaWNhdGlvbkRhdGE7XHJcbiAgICBjbG9zZTogKGlkOiBudW1iZXIpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJ1aWxkQ2xhc3NUZXh0KHR5cGU6IE5vdGlmaWNhdGlvblR5cGUpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgYmFzZUNsYXNzID0gXCJ0b2FzdCBub3RpZmljYXRpb24gXCI7XHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuREFOR0VSOlxyXG4gICAgICAgICAgICByZXR1cm4gYmFzZUNsYXNzICsgXCJpcy1kYW5nZXJcIjtcclxuICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuSU5GTzpcclxuICAgICAgICAgICAgcmV0dXJuIGJhc2VDbGFzcyArIFwiaXMtaW5mb1wiO1xyXG4gICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5QUklNQVJZOlxyXG4gICAgICAgICAgICByZXR1cm4gYmFzZUNsYXNzICsgXCJpcy1wcmltYXJ5XCI7XHJcbiAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlNVQ0NFU1M6XHJcbiAgICAgICAgICAgIHJldHVybiBiYXNlQ2xhc3MgKyBcImlzLXN1Y2Nlc3NcIjtcclxuICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuV0FSTklORzpcclxuICAgICAgICAgICAgcmV0dXJuIGJhc2VDbGFzcyArIFwiaXMtd2FybmluZ1wiO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGNoZWNrRXhoYXVzdGl2ZWx5KHR5cGUpO1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIlJlYWNoZWQgdW5yZWFjaGFibGUgY29kZSFcIik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8Tm90aWZpY2F0aW9uUHJvcHMsIHt9PiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogTm90aWZpY2F0aW9uUHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuaGFuZGxlQ2xvc2UgPSB0aGlzLmhhbmRsZUNsb3NlLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlQ2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5jbG9zZSh0aGlzLnByb3BzLmRhdGEuaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2J1aWxkQ2xhc3NUZXh0KHRoaXMucHJvcHMuZGF0YS50eXBlKX0+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImRlbGV0ZVwiIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xvc2V9IC8+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5kYXRhLnRleHR9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmV4cG9ydCBpbnRlcmZhY2UgVHV0b3JpYWxQcm9wcyB7XHJcbiAgICBzaG93VHV0b3JpYWw6IGJvb2xlYW47XHJcbiAgICBjbG9zZVR1dG9yaWFsOiAoKSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVHV0b3JpYWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VHV0b3JpYWxQcm9wcywge30+IHtcclxuICAgIHB1YmxpYyByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3Qgc2hvd1R1dG9yaWFsID0gdGhpcy5wcm9wcy5zaG93VHV0b3JpYWwgPyBcIiBpcy1hY3RpdmVcIiA6IFwiXCI7XHJcbiAgICAgICAgY29uc3QgbW9kYWxDbGFzcyA9IFwibW9kYWxcIiArIHNob3dUdXRvcmlhbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e21vZGFsQ2xhc3N9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1iYWNrZ3JvdW5kXCIgb25DbGljaz17dGhpcy5wcm9wcy5jbG9zZVR1dG9yaWFsfSAvPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1jYXJkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGhlYWRlciBjbGFzc05hbWU9XCJtb2RhbC1jYXJkLWhlYWRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibW9kYWwtY2FyZC10aXRsZVwiPlZlbGtvbW1lbiB0aWwgTGF2aW5pYTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJkZWxldGVcIiBhcmlhLWxhYmVsPVwiY2xvc2VcIiBvbkNsaWNrPXt0aGlzLnByb3BzLmNsb3NlVHV0b3JpYWx9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9oZWFkZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibW9kYWwtY2FyZC1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxiPlByb2dyYW10aXBzPC9iPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkgTGF2aW5pYSB2aWwgZHUgc2UgaGplbHBlc3ltYm9sZXIgKDxpIGNsYXNzTmFtZT1cImZhcyBmYS1pbmZvLWNpcmNsZSBoYXMtdGV4dC1wcmltYXJ5XCIgLz4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWQgZGUgZm9yc2tqZWxsaWdlIGlubnN0aWxsaW5nZW5lLiBEZXJzb20gZHUgaG9sZGVyIG11c2VwZWtlcmVuIG92ZXIgZGUgdmlsIGR1IGbDpSBlbiBrb3J0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JrbGFyaW5nIG9tIGlubnN0aWxsaW5nZW4uIER1IGthbiBrbGlra2UgcMOlIHN5bWJvbGVuZSBmb3Igw6UgZsOlIG1lciBpbmZvcm1hc2pvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGI+V2lraTwvYj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb3Igw6UgbGVzZSBtZXIgc29tIExhdmluaWEgb2cgZGV0IG5vcnNrZSB2YWxnc3lzdGVtZXQga2FuIGR1IHRhIGVuIHRpdHQgcMOlIHdpa2llbiB2w6VyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIGhyZWY9e3Byb2Nlc3MuZW52LldJS0kgKyBcIiNMYXZpbmlhXCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcIiBcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cHJvY2Vzcy5lbnYuV0lLSSArIFwiI0xhdmluaWFcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICA8Zm9vdGVyIGNsYXNzTmFtZT1cIm1vZGFsLWNhcmQtZm9vdCBoYXMtdGV4dC1jZW50ZXJlZFwiIHN0eWxlPXt7IGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiIH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ1dHRvbiBpcy1tZWRpdW1cIiBvbkNsaWNrPXt0aGlzLnByb3BzLmNsb3NlVHV0b3JpYWx9IGlkPXtcImNsb3NlX3R1dG9yaWFsX2J1dHRvblwifT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9LXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZm9vdGVyPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZFZlcnNpb24sIHNhdmVWZXJzaW9uLCBsb2FkU3RhdGUgfSBmcm9tIFwiLi9sb2NhbC1zdG9yYWdlXCI7XHJcblxyXG4vKipcclxuICogU2ltcGxlIHZlcnNpb24gdmFsaWRhdG9yLlxyXG4gKlxyXG4gKiBAcGFyYW0gbG9jYWxWZXJzaW9uIC0gdmVyc2lvbiBzdG9yZWQgaW4gbG9jYWxTdG9yYWdlLlxyXG4gKiBAcGFyYW0gYXBwVmVyc2lvbiAtIHZlcnNpb24gZnJvbSB0aGUgYXBwbGljYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RhdGVJc0ludmFsaWQoKSB7XHJcbiAgICBjb25zdCBsb2NhbFZlcnNpb24gPSBsb2FkVmVyc2lvbigpO1xyXG4gICAgaWYgKGxvY2FsVmVyc2lvbikge1xyXG4gICAgICAgIGlmIChpc0luY29tcGF0aWJsZVZlcnNpb24obG9jYWxWZXJzaW9uKSB8fCAhbG9hZFN0YXRlKCkpIHtcclxuICAgICAgICAgICAgY2xlYXJBbmRTYXZlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2xlYXJBbmRTYXZlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgdmVyc2lvbiBwYXNzZWQgaW4gaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBjdXJyZW50IHZlcnNpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB2ZXJzaW9uIHZlcnNpb24gdG8gY2hlY2sgYWdhaW5zdCBjdXJyZW50IHZlcnNpb25cclxuICovXHJcbmZ1bmN0aW9uIGlzSW5jb21wYXRpYmxlVmVyc2lvbih2ZXJzaW9uOiBWZXJzaW9uKSB7XHJcbiAgICByZXR1cm4gdmVyc2lvbi5tYWpvciAhPT0gY3VycmVudFZlcnNpb24ubWFqb3IgfHwgdmVyc2lvbi5taW5vciAhPT0gY3VycmVudFZlcnNpb24ubWlub3I7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIGxvY2FsU3RvcmFnZSwgc2F2ZXMgdGhlIGN1cnJlbnQgdmVyc2lvbiwgdGhlbiByZXR1cm5zIGZhbHNlLlxyXG4gKi9cclxuZnVuY3Rpb24gY2xlYXJBbmRTYXZlKCkge1xyXG4gICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XHJcbiAgICBzYXZlVmVyc2lvbihjdXJyZW50VmVyc2lvbik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBhcHBsaWNhdGlvbi5cclxuICpcclxuICogTkI6IFRoaXMgTVVTVCBiZSB1cGRhdGVkIHdpdGggYW55IGJyZWFraW5nIHN0YXRlIGNoYW5nZSFcclxuICpcclxuICogVE9ETzogQ29uZmlndXJlIHRoaXMgdG8gYmUgZ3JhYmJlZCBmcm9tIHBhY2thZ2UuanNvblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGN1cnJlbnRWZXJzaW9uOiBWZXJzaW9uID0ge1xyXG4gICAgbWFqb3I6IDIsXHJcbiAgICBtaW5vcjogOCxcclxuICAgIHBhdGNoOiAwLFxyXG59O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBWZXJzaW9uIHtcclxuICAgIC8qKlxyXG4gICAgICogSWRlbnRpZmllcyB3aGljaCB2ZXJzaW9uIG9mIHRoZSBhcHBsaWNhdGlvbiAobW9kZWwvQVBJKSB3YXMgdXNlZC4gVXNlZFxyXG4gICAgICogaW4gY29tYmluYXRpb24gd2l0aCB0aGUgbWlub3IgdmVyc2lvbiBudW1iZXIgdG8gY2hlY2sgaWYgc3RhdGUgbmVlZHMgdG9cclxuICAgICAqIGJlIHJlc2V0LlxyXG4gICAgICovXHJcbiAgICBtYWpvcjogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZGVudGlmaWVzIHdoaWNoIHN0YXRlIHZlcnNpb24gcmVsYXRpdmUgdG8gdGhlIG1ham9yIHZlcnNpb24gd2FzIHVzZWQsXHJcbiAgICAgKiBjYXVzaW5nIHBvdGVudGlhbGx5IGJyZWFraW5nIGNoYW5nZXMgcmVxdWlyaW5nIGEgc3RhdGUgcmVzZXQuXHJcbiAgICAgKi9cclxuICAgIG1pbm9yOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIElkZW50aWZpZXMgd2hldGhlciB0aGVyZSBoYXZlIGJlZW4gYW55IHN0YXRlIGNoYW5nZXMgYXQgYWxsOyBwcmVzdW1hYmx5XHJcbiAgICAgKiB0aGlzIGZpZWxkIGlzIG9ubHkgdXNlZCBmb3IgZGVidWdnaW5nLCBhcyBicmVha2luZ1xyXG4gICAgICovXHJcbiAgICBwYXRjaDogbnVtYmVyO1xyXG59XHJcbiIsImltcG9ydCB7IFJhd0FsZ29yaXRobSwgQWxnb3JpdGhtLCBSYXdQYXJhbWV0ZXJzLCBQYXJhbWV0ZXJzIH0gZnJvbSBcIi4vcmVxdWVzdGVkLWRhdGEtbW9kZWxzXCI7XHJcbmltcG9ydCB7IHJhd0RpY3Rpb25hcnlUb0RpY3Rpb25hcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RpY3Rpb25hcnlcIjtcclxuaW1wb3J0IHsgZ2V0QWxnb3JpdGhtVHlwZVN0cmluZyB9IGZyb20gXCIuLi9jb21wdXRhdGlvbi9sb2dpY1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJhd0FsZ29yaXRobVRvQWxnb3JpdGhtQ29udmVydGVyKHJhd0FsZ29yaXRobTogUmF3QWxnb3JpdGhtKTogQWxnb3JpdGhtIHtcclxuICAgIGNvbnN0IGFsZ29yaXRobTogQWxnb3JpdGhtID0ge1xyXG4gICAgICAgIGFsZ29yaXRobTogZ2V0QWxnb3JpdGhtVHlwZVN0cmluZyhyYXdBbGdvcml0aG0uYWxnb3JpdGhtKSxcclxuICAgICAgICBwYXJhbWV0ZXJzOiByYXdEaWN0aW9uYXJ5VG9EaWN0aW9uYXJ5KHJhd0FsZ29yaXRobS5wYXJhbWV0ZXJzKSxcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGFsZ29yaXRobTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJhd1BhcmFtZXRlcnNUb1BhcmFtZXRlcnNDb252ZXJ0ZXIocmF3UGFyYW1ldGVyczogUmF3UGFyYW1ldGVycyk6IFBhcmFtZXRlcnMge1xyXG4gICAgY29uc3QgcGFyYW1ldGVyczogUGFyYW1ldGVycyA9IHtcclxuICAgICAgICBhbGdvcml0aG06IHJhd0FsZ29yaXRobVRvQWxnb3JpdGhtQ29udmVydGVyKHJhd1BhcmFtZXRlcnMuYWxnb3JpdGhtKSxcclxuICAgICAgICBhcmVhRmFjdG9yOiByYXdQYXJhbWV0ZXJzLmFyZWFGYWN0b3IsXHJcbiAgICAgICAgZGlzdHJpY3RTZWF0czogcmF3UGFyYW1ldGVycy5kaXN0cmljdFNlYXRzLFxyXG4gICAgICAgIGVsZWN0aW9uVHlwZTogcmF3UGFyYW1ldGVycy5lbGVjdGlvblR5cGUsXHJcbiAgICAgICAgZWxlY3Rpb25ZZWFyOiByYXdQYXJhbWV0ZXJzLmVsZWN0aW9uWWVhcixcclxuICAgICAgICBsZXZlbGluZ1NlYXRzOiByYXdQYXJhbWV0ZXJzLmxldmVsaW5nU2VhdHMsXHJcbiAgICAgICAgdGhyZXNob2xkOiByYXdQYXJhbWV0ZXJzLnRocmVzaG9sZCxcclxuICAgICAgICB0b3RhbFZvdGVzOiByYXdQYXJhbWV0ZXJzLnRvdGFsVm90ZXMsXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBwYXJhbWV0ZXJzO1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlLCBsb2FkU3RhdGUsIHNhdmVTdGF0ZSB9IGZyb20gXCIuL3N0b3JlXCI7XHJcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuXCI7XHJcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSBcImxvZGFzaFwiO1xyXG5pbXBvcnQgXCIuL2JsdWUtdGhlbWUuc2Nzc1wiO1xyXG5cclxuY29uc3QgcGVyc2lzdGVkU3RhdGUgPSBsb2FkU3RhdGUoKTtcclxuXHJcbmNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoaGlzdG9yeSwgcGVyc2lzdGVkU3RhdGUpO1xyXG5cclxuc3RvcmUuc3Vic2NyaWJlKFxyXG4gICAgZGVib3VuY2UoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZS5yZXF1ZXN0ZWREYXRhU3RhdGUuZW5hYmxlQXV0b1NhdmUpIHtcclxuICAgICAgICAgICAgc2F2ZVN0YXRlKGN1cnJlbnRTdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgNTAwKVxyXG4pO1xyXG5cclxuUmVhY3RET00ucmVuZGVyKFxyXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgPEFwcCAvPlxyXG4gICAgPC9Qcm92aWRlcj4sXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIilcclxuKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==